(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{175:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var i=n(1),a=n(9),o=(n(0),n(231)),c={title:"The this keyword (JavaScript)",description:"An overview of how the this keyword works in JavaScript",last_modified:new Date("2022-01-31T10:44:35.286Z"),sidebar_label:"The this keyword"},r={id:"javascript/this-keyword",title:"The this keyword (JavaScript)",description:"An overview of how the this keyword works in JavaScript",source:"@site/docs\\javascript\\this-keyword.md",permalink:"/interview-prep/javascript/this-keyword",sidebar_label:"The this keyword",sidebar:"docs",previous:{title:"Spread syntax, rest parameters and destructuring (JavaScript)",permalink:"/interview-prep/javascript/spread-syntax-rest-parameters-destructuring"},next:{title:"Compiler API (TypeScript)",permalink:"/interview-prep/javascript/typescript/compiler-api"}},l=[{value:"Basic idea",id:"basic-idea",children:[]},{value:"Rules for binding <code>this</code>",id:"rules-for-binding-this",children:[{value:"Default binding",id:"default-binding",children:[]},{value:"Implicit binding",id:"implicit-binding",children:[]},{value:"Explicit binding",id:"explicit-binding",children:[]},{value:"<code>new</code> binding",id:"new-binding",children:[]}]},{value:"Priority of the rules",id:"priority-of-the-rules",children:[]},{value:"Lexical <code>this</code>",id:"lexical-this",children:[]},{value:"Resources",id:"resources",children:[]}],s={rightToc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"An overview of how the this keyword works in JavaScript"),Object(o.b)("h2",{id:"basic-idea"},"Basic idea"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Every function has access to a ",Object(o.b)("inlineCode",{parentName:"li"},"this")," reference"),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"this")," reference is assigned a value when creating the ",Object(o.b)("em",{parentName:"li"},"execution context")," for an execution of the function (see ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"/javascript/scope-closures"}),"Scope and closures"),")",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Note that this means that a function's ",Object(o.b)("inlineCode",{parentName:"li"},"this")," can point to different things based on how it's executed!"),Object(o.b)("li",{parentName:"ul"},"Run-time binding, not write-time binding! In that sense, it's a bit the opposite of lexical scoping (see ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"/javascript/scope-closures"}),"Scope and closures"),")"))),Object(o.b)("li",{parentName:"ul"},"What the ",Object(o.b)("inlineCode",{parentName:"li"},"this")," reference points to is determined by a number of rules")),Object(o.b)("h2",{id:"rules-for-binding-this"},"Rules for binding ",Object(o.b)("inlineCode",{parentName:"h2"},"this")),Object(o.b)("h3",{id:"default-binding"},"Default binding"),Object(o.b)("p",null,"This is the most basic case, where the function is directly called without doing anything special with it"),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),'function logA() {\n    console.log(this.a);\n}\n\nvar a = "test";\n\nlogA();\n')),Object(o.b)("p",null,"What ",Object(o.b)("inlineCode",{parentName:"p"},"this")," is bound to depends on ",Object(o.b)("em",{parentName:"p"},"strict mode"),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If ",Object(o.b)("em",{parentName:"li"},"strict mode")," is not enabled, the function's ",Object(o.b)("inlineCode",{parentName:"li"},"this")," points to the global object. Since the global object has a variable ",Object(o.b)("inlineCode",{parentName:"li"},"a")," with value ",Object(o.b)("inlineCode",{parentName:"li"},"test"),", the code will print ",Object(o.b)("inlineCode",{parentName:"li"},"test")),Object(o.b)("li",{parentName:"ul"},"If ",Object(o.b)("em",{parentName:"li"},"strict mode")," is enabled, the function's ",Object(o.b)("inlineCode",{parentName:"li"},"this")," is not allowed to point to the global object. Instead, ",Object(o.b)("inlineCode",{parentName:"li"},"this")," points to ",Object(o.b)("inlineCode",{parentName:"li"},"undefined"),", and the code throws a ",Object(o.b)("inlineCode",{parentName:"li"},"TypeError")," because we tried to access ",Object(o.b)("inlineCode",{parentName:"li"},"undefined.a"))),Object(o.b)("h3",{id:"implicit-binding"},"Implicit binding"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Implicit binding")," occurs when the function is called through an object that holds a reference to it. In this case, that object is called the ",Object(o.b)("em",{parentName:"p"},"context object")," and the function's ",Object(o.b)("inlineCode",{parentName:"p"},"this")," points to the object."),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),'function logA() {\n    console.log(this.a);\n}\n\nconst theObject = {\n    a: "test",\n    logA: logA\n};\n\nconst secondObject = {\n    a: "second",\n    doSomething: logA\n};\n\ntheObject.logA(); // test\nsecondObject.doSomething(); // second\n')),Object(o.b)("p",null,"One tricky thing: it's easy to lose that implicit binding!"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),'function logA() {\n    console.log(this.a);\n}\n\nconst theObject = {\n    a: "test",\n    logA: logA\n};\n\nconst theFunction = theObject.logA; // theFunction now just points to logA\ntheFunction(); // logs undefined (non-strict mode) or throws TypeError (strict mode)\n')),Object(o.b)("p",null,"As we see above, assigning the function to a variable and then calling it doesn't use ",Object(o.b)("em",{parentName:"p"},"implicit binding")," anymore. Instead, we fall back to ",Object(o.b)("em",{parentName:"p"},"default binding"),"."),Object(o.b)("p",null,"One case where we need to be careful with that is when passing functions around as callbacks. Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),"function logA() {\n    console.log(this.a);\n}\n\nconst theObject = {\n    a: \"test\",\n    logA: logA\n};\n\n// here, we assign the function to an argument and setTimeout calls it later\n// logs undefined (non-strict mode) or throws TypeError (strict mode)\nsetTimeout(theObject.logA, 1000);\n\n// here, we make sure to call logA through theObject\n// logs 'test'\nsetTimeout(function () {\n    theObject.logA();\n}, 1000);\n")),Object(o.b)("h3",{id:"explicit-binding"},"Explicit binding"),Object(o.b)("p",null,"As the name suggests, ",Object(o.b)("em",{parentName:"p"},"explicit binding")," is more explicit about what the function's ",Object(o.b)("inlineCode",{parentName:"p"},"this")," reference is bound to"),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),'function logA() {\n    console.log(this.a);\n}\n\nconst theObject = {\n    a: "test",\n    logA: logA\n};\n\n// call and apply differ in how to specify the function\'s arguments (not relevant here)\nlogA.call(theObject); // test\nlogA.apply(theObject); // test\n\nconst theFunction = theObject.logA;\ntheFunction(); // logs undefined (non-strict mode) or throws TypeError (strict mode)\nconst boundFunction = theObject.logA.bind(theObject);\nboundFunction(); // test\n\nsetTimeout(theObject.logA.bind(theObject), 1000); // test\n')),Object(o.b)("p",null,"Some things to notice:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"call")," and ",Object(o.b)("inlineCode",{parentName:"li"},"apply")," can be used to call a function while explicitly specifying what ",Object(o.b)("inlineCode",{parentName:"li"},"this")," should point to. You can use these to dynamically call a function with any ",Object(o.b)("inlineCode",{parentName:"li"},"this")," reference you like."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"bind")," returns a new function that is identical the original function except that its ",Object(o.b)("inlineCode",{parentName:"li"},"this")," is hard-wired to the argument you passed to ",Object(o.b)("inlineCode",{parentName:"li"},"bind"),". One use case is passing the function as a callback (see example code above)")),Object(o.b)("p",null,"Other use case: ",Object(o.b)("em",{parentName:"p"},"monkey patching")," (extending the behavior of a function defined on an existing object):"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),'const existingObject = {\n    a: "test",\n    logA: function () {\n        console.log(this.a);\n    }\n};\n\nconst oldFunction = existingObject.logA;\n\nexistingObject.logA = function () {\n    console.log("before");\n    oldFunction.call(this);\n    console.log("after");\n}\n\nexistingObject.logA(); // before, test, after\n')),Object(o.b)("p",null,"Interesting monkey patching trick: find the source of unwanted console output"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),'["log", "warn"].forEach(function (method) {\n    const old = console[method];\n    \n    console[method] = function () {\n        const stack = new Error().stack.split(/\\n/)\n            .filter(line => line !== "Error")\n            .join("\\n");\n\n        return old.apply(console, [...arguments, stack]);\n    };\n});\n')),Object(o.b)("h3",{id:"new-binding"},Object(o.b)("inlineCode",{parentName:"h3"},"new")," binding"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"new")," binding occurs when using the keyword ",Object(o.b)("inlineCode",{parentName:"p"},"new")," to call a function. Invoking a function using the ",Object(o.b)("inlineCode",{parentName:"p"},"new")," keyword has the following effect:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A new object is created"),Object(o.b)("li",{parentName:"ul"},"The new object's ",Object(o.b)("inlineCode",{parentName:"li"},"__proto__")," points to the function (see ",Object(o.b)("a",Object(i.a)({parentName:"li"},{href:"/javascript/object-prototypes-classes"}),"Object prototypes and classes"),")"),Object(o.b)("li",{parentName:"ul"},"The new object is set as the ",Object(o.b)("inlineCode",{parentName:"li"},"this")," binding for that call to the function"),Object(o.b)("li",{parentName:"ul"},"Unless the function returns something itself, the function call will automatically return the new object")),Object(o.b)("p",null,"Important: ",Object(o.b)("inlineCode",{parentName:"p"},"new")," does not require any specific kind of function to be called on! It can be used on any function, and when it does, it modifies the function's behavior according to the above. In this case, the function is sometimes called a ",Object(o.b)("em",{parentName:"p"},"constructor"),", but it is still just a regular function. The only thing making it behave differently is the ",Object(o.b)("inlineCode",{parentName:"p"},"new")," keyword."),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),'// the PascalCase name is a convention for function intended to be called with new\n// JavaScript itself doesn\'t care about this\nfunction Test(a) {\n    this.a = a;\n}\n\nconst one = new Test("one");\nconst two = new Test("two");\n\nconsole.log(one.a); // one\nconsole.log(two.a); // two\n')),Object(o.b)("h2",{id:"priority-of-the-rules"},"Priority of the rules"),Object(o.b)("p",null,"From highest to lowest:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"new")," binding (overrides all the rest)"),Object(o.b)("li",{parentName:"ul"},"Explicit binding"),Object(o.b)("li",{parentName:"ul"},"Implicit binding"),Object(o.b)("li",{parentName:"ul"},"Default binding")),Object(o.b)("h2",{id:"lexical-this"},"Lexical ",Object(o.b)("inlineCode",{parentName:"h2"},"this")),Object(o.b)("p",null,"One exception to the behavior of ",Object(o.b)("inlineCode",{parentName:"p"},"this")," inside a function occurs when using ",Object(o.b)("em",{parentName:"p"},"arrow functions"),". Arrow function's don't follow the rules above. Instead, the ",Object(o.b)("inlineCode",{parentName:"p"},"this")," inside an arrow function points to the ",Object(o.b)("inlineCode",{parentName:"p"},"this")," of the surrounding scope."),Object(o.b)("p",null,"One use case: calling other function on same object from a callback"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),'const theObject = {\n    testA: function () {\n        console.log("testA");\n\n        // naive approach, ends up using default binding\n        setTimeout(function () {\n            this.testB(); // TypeError: this.testB is not a function\n        }, 1000);\n\n        // solution without arrow functions\n        const self = this;\n\n        setTimeout(function () {\n            self.testB(); // test\n        }, 2000);\n\n        // solution with arrow functions\n        setTimeout(() => {\n            this.testB();\n        }, 3000);\n    },\n    testB: function () {\n        console.log("testB");\n    }\n};\n\ntheObject.testA();\n')),Object(o.b)("p",null,"Also note that, because of the fact that arrow functions don't have their own ",Object(o.b)("inlineCode",{parentName:"p"},"this"),", JavaScript does not allow you to call them using the ",Object(o.b)("inlineCode",{parentName:"p"},"new")," keyword:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),'const Test = () => {\n    this.a = "test";\n}\n\nconst theObject = new Test(); // TypeError\n')),Object(o.b)("h2",{id:"resources"},"Resources"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{href:"https://github.com/getify/You-Dont-Know-JS",target:"_blank",rel:"nofollow noopener noreferrer"},"You Don't Know JS ",Object(o.b)("svg",{class:"embedded-fa-icon"},Object(o.b)("use",{href:"#external-link-alt"})))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{href:"https://remysharp.com/2014/05/23/where-is-that-console-log/",target:"_blank",rel:"nofollow noopener noreferrer"},"Where is that console.log? ",Object(o.b)("svg",{class:"embedded-fa-icon"},Object(o.b)("use",{href:"#external-link-alt"}))))))}b.isMDXComponent=!0},231:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var i=n(0),a=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r({},t,{},e)),n},p=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),d=i,h=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return n?a.a.createElement(h,r({ref:t},s,{components:n})):a.a.createElement(h,r({ref:t},s))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,c=new Array(o);c[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,c[1]=r;for(var s=2;s<o;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);