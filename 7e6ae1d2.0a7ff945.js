(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{189:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var r=n(1),i=n(9),a=(n(0),n(231)),o={title:"Overloading, overriding and method hiding (Java)",description:"An overview of how overloading, overriding and method hiding works in Java",last_modified:new Date("2020-05-30T13:54:15.000Z"),sidebar_label:"Overloading, overriding and method hiding"},s={id:"java/overloading-overriding-method-hiding",title:"Overloading, overriding and method hiding (Java)",description:"An overview of how overloading, overriding and method hiding works in Java",source:"@site/docs\\java\\overloading-overriding-method-hiding.md",permalink:"/interview-prep/java/overloading-overriding-method-hiding",sidebar_label:"Overloading, overriding and method hiding",sidebar:"docs",previous:{title:"Optional type (Java)",permalink:"/interview-prep/java/optional"},next:{title:"Streams (Java)",permalink:"/interview-prep/java/streams"}},c=[{value:"Overloading",id:"overloading",children:[]},{value:"Overriding",id:"overriding",children:[]},{value:"Combining overloading and overriding",id:"combining-overloading-and-overriding",children:[]},{value:"Method hiding",id:"method-hiding",children:[]},{value:"Resources",id:"resources",children:[]}],b={rightToc:c};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"An overview of how overloading, overriding and method hiding works in Java"),Object(a.b)("h2",{id:"overloading"},"Overloading"),Object(a.b)("p",null,"What it is: a class has several methods with the same name but different number or types of parameters and Java chooses which one to call based on the arguments you pass"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'class OverloadingTest {\n    public void testMethod(Object object) {\n        System.out.println("object");\n    }\n    \n    public void testMethod(String string) {\n        System.out.println("string");\n    }\n}\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'OverloadingTest test = new OverloadingTest();\nObject testObject = new Object();\nString testString = "testString";\n\ntest.testMethod(testObject); // object\ntest.testMethod(testString); // string\n')),Object(a.b)("p",null,"Important: the exact ",Object(a.b)("em",{parentName:"p"},"signature")," of the method to call is based at ",Object(a.b)("strong",{parentName:"p"},"compile time")," using the compile-time types of the arguments"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"Object testStringAsObject = testString;\ntest.testMethod(testStringAsObject); // object\n")),Object(a.b)("h2",{id:"overriding"},"Overriding"),Object(a.b)("p",null,"What it is: a subclass overrides an instance method of a direct or indirect superclass by providing its own implementation"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'class OverridingTestSuper {\n    public void testMethod(Object object) {\n        System.out.println("super");\n    }\n}\n\nclass OverridingTestSub extends OverridingTestSuper {\n    @Override\n    public void testMethod(Object object) {\n        System.out.println("sub");\n    }\n}\n')),Object(a.b)("p",null,"Note: use",Object(a.b)("inlineCode",{parentName:"p"},"@Override")," annotation when overriding, so the Java compiler helps you check that the method is actually correctly overriding a supertype method"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"OverridingTestSuper testSuper = new OverridingTestSuper();\nOverridingTestSub testSub = new OverridingTestSub();\nObject testObject = new Object();\n\ntestSuper.testMethod(testObject); // super\ntestSub.testMethod(testObject); // sub\n")),Object(a.b)("p",null,"Important: The ",Object(a.b)("em",{parentName:"p"},"implementation")," to invoke is determined at ",Object(a.b)("strong",{parentName:"p"},"run time")," based on the actual runtime type of the object and the structure of the inheritance hierarchy"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"OverridingTestSuper testSubAsSuper = testSub;\ntestSubAsSuper.testMethod(testObject); // sub\n")),Object(a.b)("h2",{id:"combining-overloading-and-overriding"},"Combining overloading and overriding"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'class CombinedTestSuper {\n    public void testMethod(Object object) {\n        System.out.println("super object");\n    }\n}\n\nclass CombinedTestSub extends CombinedTestSuper {\n    @Override\n    public void testMethod(Object object) {\n        System.out.println("sub object");\n    }\n    \n    public void testMethod(String string) {\n        System.out.println("sub string");\n    }\n}\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'CombinedTestSuper testSuper = new CombinedTestSuper();\nCombinedTestSub testSub = new CombinedTestSub();\nCombinedTestSuper testSubAsSuper = testSub;\n\nString testString = "testString";\nObject testStringAsObject = testString;\n\ntestSuper.testMethod(testString); // super object (only one method on CombinedTestSuper)\ntestSuper.testMethod(testStringAsObject); // super object (only one method on CombinedTestSuper)\n\ntestSub.testMethod(testString); // sub string (chooses signature testMethod(String) on CombinedTestSub)\ntestSub.testMethod(testStringAsObject); // sub object (chooses signature testMethod(Object) on CombinedTestSub)\n\ntestSubAsSuper.testMethod(testString); // sub object (uses signature of only method on CombinedTestSuper but implementation of CombinedTestSub)\ntestSubAsSuper.testMethod(testStringAsObject); // sub object (uses signature of only method on CombinedTestSuper but implementation of CombinedTestSub)\n')),Object(a.b)("h2",{id:"method-hiding"},"Method hiding"),Object(a.b)("p",null,"For static methods, overloading is still used to determine the signature of the method to invoke"),Object(a.b)("p",null,"But what if superclass and subclass both have static method with same signature?"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'class CombinedTestSuper {\n    public static void testStaticMethod(Object object) {\n        System.out.println("super");\n    }\n}\n\nclass CombinedTestSub extends CombinedTestSuper {\n    public static void testStaticMethod(Object object) {\n        System.out.println("sub");\n    }\n}\n')),Object(a.b)("p",null,"Calling static methods on classes:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"Object testObject = new Object();\n\nStaticSuper.testStaticMethod(testObject); // super\nStaticSub.testStaticMethod(testObject); // sub\n")),Object(a.b)("p",null,"Calling static methods on instances (note that this will generate compiler warnings):"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"StaticSuper staticSuper = new StaticSuper();\nStaticSub staticSub = new StaticSub();\nStaticSuper staticSubAsSuper = staticSub;\n\nstaticSuper.testStaticMethod(testObject); // super\nstaticSub.testStaticMethod(testObject); // sub\nstaticSubAsSuper.testStaticMethod(testObject); // super (!!!)\n")),Object(a.b)("p",null,"No overriding here! Instead, we get ",Object(a.b)("em",{parentName:"p"},"method hiding"),"."),Object(a.b)("p",null,"Can be pretty confusing (not only the method hiding itself, but also the fact that we call a static method in a way that makes it look like an instance method), which is also why we get warnings when doing this."),Object(a.b)("h2",{id:"resources"},"Resources"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{href:"https://docs.oracle.com/javase/specs/jls/se10/html/jls-8.html#jls-8.4.9",target:"_blank",rel:"nofollow noopener noreferrer"},"Overloading in the Java Language Specification ",Object(a.b)("svg",{class:"embedded-fa-icon"},Object(a.b)("use",{href:"#external-link-alt"})))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{href:"https://crunchify.com/java-method-hiding-and-overriding-override-static-method-in-java/9",target:"_blank",rel:"nofollow noopener noreferrer"},"Java Method Hiding and Overriding ",Object(a.b)("svg",{class:"embedded-fa-icon"},Object(a.b)("use",{href:"#external-link-alt"}))))))}d.isMDXComponent=!0},231:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return g}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var b=i.a.createContext({}),d=function(e){var t=i.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},l=function(e){var t=d(e.components);return i.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),l=d(n),p=r,g=l["".concat(o,".").concat(p)]||l[p]||u[p]||a;return n?i.a.createElement(g,s({ref:t},b,{components:n})):i.a.createElement(g,s({ref:t},b))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var b=2;b<a;b++)o[b]=n[b];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);