"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[8337],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4783:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],p={title:"Nullable types and optional parameters/properties (TypeScript)",description:"An overview of how TypeScript deals with null, undefined and optional parameters/properties",last_modified:new Date("2022-01-31T10:44:35.294Z"),sidebar_label:"Nullable types and optional parameters/properties"},o=void 0,s={unversionedId:"javascript/typescript/nullable-types-optional-parameters-properties",id:"javascript/typescript/nullable-types-optional-parameters-properties",title:"Nullable types and optional parameters/properties (TypeScript)",description:"An overview of how TypeScript deals with null, undefined and optional parameters/properties",source:"@site/docs/javascript/typescript/nullable-types-optional-parameters-properties.md",sourceDirName:"javascript/typescript",slug:"/javascript/typescript/nullable-types-optional-parameters-properties",permalink:"/interview-prep/javascript/typescript/nullable-types-optional-parameters-properties",draft:!1,tags:[],version:"current",frontMatter:{title:"Nullable types and optional parameters/properties (TypeScript)",description:"An overview of how TypeScript deals with null, undefined and optional parameters/properties",last_modified:"2022-01-31T10:44:35.294Z",sidebar_label:"Nullable types and optional parameters/properties"},sidebar:"docs",previous:{title:"Index types",permalink:"/interview-prep/javascript/typescript/index-types"},next:{title:"Runtime type checking in TypeScript",permalink:"/interview-prep/javascript/typescript/runtime-type-checking"}},u={},c=[{value:"Nullable types",id:"nullable-types",level:2},{value:"Optional chaining",id:"optional-chaining",level:2},{value:"Non-null assertion operator",id:"non-null-assertion-operator",level:2},{value:"Optional parameters",id:"optional-parameters",level:2},{value:"Optional properties",id:"optional-properties",level:2},{value:"Resources",id:"resources",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"An overview of how TypeScript deals with null, undefined and optional parameters/properties"),(0,i.kt)("h2",{id:"nullable-types"},"Nullable types"),(0,i.kt)("p",null,"Two special types: ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Treated as different from each other, because that's what JavaScript does as well"),(0,i.kt)("li",{parentName:"ul"},"By default, assignable to anything, but this can be changed by enabling the ",(0,i.kt)("inlineCode",{parentName:"li"},"--strictNullChecks")," flag",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Recommended to enable this, allow type checking to prevent a lot of potential runtime errors")))),(0,i.kt)("p",null,"Example without ",(0,i.kt)("inlineCode",{parentName:"p"},"--strictNullChecks"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// everything ok according to compiler\nconst test1: string = undefined;\nconst test2: string = null;\nconst test3: string | undefined = undefined;\nconst test4: string | undefined = null;\nconst test5: string | null = undefined;\nconst test6: string | null = null;\nconst test7: string | null | undefined = undefined;\nconst test8: string | null | undefined = null;\n")),(0,i.kt)("p",null,"Example with ",(0,i.kt)("inlineCode",{parentName:"p"},"--strictNullChecks"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const test1: string = undefined; // error\nconst test2: string = null; // error\nconst test3: string | undefined = undefined;\nconst test4: string | undefined = null; // error\nconst test5: string | null = undefined; // error\nconst test6: string | null = null;\nconst test7: string | null | undefined = undefined;\nconst test8: string | null | undefined = null;\n")),(0,i.kt)("h2",{id:"optional-chaining"},"Optional chaining"),(0,i.kt)("p",null,"(introduced in TypeScript 3.7)"),(0,i.kt)("p",null,"Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," that allows to stop evaluation when something is ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")),(0,i.kt)("p",null,"Motivation: accessing ",(0,i.kt)("inlineCode",{parentName:"p"},"instance.prop.otherProp.nextProp")," where at each level the property may be ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," (leading to runtime errors if we fail to check for it)"),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"let x = instance.prop?.otherProp;\n// is equivalent to\nlet x = instance.prop === null || instance.prop === undefined ? undefined : instance.prop.otherProp;\n")),(0,i.kt)("p",null,"Note that, if evaluation stops because something is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),", the result is still ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")),(0,i.kt)("h2",{id:"non-null-assertion-operator"},"Non-null assertion operator"),(0,i.kt)("p",null,"Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," that allows to let TypeScript know you are sure that a certain value is not ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," (useful in situations where the code is too complex for TypeScript to figure this out by itself)"),(0,i.kt)("p",null,"Example (with ",(0,i.kt)("inlineCode",{parentName:"p"},"--strictNullChecks"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'function test(str: string | null | undefined) {\n    const ensureStringDefined = function () {\n        if (str === null || str === undefined) {\n            str = "test";\n        }\n    }\n\n    ensureStringDefined();\n    console.log(str.toUpperCase()); // error\n    console.log(str!.toUpperCase()); // ok\n}\n')),(0,i.kt)("h2",{id:"optional-parameters"},"Optional parameters"),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"--strictNullChecks")," is enabled, making a parameter optional automatically adds ",(0,i.kt)("inlineCode",{parentName:"p"}," | undefined")," to its type"),(0,i.kt)("p",null,"Example without ",(0,i.kt)("inlineCode",{parentName:"p"},"--strictNullChecks"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'function test(a: string, b?: string) {\n    return a;\n}\n\n// everything ok according to compiler\ntest("a");\ntest("a", undefined);\ntest("a", null);\n')),(0,i.kt)("p",null,"Example with ",(0,i.kt)("inlineCode",{parentName:"p"},"--strictNullChecks"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'function test(a: string, b?: string) {\n    return a;\n}\n\ntest("a");\ntest("a", undefined);\ntest("a", null); // error\n')),(0,i.kt)("p",null,"Note: an optional parameter is not completely the same as a parameter that needs to be provided but can be undefined!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'function test2(a: string, b: string | undefined) {\n    return a;\n}\n\ntest2("b"); // error because of missing argument, even without --strictNullChecks\ntest2("b", undefined); // ok\n')),(0,i.kt)("p",null,"You can use this to force the code using your function to be very explicit about passing in ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")),(0,i.kt)("h2",{id:"optional-properties"},"Optional properties"),(0,i.kt)("p",null,"Example without ",(0,i.kt)("inlineCode",{parentName:"p"},"--strictNullChecks"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"class Test {\n  a: number = 1;\n  b?: number;\n}\n\n// everything ok according to compiler\nlet test = new Test();\ntest.a = 12;\ntest.a = undefined;\ntest.a = null;\ntest.b = 12;\ntest.b = undefined;\ntest.b = null;\n")),(0,i.kt)("p",null,"Example with ",(0,i.kt)("inlineCode",{parentName:"p"},"--strictNullChecks"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"class Test {\n  a: number = 1;\n  b?: number;\n}\n\nlet test = new Test();\ntest.a = 12;\ntest.a = undefined; // error\ntest.a = null; // error\ntest.b = 12;\ntest.b = undefined; \ntest.b = null; // error\n")),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html",target:"_blank",rel:"nofollow noopener noreferrer"},"Advanced Types ",(0,i.kt)("svg",{class:"embedded-fa-icon"},(0,i.kt)("use",{href:"#external-link-alt"}))))))}m.isMDXComponent=!0}}]);