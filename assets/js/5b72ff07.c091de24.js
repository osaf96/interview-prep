"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[6636],{3905:function(t,n,e){e.d(n,{Zo:function(){return d},kt:function(){return g}});var a=e(7294);function l(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function r(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?r(Object(e),!0).forEach((function(n){l(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function p(t,n){if(null==t)return{};var e,a,l=function(t,n){if(null==t)return{};var e,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)e=r[a],n.indexOf(e)>=0||(l[e]=t[e]);return l}(t,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)e=r[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(l[e]=t[e])}return l}var u=a.createContext({}),m=function(t){var n=a.useContext(u),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},d=function(t){var n=m(t.components);return a.createElement(u.Provider,{value:n},t.children)},k={inlineCode:"code",wrapper:function(t){var n=t.children;return a.createElement(a.Fragment,{},n)}},o=a.forwardRef((function(t,n){var e=t.components,l=t.mdxType,r=t.originalType,u=t.parentName,d=p(t,["components","mdxType","originalType","parentName"]),o=m(e),g=l,N=o["".concat(u,".").concat(g)]||o[g]||k[g]||r;return e?a.createElement(N,i(i({ref:n},d),{},{components:e})):a.createElement(N,i({ref:n},d))}));function g(t,n){var e=arguments,l=n&&n.mdxType;if("string"==typeof t||l){var r=e.length,i=new Array(r);i[0]=o;var p={};for(var u in n)hasOwnProperty.call(n,u)&&(p[u]=n[u]);p.originalType=t,p.mdxType="string"==typeof t?t:l,i[1]=p;for(var m=2;m<r;m++)i[m]=e[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,e)}o.displayName="MDXCreateElement"},4084:function(t,n,e){e.r(n),e.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return k}});var a=e(7462),l=e(3366),r=(e(7294),e(3905)),i=["components"],p={title:"Complexity",description:"This will cover the most of the topics that will be part of the Complexity.",last_modified:new Date("2022-06-08T15:36:32.363Z"),sidebar_label:"Complexity"},u=void 0,m={unversionedId:"data-structures/complexity",id:"data-structures/complexity",title:"Complexity",description:"This will cover the most of the topics that will be part of the Complexity.",source:"@site/docs/data-structures/complexity.md",sourceDirName:"data-structures",slug:"/data-structures/complexity",permalink:"/interview-prep/data-structures/complexity",draft:!1,tags:[],version:"current",frontMatter:{title:"Complexity",description:"This will cover the most of the topics that will be part of the Complexity.",last_modified:"2022-06-08T15:36:32.363Z",sidebar_label:"Complexity"},sidebar:"docs",previous:{title:"Comparators",permalink:"/interview-prep/data-structures/comparators"},next:{title:"Deque",permalink:"/interview-prep/data-structures/dequeue"}},d={},k=[{value:"Below are the Big O performance of common functions of different Java Collections.",id:"below-are-the-big-o-performance-of-common-functions-of-different-java-collections",level:2}],o={toc:k};function g(t){var n=t.components,e=(0,l.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},o,e,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This will cover the most of the topics that will be part of the Complexity."),(0,r.kt)("h2",{id:"below-are-the-big-o-performance-of-common-functions-of-different-java-collections"},"Below are the Big O performance of common functions of different Java Collections."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"List"),(0,r.kt)("th",{parentName:"tr",align:null},"Add"),(0,r.kt)("th",{parentName:"tr",align:null},"Remove"),(0,r.kt)("th",{parentName:"tr",align:null},"Get"),(0,r.kt)("th",{parentName:"tr",align:null},"Contains"),(0,r.kt)("th",{parentName:"tr",align:null},"Next"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Structure"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ArrayList"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LinkedList"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Linked List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CopyOnWriteArrayList"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Array")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Set"),(0,r.kt)("th",{parentName:"tr",align:null},"Add"),(0,r.kt)("th",{parentName:"tr",align:null},"Remove"),(0,r.kt)("th",{parentName:"tr",align:null},"Contains"),(0,r.kt)("th",{parentName:"tr",align:null},"Next"),(0,r.kt)("th",{parentName:"tr",align:null},"Size"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Structure"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HashSet"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(h/n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Hash Table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LinkedHashSet"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Hash Table + Linked List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"EnumSet"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Bit Vector")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TreeSet"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Red-black tree")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CopyOnWriteArraySet"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ConcurrentSkipListSet"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"Skip List")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Queue"),(0,r.kt)("th",{parentName:"tr",align:null},"Offer"),(0,r.kt)("th",{parentName:"tr",align:null},"Peak"),(0,r.kt)("th",{parentName:"tr",align:null},"Poll"),(0,r.kt)("th",{parentName:"tr",align:null},"Remove"),(0,r.kt)("th",{parentName:"tr",align:null},"Size"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Structure"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PriorityQueue"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Priority Heap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LinkedList"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ArrayDequeue"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Linked List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ConcurrentLinkedQueue"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"Linked List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ArrayBlockingQueue"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PriorirityBlockingQueue"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Priority Heap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SynchronousQueue"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"None!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DelayQueue"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Priority Heap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LinkedBlockingQueue"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Linked List")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Map"),(0,r.kt)("th",{parentName:"tr",align:null},"Get"),(0,r.kt)("th",{parentName:"tr",align:null},"ContainsKey"),(0,r.kt)("th",{parentName:"tr",align:null},"Next"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Structure"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HashMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(h / n)"),(0,r.kt)("td",{parentName:"tr",align:null},"Hash Table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LinkedHashMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Hash Table + Linked List")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IdentityHashMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(h / n)"),(0,r.kt)("td",{parentName:"tr",align:null},"Array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"WeakHashMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(h / n)"),(0,r.kt)("td",{parentName:"tr",align:null},"Hash Table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"EnumMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TreeMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"Red-black tree")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ConcurrentHashMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(h / n)"),(0,r.kt)("td",{parentName:"tr",align:null},"Hash Tables")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ConcurrentSkipListMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(log n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Skip List")))))}g.isMDXComponent=!0}}]);