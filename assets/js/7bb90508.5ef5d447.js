"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[3903],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=a,y=u["".concat(p,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5482:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={title:"Conditional types (TypeScript)",description:"An explanation of TypeScript conditional types and an overview of some useful predefined ones",last_modified:new Date("2020-05-30T13:54:15.000Z"),sidebar_label:"Conditional types"},p=void 0,s={unversionedId:"javascript/typescript/conditional-types",id:"javascript/typescript/conditional-types",title:"Conditional types (TypeScript)",description:"An explanation of TypeScript conditional types and an overview of some useful predefined ones",source:"@site/docs/javascript/typescript/conditional-types.md",sourceDirName:"javascript/typescript",slug:"/javascript/typescript/conditional-types",permalink:"/interview-prep/about/javascript/typescript/conditional-types",draft:!1,tags:[],version:"current",frontMatter:{title:"Conditional types (TypeScript)",description:"An explanation of TypeScript conditional types and an overview of some useful predefined ones",last_modified:"2020-05-30T13:54:15.000Z",sidebar_label:"Conditional types"},sidebar:"docs",previous:{title:"Compiler API",permalink:"/interview-prep/about/javascript/typescript/compiler-api"},next:{title:"Index types",permalink:"/interview-prep/about/javascript/typescript/index-types"}},c={},d=[{value:"Basic idea",id:"basic-idea",level:2},{value:"Predefined conditional types",id:"predefined-conditional-types",level:2},{value:"Resources",id:"resources",level:2}],u={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"An explanation of TypeScript conditional types and an overview of some useful predefined ones"),(0,i.kt)("h2",{id:"basic-idea"},"Basic idea"),(0,i.kt)("p",null,"Conditional type: selects one of two possible types based on a condition, where the condition is something that tests for the relationship between types"),(0,i.kt)("p",null,"General structure: ",(0,i.kt)("inlineCode",{parentName:"p"},"T extends U ? X : Y")),(0,i.kt)("p",null,"Examples (adapted from ",(0,i.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#conditional-types",target:"_blank",rel:"nofollow noopener noreferrer"},"Conditional Types ",(0,i.kt)("svg",{class:"embedded-fa-icon"},(0,i.kt)("use",{href:"#external-link-alt"}))),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"declare function f<T extends boolean>(x: T): T extends true ? string : number;\n\nlet test1 = f(Math.random() < 0.5); // type: string | number\nlet test2 = f(true); // type: string\nlet test3 = f(false); // type: number;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'type TypeName<T> = T extends string\n  ? "string"\n  : T extends number\n  ? "number"\n  : T extends boolean\n  ? "boolean"\n  : T extends undefined\n  ? "undefined"\n  : T extends Function\n  ? "function"\n  : "object";\n\ntype T0 = TypeName<string>; // "string"\ntype T1 = TypeName<"a">; // "string"\ntype T2 = TypeName<true>; // "boolean"\ntype T3 = TypeName<() => void>; // "function"\ntype T4 = TypeName<string[]>; // "object"\n')),(0,i.kt)("p",null,"The above were examples where the conditional type is ",(0,i.kt)("em",{parentName:"p"},"resolved")," (the compiler can immediately decide what the resulting type is going to be)"),(0,i.kt)("p",null,"Alternatively, the type can be ",(0,i.kt)("em",{parentName:"p"},"deferred"),", meaning the compiler will decide when it has more info"),(0,i.kt)("p",null,"Example (adapted from ",(0,i.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#conditional-types",target:"_blank",rel:"nofollow noopener noreferrer"},"Conditional Types ",(0,i.kt)("svg",{class:"embedded-fa-icon"},(0,i.kt)("use",{href:"#external-link-alt"}))),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'interface Test {\n  propA: boolean;\n  propB: boolean;\n}\n\ndeclare function f<T>(x: T): T extends Test ? string : number;\n\n// return type: T extends Test ? string : number\nfunction test<U>(x: U) {\n  return f(x); // type\n}\n\nconst result1 = test("a") // type: number\nconst result2 = test({ propA: true, propB: false }) // type: string\n')),(0,i.kt)("h2",{id:"predefined-conditional-types"},"Predefined conditional types"),(0,i.kt)("p",null,"Some conditional types already defined by the TypeScript language (see ",(0,i.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#predefined-conditional-types",target:"_blank",rel:"nofollow noopener noreferrer"},"Predefined conditional types ",(0,i.kt)("svg",{class:"embedded-fa-icon"},(0,i.kt)("use",{href:"#external-link-alt"}))),"):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Exclude")," \u2014 Exclude from ",(0,i.kt)("inlineCode",{parentName:"li"},"T")," those types that are assignable to ",(0,i.kt)("inlineCode",{parentName:"li"},"U")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Extract")," \u2014 Extract from ",(0,i.kt)("inlineCode",{parentName:"li"},"T")," those types that are assignable to ",(0,i.kt)("inlineCode",{parentName:"li"},"U")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NonNullable")," \u2014 Exclude ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"T")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReturnType")," \u2014 Obtain the return type of a function type"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"InstanceType")," \u2014 Obtain the instance type of a constructor function type")),(0,i.kt)("p",null,"Examples (adapted from ",(0,i.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#predefined-conditional-types",target:"_blank",rel:"nofollow noopener noreferrer"},"Predefined conditional types ",(0,i.kt)("svg",{class:"embedded-fa-icon"},(0,i.kt)("use",{href:"#external-link-alt"}))),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'type Test1 = Exclude<"a" | "b" | "c" | "d", "a" | "c" | "f">; // "b" | "d"\ntype Test2 = Extract<"a" | "b" | "c" | "d", "a" | "c" | "f">; // "a" | "c"\n\ntype Test3 = Exclude<string | number | (() => void), Function>; // string | number\ntype Test4 = Extract<string | number | (() => void), Function>; // () => void\n\ntype Test5 = NonNullable<string | number | undefined>; // string | number\ntype Test6 = NonNullable<(string[] | null | undefined>; // string[]\n\ntype Test7 = ReturnType<() => boolean> // boolean\n')),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html",target:"_blank",rel:"nofollow noopener noreferrer"},"Advanced Types ",(0,i.kt)("svg",{class:"embedded-fa-icon"},(0,i.kt)("use",{href:"#external-link-alt"}))))))}f.isMDXComponent=!0}}]);