"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[9369],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var p=2;p<l;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1099:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var r=n(7462),i=n(3366),l=(n(7294),n(3905)),a=["components"],o={title:"Linked List",description:"This will cover the most of the topics that will be part of the linked list.",last_modified:new Date("2022-06-08T15:36:32.363Z"),sidebar_label:"Linked List"},s=void 0,p={unversionedId:"preparation/linked-list",id:"preparation/linked-list",title:"Linked List",description:"This will cover the most of the topics that will be part of the linked list.",source:"@site/docs/preparation/linked-list.md",sourceDirName:"preparation",slug:"/preparation/linked-list",permalink:"/interview-prep/about/preparation/linked-list",draft:!1,tags:[],version:"current",frontMatter:{title:"Linked List",description:"This will cover the most of the topics that will be part of the linked list.",last_modified:"2022-06-08T15:36:32.363Z",sidebar_label:"Linked List"},sidebar:"docs",previous:{title:"Graph",permalink:"/interview-prep/about/preparation/graph"},next:{title:"Map",permalink:"/interview-prep/about/preparation/map"}},u={},d=[{value:"Sorting a Linked List using Heap Sort.",id:"sorting-a-linked-list-using-heap-sort",level:2},{value:"Inserting element at the end of the Linked List.",id:"inserting-element-at-the-end-of-the-linked-list",level:2},{value:"Reverse Linked List.",id:"reverse-linked-list",level:2},{value:"Remove Duplicates from Sorted List. Sentinel + Predecessor",id:"remove-duplicates-from-sorted-list-sentinel--predecessor",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This will cover the most of the topics that will be part of the linked list."),(0,l.kt)("h2",{id:"sorting-a-linked-list-using-heap-sort"},"Sorting a Linked List using Heap Sort."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode sortList(ListNode head) {\n        ListNode curr = head;\n        Queue<ListNode> queue = new PriorityQueue<>((n1, n2) -> n1.val - n2.val); \n        while (curr != null) {\n            queue.add(curr);\n            curr = curr.next;\n        }\n        \n        ListNode dummy = new ListNode();\n        ListNode prev = dummy;\n        while (!queue.isEmpty()) {\n            curr = queue.poll();\n            curr.next = null;\n            prev.next = curr;\n            prev = curr;\n        }\n        return dummy.next;\n    }\n}\n")),(0,l.kt)("h2",{id:"inserting-element-at-the-end-of-the-linked-list"},"Inserting element at the end of the Linked List."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode insert(ListNode root, int item)\n    {\n        ListNode temp = new ListNode(item);\n        temp.next = null;\n        if (root == null)\n            root = temp;\n        else {\n            ListNode ptr = root;\n            while (ptr.next != null)\n                ptr = ptr.next;\n            ptr.next = temp;\n        }\n        return root;\n    }\n}\n")),(0,l.kt)("h2",{id:"reverse-linked-list"},"Reverse Linked List."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n        \n        while(curr!=null){\n            ListNode temp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = temp;\n            \n        }\n        return prev;\n    }\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operation"),(0,l.kt)("th",{parentName:"tr",align:null},"Time Complexity"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"reverseList"),(0,l.kt)("td",{parentName:"tr",align:null},"O(n)")))),(0,l.kt)("h2",{id:"remove-duplicates-from-sorted-list-sentinel--predecessor"},"Remove Duplicates from Sorted List. ","[Sentinel + Predecessor]"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n    // sentinel\n    ListNode sentinel = new ListNode(0, head);\n\n    // predecessor = the last node\n    // before the sublist of duplicates\n    ListNode pred = sentinel;\n\n    while (head != null) {\n        // if it's a beginning of duplicates sublist\n        // skip all duplicates\n        if (head.next != null && head.val == head.next.val) {\n        // move till the end of duplicates sublist\n        while (head.next != null && head.val == head.next.val) {\n            head = head.next;\n        }\n        // skip all duplicates\n        pred.next = head.next;\n        // otherwise, move predecessor\n        } else {\n        pred = pred.next;\n        }\n\n        // move forward\n        head = head.next;\n    }\n    return sentinel.next;\n    }\n}\n")))}m.isMDXComponent=!0}}]);