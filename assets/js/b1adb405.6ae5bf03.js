"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[9702],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){p(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,p=function(e,n){if(null==e)return{};var t,r,p={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(p[t]=e[t]);return p}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(p[t]=e[t])}return p}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,p=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),y=l(t),d=p,m=y["".concat(s,".").concat(d)]||y[d]||u[d]||a;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function d(e,n){var t=arguments,p=n&&n.mdxType;if("string"==typeof e||p){var a=t.length,i=new Array(a);i[0]=y;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:p,i[1]=o;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3664:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u}});var r=t(7462),p=t(3366),a=(t(7294),t(3905)),i=["components"],o={title:"Index types (TypeScript)",description:"Some examples of TypeScript index types and how to use them",last_modified:new Date("2020-11-21T18:14:37.196Z"),sidebar_label:"Index types"},s=void 0,l={unversionedId:"javascript/typescript/index-types",id:"javascript/typescript/index-types",title:"Index types (TypeScript)",description:"Some examples of TypeScript index types and how to use them",source:"@site/docs/javascript/typescript/index-types.md",sourceDirName:"javascript/typescript",slug:"/javascript/typescript/index-types",permalink:"/interview-prep/javascript/typescript/index-types",draft:!1,tags:[],version:"current",frontMatter:{title:"Index types (TypeScript)",description:"Some examples of TypeScript index types and how to use them",last_modified:"2020-11-21T18:14:37.196Z",sidebar_label:"Index types"},sidebar:"docs",previous:{title:"Conditional types",permalink:"/interview-prep/javascript/typescript/conditional-types"},next:{title:"Nullable types and optional parameters/properties",permalink:"/interview-prep/javascript/typescript/nullable-types-optional-parameters-properties"}},c={},u=[{value:"Index operators",id:"index-operators",level:2},{value:"Index signatures",id:"index-signatures",level:2},{value:"Use case: mapped types",id:"use-case-mapped-types",level:3},{value:"<code>Readonly</code> and <code>Partial</code>",id:"readonly-and-partial",level:4},{value:"<code>Pick</code>",id:"pick",level:4},{value:"Use case: dictionaries with enum or type union keys",id:"use-case-dictionaries-with-enum-or-type-union-keys",level:3},{value:"Resources",id:"resources",level:2}],y={toc:u};function d(e){var n=e.components,t=(0,p.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Some examples of TypeScript index types and how to use them"),(0,a.kt)("h2",{id:"index-operators"},"Index operators"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Index type query operator:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"keyof")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface Test {\n    propA: number;\n    propB: string;\n}\n\ntype TestKey = keyof Test; \n// type TestKey = "propA" | "propB"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Indexed access operator:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"T[K]")),(0,a.kt)("p",null,"Can be used in generic context to indicate property types"),(0,a.kt)("p",null,"Example (adapted from ",(0,a.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#index-types",target:"_blank",rel:"nofollow noopener noreferrer"},"Index types ",(0,a.kt)("svg",{class:"embedded-fa-icon"},(0,a.kt)("use",{href:"#external-link-alt"}))),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface Test {\n    propA: number;\n    propB: string;\n}\n\nfunction getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n    return o[propertyName]; // o[propertyName] is of type T[K]\n}\n\nconst test: Test = { propA: 1, propB: "b" };\n\ngetProperty(test, "propA"); // type number\ngetProperty(test, "propB"); // type string\n')),(0,a.kt)("h2",{id:"index-signatures"},"Index signatures"),(0,a.kt)("p",null,"Can be used to specify structure of object with arbitrary property names"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface IndexSignature {\n    [key: string]: boolean | number;\n    a: boolean;\n    b: number;\n}\n\nfunction test(input: IndexSignature) {\n    input.a // type boolean\n    input.b // type number\n    input.c // type boolean | number;\n}\n")),(0,a.kt)("p",null,"Can also be used with generics:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface GenericIndexSignature<T> {\n    [key: string]: T;\n}\n\nfunction test(input: GenericIndexSignature<number>) {\n    input.c // type number;\n    input.d // type number;\n}\n")),(0,a.kt)("h3",{id:"use-case-mapped-types"},"Use case: mapped types"),(0,a.kt)("p",null,"Mapped types = new types based on other types"),(0,a.kt)("h4",{id:"readonly-and-partial"},(0,a.kt)("inlineCode",{parentName:"h4"},"Readonly")," and ",(0,a.kt)("inlineCode",{parentName:"h4"},"Partial")),(0,a.kt)("p",null,"Implementations (already provided by TypeScript language):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type Readonly<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P];\n};\n")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Person {\n    name: string;\n    age: number;\n}\n\ntype ReadonlyPerson = Readonly<Person>;\n// type ReadonlyPerson = { readonly name: string; readonly age: number; }\n\ntype PartialPerson = Partial<Person>;\n// type PartialPerson = { name?: string | undefined; age? : number | undefined; }\n")),(0,a.kt)("h4",{id:"pick"},(0,a.kt)("inlineCode",{parentName:"h4"},"Pick")),(0,a.kt)("p",null,"Implementation (already provided by TypeScript language):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type Pick<T, K extends keyof T> = {\n  [P in K]: T[P];\n};\n")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface Test {\n    propA: string;\n    propB: number;\n    propC: boolean;\n}\n\ntype Picked = Pick<Test, "propA" | "propC">;\n// type Picked = { propA: string; propC: boolean; }\n')),(0,a.kt)("h3",{id:"use-case-dictionaries-with-enum-or-type-union-keys"},"Use case: dictionaries with enum or type union keys"),(0,a.kt)("p",null,"Example with enum keys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'enum TestEnum {\n  First = "First",\n  Second = "Second",\n  Third = "Third"\n}\n\ntype DictionaryWithAllKeys = { [key in TestEnum]: number; };\ntype DictionaryWithSomeKeys = { [key in TestEnum]?: number; };\n\n// error: property \'Third\' is missing\nconst testAllKeys: DictionaryWithAllKeys = {\n  First: 1,\n  Second: 2\n}\n\nconst testSomeKeys: DictionaryWithSomeKeys = {\n  First: 1,\n  Second: 2\n}\n')),(0,a.kt)("p",null,"Example with type union keys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'type TestUnion = "First" | "Second" | "Third";\n\ntype DictionaryWithAllKeys = { [key in TestUnion]: number; };\ntype DictionaryWithSomeKeys = { [key in TestUnion]?: number; };\n\n// error: property \'Third\' is missing\nconst testAllKeys: DictionaryWithAllKeys = {\n  First: 1,\n  Second: 2\n}\n\nconst testSomeKeys: DictionaryWithSomeKeys = {\n  First: 1,\n  Second: 2\n}\n')),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html",target:"_blank",rel:"nofollow noopener noreferrer"},"Advanced Types ",(0,a.kt)("svg",{class:"embedded-fa-icon"},(0,a.kt)("use",{href:"#external-link-alt"}))))))}d.isMDXComponent=!0}}]);