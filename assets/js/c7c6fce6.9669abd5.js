"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[5453],{3905:function(s,a,e){e.d(a,{Zo:function(){return p},kt:function(){return m}});var t=e(7294);function n(s,a,e){return a in s?Object.defineProperty(s,a,{value:e,enumerable:!0,configurable:!0,writable:!0}):s[a]=e,s}function i(s,a){var e=Object.keys(s);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(s);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(s,a).enumerable}))),e.push.apply(e,t)}return e}function r(s){for(var a=1;a<arguments.length;a++){var e=null!=arguments[a]?arguments[a]:{};a%2?i(Object(e),!0).forEach((function(a){n(s,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(a){Object.defineProperty(s,a,Object.getOwnPropertyDescriptor(e,a))}))}return s}function c(s,a){if(null==s)return{};var e,t,n=function(s,a){if(null==s)return{};var e,t,n={},i=Object.keys(s);for(t=0;t<i.length;t++)e=i[t],a.indexOf(e)>=0||(n[e]=s[e]);return n}(s,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(s);for(t=0;t<i.length;t++)e=i[t],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(s,e)&&(n[e]=s[e])}return n}var o=t.createContext({}),l=function(s){var a=t.useContext(o),e=a;return s&&(e="function"==typeof s?s(a):r(r({},a),s)),e},p=function(s){var a=l(s.components);return t.createElement(o.Provider,{value:a},s.children)},u={inlineCode:"code",wrapper:function(s){var a=s.children;return t.createElement(t.Fragment,{},a)}},g=t.forwardRef((function(s,a){var e=s.components,n=s.mdxType,i=s.originalType,o=s.parentName,p=c(s,["components","mdxType","originalType","parentName"]),g=l(e),m=n,d=g["".concat(o,".").concat(m)]||g[m]||u[m]||i;return e?t.createElement(d,r(r({ref:a},p),{},{components:e})):t.createElement(d,r({ref:a},p))}));function m(s,a){var e=arguments,n=a&&a.mdxType;if("string"==typeof s||n){var i=e.length,r=new Array(i);r[0]=g;var c={};for(var o in a)hasOwnProperty.call(a,o)&&(c[o]=a[o]);c.originalType=s,c.mdxType="string"==typeof s?s:n,r[1]=c;for(var l=2;l<i;l++)r[l]=e[l];return t.createElement.apply(null,r)}return t.createElement.apply(null,e)}g.displayName="MDXCreateElement"},8729:function(s,a,e){e.r(a),e.d(a,{assets:function(){return p},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var t=e(7462),n=e(3366),i=(e(7294),e(3905)),r=["components"],c={title:"DFS (Depth First Search)",description:"This will cover the most of the topics that will be part of the Depth First Search.",last_modified:new Date("2022-06-08T15:36:32.363Z"),sidebar_label:"Depth First Search"},o=void 0,l={unversionedId:"preparation/dfs",id:"preparation/dfs",title:"DFS (Depth First Search)",description:"This will cover the most of the topics that will be part of the Depth First Search.",source:"@site/docs/preparation/dfs.md",sourceDirName:"preparation",slug:"/preparation/dfs",permalink:"/interview-prep/preparation/dfs",draft:!1,tags:[],version:"current",frontMatter:{title:"DFS (Depth First Search)",description:"This will cover the most of the topics that will be part of the Depth First Search.",last_modified:"2022-06-08T15:36:32.363Z",sidebar_label:"Depth First Search"},sidebar:"docs",previous:{title:"Deque",permalink:"/interview-prep/preparation/dequeue"},next:{title:"Graph",permalink:"/interview-prep/preparation/graph"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Implementation of DFS",id:"implementation-of-dfs",level:2},{value:"Application of DFS",id:"application-of-dfs",level:2},{value:"Common Problems (Frequently Asked Questions)",id:"common-problems-frequently-asked-questions",level:3},{value:"Binary Tree Paths",id:"binary-tree-paths",level:4},{value:"Question on LeetCode with Tag - DFS",id:"question-on-leetcode-with-tag---dfs",level:3}],g={toc:u};function m(s){var a=s.components,e=(0,n.Z)(s,r);return(0,i.kt)("wrapper",(0,t.Z)({},g,e,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This will cover the most of the topics that will be part of the Depth First Search."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"\u27a1\ufe0f Depth\u2013first search (DFS) is an algorithm for traversing or searching tree or graph data structures.",(0,i.kt)("br",null),"\n\u27a1\ufe0f One starts at the root (selecting some arbitrary node as the root for a graph) and explore as far as possible along each branch before backtracking.",(0,i.kt)("br",null)),(0,i.kt)("h2",{id:"implementation-of-dfs"},"Implementation of DFS"),(0,i.kt)("p",null,"\u27a1\ufe0f Both the below implementations are same. ",(0,i.kt)("br",null),"\n\u27a1\ufe0f The only difference is, the first one uses Stack which you can visualize better and for the second case, how the internal stack is used. ",(0,i.kt)("br",null),"\n\u27a1\ufe0f Both are the In-order Traversal of a Binary Tree.",(0,i.kt)("br",null)),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class Solution{\n    public void dfs(Node root){\n        Stack<Node> stack = new Stack<>();\n        Node current = root;\n        while(current != null || !stack.isEmpty()){\n            if(current != null){\n                stack.push(current);\n                current = current.left;\n            }else{\n                current = stack.pop();\n                System.out.println(current.data);\n                current = current.right;\n            }\n        }\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class Solution{\n    public void dfs(Node root){\n        if(root == null) return;\n        dfs(root.left);\n        System.out.println(root.data);\n        dfs(root.right);\n        \n    }\n}\n")),(0,i.kt)("h2",{id:"application-of-dfs"},"Application of DFS"),(0,i.kt)("h3",{id:"common-problems-frequently-asked-questions"},"Common Problems (Frequently Asked Questions)"),(0,i.kt)("h4",{id:"binary-tree-paths"},"Binary Tree Paths"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n\n    public List<String> binaryTreePaths(TreeNode root) {\n        List<List<Integer>> paths = new ArrayList<List<Integer>>();\n        // Edge case\n        if (root == null) {\n            return new ArrayList<String>();\n        }\n        List<Integer> path = new ArrayList<>();\n        dfsMethod1(root, path, paths);\n        // or\n        //dfsMethod2(root, path, paths);\n        System.out.println(paths);\n        return new ArrayList<String>();\n    }\n\n    private void dfsMethod1(TreeNode node,List<Integer> path,List<List<Integer>> paths) {\n        if (node == null) return;\n        path.add(node.val);\n        if (node.left == null && node.right == null) {\n            paths.add(new ArrayList<>(path));\n        }\n        dfs(node.left, path, paths);\n        dfs(node.right, path, paths);\n        path.remove(path.size() - 1);\n    }\n\n    //Alternative : You don't need to check the initial null condition, If all the recursive call\n    //are made only when the node's left and right is not null.\n    private void dfsMethod2(TreeNode node,List<Integer> path,List<List<Integer>> paths) {\n        path.add(node.val);\n        if (node.left == null && node.right == null) {\n            paths.add(new ArrayList<>(path));\n        }\n        if (node.left != null) {\n            dfs(node.left, path, paths);\n        }\n        if (node.right != null) {\n            dfs(node.right, path, paths);\n        }\n        path.remove(path.size() - 1);\n    }\n}\n")),(0,i.kt)("h3",{id:"question-on-leetcode-with-tag---dfs"},"Question on LeetCode with Tag - DFS"),(0,i.kt)("span",{class:"tag-is-success"},"Binary Tree Inorder Traversal"),(0,i.kt)("span",{class:"tag-is-primary"},"Validate Binary Search Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Recover Binary Search Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Same Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Symmetric Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Maximum Depth of Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Balanced Binary Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Minimum Depth of Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Path Sum"),(0,i.kt)("span",{class:"tag-is-info"},"Path Sum II"),(0,i.kt)("span",{class:"tag-is-success"},"Flatten Binary Tree to Linked List"),(0,i.kt)("span",{class:"tag-is-primary"},"Populating Next Right Pointers in Each Node"),(0,i.kt)("span",{class:"tag-is-success"},"Populating Next Right Pointers in Each Node II"),(0,i.kt)("span",{class:"tag-is-info"},"Binary Tree Maximum Path Sum"),(0,i.kt)("span",{class:"tag-is-success"},"Sum Root to Leaf Numbers"),(0,i.kt)("span",{class:"tag-is-primary"},"Surrounded Regions"),(0,i.kt)("span",{class:"tag-is-success"},"Clone Graph"),(0,i.kt)("span",{class:"tag-is-info"},"Binary Tree Preorder Traversal"),(0,i.kt)("span",{class:"tag-is-success"},"Binary Tree Postorder Traversal"),(0,i.kt)("span",{class:"tag-is-primary"},"Binary Tree Upside Down"),(0,i.kt)("span",{class:"tag-is-success"},"Binary Tree Right Side View"),(0,i.kt)("span",{class:"tag-is-info"},"Number of Islands"),(0,i.kt)("span",{class:"tag-is-success"},"Course Schedule"),(0,i.kt)("span",{class:"tag-is-primary"},"Course Schedule II"),(0,i.kt)("span",{class:"tag-is-success"},"Design Add and Search Words Data Structure"),(0,i.kt)("span",{class:"tag-is-info"},"Count Complete Tree Nodes"),(0,i.kt)("span",{class:"tag-is-success"},"Invert Binary Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Kth Smallest Element in a BST"),(0,i.kt)("span",{class:"tag-is-success"},"Lowest Common Ancestor of a Binary Search Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Lowest Common Ancestor of a Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Count Univalue Subtrees"),(0,i.kt)("span",{class:"tag-is-primary"},"Binary Tree Paths"),(0,i.kt)("span",{class:"tag-is-success"},"Graph Valid Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Alien Dictionary"),(0,i.kt)("span",{class:"tag-is-success"},"Closest Binary Search Tree Value"),(0,i.kt)("span",{class:"tag-is-primary"},"Closest Binary Search Tree Value II"),(0,i.kt)("span",{class:"tag-is-success"},"Inorder Successor in BST"),(0,i.kt)("span",{class:"tag-is-info"},"Serialize and Deserialize Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Binary Tree Longest Consecutive Sequence"),(0,i.kt)("span",{class:"tag-is-primary"},"Smallest Rectangle Enclosing Black Pixels"),(0,i.kt)("span",{class:"tag-is-success"},"Minimum Height Trees"),(0,i.kt)("span",{class:"tag-is-info"},"Binary Tree Vertical Order Traversal"),(0,i.kt)("span",{class:"tag-is-success"},"Number of Connected Components in an Undirected Graph"),(0,i.kt)("span",{class:"tag-is-primary"},"Longest Increasing Path in a Matrix"),(0,i.kt)("span",{class:"tag-is-success"},"Reconstruct Itinerary"),(0,i.kt)("span",{class:"tag-is-info"},"Largest BST Subtree"),(0,i.kt)("span",{class:"tag-is-success"},"House Robber III"),(0,i.kt)("span",{class:"tag-is-primary"},"Nested List Weight Sum"),(0,i.kt)("span",{class:"tag-is-success"},"Flatten Nested List Iterator"),(0,i.kt)("span",{class:"tag-is-info"},"Nested List Weight Sum II"),(0,i.kt)("span",{class:"tag-is-success"},"Water and Jug Problem"),(0,i.kt)("span",{class:"tag-is-primary"},"Find Leaves of Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Mini Parser"),(0,i.kt)("span",{class:"tag-is-info"},"Lexicographical Numbers"),(0,i.kt)("span",{class:"tag-is-success"},"Longest Absolute File Path"),(0,i.kt)("span",{class:"tag-is-primary"},"Evaluate Division"),(0,i.kt)("span",{class:"tag-is-success"},"Sum of Left Leaves"),(0,i.kt)("span",{class:"tag-is-info"},"Pacific Atlantic Water Flow"),(0,i.kt)("span",{class:"tag-is-success"},"Battleships in a Board"),(0,i.kt)("span",{class:"tag-is-primary"},"Path Sum III"),(0,i.kt)("span",{class:"tag-is-success"},"Serialize and Deserialize BST"),(0,i.kt)("span",{class:"tag-is-info"},"Island Perimeter"),(0,i.kt)("span",{class:"tag-is-success"},"Concatenated Words"),(0,i.kt)("span",{class:"tag-is-primary"},"The Maze"),(0,i.kt)("span",{class:"tag-is-success"},"The Maze III"),(0,i.kt)("span",{class:"tag-is-info"},"Find Mode in Binary Search Tree"),(0,i.kt)("span",{class:"tag-is-success"},"The Maze II"),(0,i.kt)("span",{class:"tag-is-primary"},"Most Frequent Subtree Sum"),(0,i.kt)("span",{class:"tag-is-success"},"All Paths from Source Lead to Destination"),(0,i.kt)("span",{class:"tag-is-info"},"Find Bottom Left Tree Value"),(0,i.kt)("span",{class:"tag-is-success"},"Freedom Trail"),(0,i.kt)("span",{class:"tag-is-primary"},"Find Largest Value in Each Tree Row"),(0,i.kt)("span",{class:"tag-is-success"},"Minesweeper"),(0,i.kt)("span",{class:"tag-is-info"},"Minimum Absolute Difference in BST"),(0,i.kt)("span",{class:"tag-is-success"},"Construct Binary Tree from String"),(0,i.kt)("span",{class:"tag-is-primary"},"Convert BST to Greater Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Diameter of Binary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Boundary of Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Number of Provinces"),(0,i.kt)("span",{class:"tag-is-primary"},"Binary Tree Longest Consecutive Sequence II"),(0,i.kt)("span",{class:"tag-is-success"},"Binary Tree Tilt"),(0,i.kt)("span",{class:"tag-is-info"},"Array Nesting"),(0,i.kt)("span",{class:"tag-is-success"},"Subtree of Another Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Kill Process"),(0,i.kt)("span",{class:"tag-is-success"},"Construct String from Binary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Merge Two Binary Trees"),(0,i.kt)("span",{class:"tag-is-success"},"Add One Row to Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Average of Levels in Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Find Duplicate Subtrees"),(0,i.kt)("span",{class:"tag-is-info"},"Two Sum IV - Input is a BST"),(0,i.kt)("span",{class:"tag-is-success"},"Print Binary Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Maximum Width of Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Equal Tree Partition"),(0,i.kt)("span",{class:"tag-is-info"},"Path Sum IV"),(0,i.kt)("span",{class:"tag-is-success"},"Trim a Binary Search Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Second Minimum Node In a Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Bulb Switcher II"),(0,i.kt)("span",{class:"tag-is-info"},"Redundant Connection"),(0,i.kt)("span",{class:"tag-is-success"},"Redundant Connection II"),(0,i.kt)("span",{class:"tag-is-primary"},"Longest Univalue Path"),(0,i.kt)("span",{class:"tag-is-success"},"Employee Importance"),(0,i.kt)("span",{class:"tag-is-info"},"Number of Distinct Islands"),(0,i.kt)("span",{class:"tag-is-success"},"Max Area of Island"),(0,i.kt)("span",{class:"tag-is-primary"},"Number of Distinct Islands II"),(0,i.kt)("span",{class:"tag-is-success"},"Accounts Merge"),(0,i.kt)("span",{class:"tag-is-info"},"Flood Fill"),(0,i.kt)("span",{class:"tag-is-success"},"Sentence Similarity II"),(0,i.kt)("span",{class:"tag-is-primary"},"Closest Leaf in a Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Network Delay Time"),(0,i.kt)("span",{class:"tag-is-info"},"Contain Virus"),(0,i.kt)("span",{class:"tag-is-success"},"Cracking the Safe"),(0,i.kt)("span",{class:"tag-is-primary"},"Pyramid Transition Matrix"),(0,i.kt)("span",{class:"tag-is-success"},"Convert Binary Search Tree to Sorted Doubly Linked List"),(0,i.kt)("span",{class:"tag-is-info"},"Serialize and Deserialize N-ary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Flatten a Multilevel Doubly Linked List"),(0,i.kt)("span",{class:"tag-is-primary"},"Couples Holding Hands"),(0,i.kt)("span",{class:"tag-is-success"},"Encode N-ary Tree to Binary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Maximum Depth of N-ary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"N-ary Tree Preorder Traversal"),(0,i.kt)("span",{class:"tag-is-primary"},"N-ary Tree Postorder Traversal"),(0,i.kt)("span",{class:"tag-is-success"},"Swim in Rising Water"),(0,i.kt)("span",{class:"tag-is-info"},"Minimum Distance Between BST Nodes"),(0,i.kt)("span",{class:"tag-is-success"},"Is Graph Bipartite?"),(0,i.kt)("span",{class:"tag-is-primary"},"Cheapest Flights Within K Stops"),(0,i.kt)("span",{class:"tag-is-success"},"All Paths From Source to Target"),(0,i.kt)("span",{class:"tag-is-info"},"Find Eventual Safe States"),(0,i.kt)("span",{class:"tag-is-success"},"Binary Tree Pruning"),(0,i.kt)("span",{class:"tag-is-primary"},"Making A Large Island"),(0,i.kt)("span",{class:"tag-is-success"},"Sum of Distances in Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Similar String Groups"),(0,i.kt)("span",{class:"tag-is-success"},"Keys and Rooms"),(0,i.kt)("span",{class:"tag-is-primary"},"Loud and Rich"),(0,i.kt)("span",{class:"tag-is-success"},"All Nodes Distance K in Binary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Smallest Subtree with all the Deepest Nodes"),(0,i.kt)("span",{class:"tag-is-success"},"Leaf-Similar Trees"),(0,i.kt)("span",{class:"tag-is-primary"},"Possible Bipartition"),(0,i.kt)("span",{class:"tag-is-success"},"Increasing Order Search Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Minimize Malware Spread"),(0,i.kt)("span",{class:"tag-is-success"},"Minimize Malware Spread II"),(0,i.kt)("span",{class:"tag-is-primary"},"Shortest Bridge"),(0,i.kt)("span",{class:"tag-is-success"},"Range Sum of BST"),(0,i.kt)("span",{class:"tag-is-info"},"Most Stones Removed with Same Row or Column"),(0,i.kt)("span",{class:"tag-is-success"},"Flip Equivalent Binary Trees"),(0,i.kt)("span",{class:"tag-is-primary"},"Regions Cut By Slashes"),(0,i.kt)("span",{class:"tag-is-success"},"Univalued Binary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Binary Tree Cameras"),(0,i.kt)("span",{class:"tag-is-success"},"Flip Binary Tree To Match Preorder Traversal"),(0,i.kt)("span",{class:"tag-is-primary"},"Distribute Coins in Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Vertical Order Traversal of a Binary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Smallest String Starting From Leaf"),(0,i.kt)("span",{class:"tag-is-success"},"Cousins in Binary Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Number of Enclaves"),(0,i.kt)("span",{class:"tag-is-success"},"Sum of Root To Leaf Binary Numbers"),(0,i.kt)("span",{class:"tag-is-info"},"Maximum Average Subtree"),(0,i.kt)("span",{class:"tag-is-success"},"Maximum Difference Between Node and Ancestor"),(0,i.kt)("span",{class:"tag-is-primary"},"Recover a Tree From Preorder Traversal"),(0,i.kt)("span",{class:"tag-is-success"},"Path With Maximum Minimum Value"),(0,i.kt)("span",{class:"tag-is-info"},"Coloring A Border"),(0,i.kt)("span",{class:"tag-is-success"},"Escape a Large Maze"),(0,i.kt)("span",{class:"tag-is-primary"},"Binary Search Tree to Greater Sum Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Maximum Level Sum of a Binary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Flower Planting With No Adjacent"),(0,i.kt)("span",{class:"tag-is-success"},"Two Sum BSTs"),(0,i.kt)("span",{class:"tag-is-primary"},"Insufficient Nodes in Root to Leaf Paths"),(0,i.kt)("span",{class:"tag-is-success"},"Tree Diameter"),(0,i.kt)("span",{class:"tag-is-info"},"Smallest Common Region"),(0,i.kt)("span",{class:"tag-is-success"},"Delete Tree Nodes"),(0,i.kt)("span",{class:"tag-is-primary"},"Delete Nodes And Return Forest"),(0,i.kt)("span",{class:"tag-is-success"},"Lowest Common Ancestor of Deepest Leaves"),(0,i.kt)("span",{class:"tag-is-info"},"Sum of Nodes with Even-Valued Grandparent"),(0,i.kt)("span",{class:"tag-is-success"},"Binary Tree Coloring Game"),(0,i.kt)("span",{class:"tag-is-primary"},"Deepest Leaves Sum"),(0,i.kt)("span",{class:"tag-is-success"},"Web Crawler"),(0,i.kt)("span",{class:"tag-is-info"},"Validate Binary Tree Nodes"),(0,i.kt)("span",{class:"tag-is-success"},"Balance a Binary Search Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Kth Ancestor of a Tree Node"),(0,i.kt)("span",{class:"tag-is-success"},"Critical Connections in a Network"),(0,i.kt)("span",{class:"tag-is-info"},"Smallest String With Swaps"),(0,i.kt)("span",{class:"tag-is-success"},"Sort Items by Groups Respecting Dependencies"),(0,i.kt)("span",{class:"tag-is-primary"},"Where Will the Ball Fall"),(0,i.kt)("span",{class:"tag-is-success"},"Distance to a Cycle in Undirected Graph"),(0,i.kt)("span",{class:"tag-is-info"},"Web Crawler Multithreaded"),(0,i.kt)("span",{class:"tag-is-success"},"Number of Closed Islands"),(0,i.kt)("span",{class:"tag-is-primary"},"Find Elements in a Contaminated Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Count Servers that Communicate"),(0,i.kt)("span",{class:"tag-is-info"},"All Elements in Two Binary Search Trees"),(0,i.kt)("span",{class:"tag-is-success"},"Jump Game III"),(0,i.kt)("span",{class:"tag-is-primary"},"All Ancestors of a Node in a Directed Acyclic Graph"),(0,i.kt)("span",{class:"tag-is-success"},"Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Number of Operations to Make Network Connected"),(0,i.kt)("span",{class:"tag-is-success"},"Delete Leaves With a Given Value"),(0,i.kt)("span",{class:"tag-is-primary"},"Maximum Product of Splitted Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Longest ZigZag Path in a Binary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Maximum Sum BST in Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Linked List in Binary Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Time Needed to Inform All Employees"),(0,i.kt)("span",{class:"tag-is-success"},"Frog Position After T Seconds"),(0,i.kt)("span",{class:"tag-is-info"},"Find a Corresponding Node of a Binary Tree in a Clone of That Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Check if There is a Valid Path in a Grid"),(0,i.kt)("span",{class:"tag-is-primary"},"Count Good Nodes in Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Minimum Time to Collect All Apples in a Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Course Schedule IV"),(0,i.kt)("span",{class:"tag-is-success"},"Pseudo-Palindromic Paths in a Binary Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Reorder Routes to Make All Paths Lead to the City Zero"),(0,i.kt)("span",{class:"tag-is-success"},"Find All The Lonely Nodes"),(0,i.kt)("span",{class:"tag-is-info"},"Clone Binary Tree With Random Pointer"),(0,i.kt)("span",{class:"tag-is-success"},"Clone N-ary Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Number of Nodes in the Sub-Tree With the Same Label"),(0,i.kt)("span",{class:"tag-is-success"},"Find Root of N-Ary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Number of Good Leaf Nodes Pairs"),(0,i.kt)("span",{class:"tag-is-success"},"Move Sub-Tree of N-Ary Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Detect Cycles in 2D Grid"),(0,i.kt)("span",{class:"tag-is-success"},"Diameter of N-Ary Tree"),(0,i.kt)("span",{class:"tag-is-info"},"Minimum Number of Days to Disconnect Island"),(0,i.kt)("span",{class:"tag-is-success"},"Throne Inheritance"),(0,i.kt)("span",{class:"tag-is-primary"},"Check If Two Expression Trees are Equivalent"),(0,i.kt)("span",{class:"tag-is-success"},"Path With Minimum Effort"),(0,i.kt)("span",{class:"tag-is-info"},"Lowest Common Ancestor of a Binary Tree II"),(0,i.kt)("span",{class:"tag-is-success"},"Correct a Binary Tree"),(0,i.kt)("span",{class:"tag-is-primary"},"Change the Root of a Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Lowest Common Ancestor of a Binary Tree IV"),(0,i.kt)("span",{class:"tag-is-info"},"Minimize Hamming Distance After Swap Operations"),(0,i.kt)("span",{class:"tag-is-success"},"Tree of Coprimes"),(0,i.kt)("span",{class:"tag-is-primary"},"Find Distance in a Binary Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Shortest Path in a Hidden Grid"),(0,i.kt)("span",{class:"tag-is-info"},"Minimum Path Cost in a Hidden Grid"),(0,i.kt)("span",{class:"tag-is-success"},"Longest Word With All Prefixes"),(0,i.kt)("span",{class:"tag-is-primary"},"Count Sub Islands"),(0,i.kt)("span",{class:"tag-is-success"},"Merge BSTs to Create Single BST"),(0,i.kt)("span",{class:"tag-is-info"},"Last Day Where You Can Still Cross"),(0,i.kt)("span",{class:"tag-is-success"},"Find All Groups of Farmland"),(0,i.kt)("span",{class:"tag-is-primary"},"Operations on Tree"),(0,i.kt)("span",{class:"tag-is-success"},"Find if Path Exists in Graph"),(0,i.kt)("span",{class:"tag-is-info"},"Count Nodes Equal to Sum of Descendants"),(0,i.kt)("span",{class:"tag-is-success"},"Smallest Missing Genetic Value in Each Subtree"),(0,i.kt)("span",{class:"tag-is-primary"},"Count Nodes With the Highest Score"),(0,i.kt)("span",{class:"tag-is-success"},"Valid Arrangement of Pairs"),(0,i.kt)("span",{class:"tag-is-info"},"Detonate the Maximum Bombs"),(0,i.kt)("span",{class:"tag-is-success"},"Find All People With Secret"),(0,i.kt)("span",{class:"tag-is-primary"},"Step-By-Step Directions From a Binary Tree Node to Another"),(0,i.kt)("span",{class:"tag-is-success"},"Maximum Employees to Be Invited to a Meeting"),(0,i.kt)("span",{class:"tag-is-info"},"Create Binary Tree From Descriptions"),(0,i.kt)("span",{class:"tag-is-success"},"Count Nodes Equal to Average of Subtree"),(0,i.kt)("span",{class:"tag-is-primary"},"Longest Path With Different Adjacent Characters"),(0,i.kt)("span",{class:"tag-is-info"},"Closest Node to Path in Tree"))}m.isMDXComponent=!0}}]);