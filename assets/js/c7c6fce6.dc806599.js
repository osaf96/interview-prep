"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[5453],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return h}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(r),h=a,p=m["".concat(l,".").concat(h)]||m[h]||d[h]||i;return r?t.createElement(p,o(o({ref:n},c),{},{components:r})):t.createElement(p,o({ref:n},c))}));function h(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8729:function(e,n,r){r.r(n),r.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var t=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={title:"DFS (Depth First Search)",description:"This will cover the most of the topics that will be part of the Depth First Search.",last_modified:new Date("2022-06-08T15:36:32.363Z"),sidebar_label:"Depth First Search"},l=void 0,u={unversionedId:"preparation/dfs",id:"preparation/dfs",title:"DFS (Depth First Search)",description:"This will cover the most of the topics that will be part of the Depth First Search.",source:"@site/docs/preparation/dfs.md",sourceDirName:"preparation",slug:"/preparation/dfs",permalink:"/interview-prep/preparation/dfs",draft:!1,tags:[],version:"current",frontMatter:{title:"DFS (Depth First Search)",description:"This will cover the most of the topics that will be part of the Depth First Search.",last_modified:"2022-06-08T15:36:32.363Z",sidebar_label:"Depth First Search"},sidebar:"docs",previous:{title:"Deque",permalink:"/interview-prep/preparation/dequeue"},next:{title:"Graph",permalink:"/interview-prep/preparation/graph"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Implementation of DFS",id:"implementation-of-dfs",level:2},{value:"Application of DFS",id:"application-of-dfs",level:2},{value:"Question on LeetCode with Tag - DFS",id:"question-on-leetcode-with-tag---dfs",level:3}],m={toc:d};function h(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This will cover the most of the topics that will be part of the Depth First Search."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"\u27a1\ufe0f Depth\u2013first search (DFS) is an algorithm for traversing or searching tree or graph data structures.\n\u27a1\ufe0f One starts at the root (selecting some arbitrary node as the root for a graph) and explore as far as possible along each branch before backtracking."),(0,i.kt)("h2",{id:"implementation-of-dfs"},"Implementation of DFS"),(0,i.kt)("p",null,"\u27a1\ufe0f Both the below implementations are same. \u27a1\ufe0f The only difference is, the first one uses Stack which you can visualize better and for the second case, how the internal stack is used. \u27a1\ufe0f Both are the post order traversal of a Binary Tree."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class Solution{\n    public void dfs(Node root){\n        Stack<Node> stack = new Stack<>();\n        Node current = root;\n        while(current != null || !stack.isEmpty()){\n            if(current != null){\n                stack.push(current);\n                current = current.left;\n            }else{\n                current = stack.pop();\n                System.out.println(current.data);\n                current = current.right;\n            }\n        }\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class Solution{\n    public void dfs(Node root){\n        if(root == null) return;\n        System.out.println(root.data);\n        dfs(root.left);\n        dfs(root.right);\n    }\n}\n")),(0,i.kt)("h2",{id:"application-of-dfs"},"Application of DFS"),(0,i.kt)("h3",{id:"question-on-leetcode-with-tag---dfs"},"Question on LeetCode with Tag - DFS"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Question")))),(0,i.kt)("p",null,"Binary Tree Inorder Traversal\nValidate Binary Search Tree\nRecover Binary Search Tree\nSame Tree\nSymmetric Tree\nMaximum Depth of Binary Tree\nBalanced Binary Tree\nMinimum Depth of Binary Tree\nPath Sum\nPath Sum II\nFlatten Binary Tree to Linked List\nPopulating Next Right Pointers in Each Node\nPopulating Next Right Pointers in Each Node II\nBinary Tree Maximum Path Sum\nSum Root to Leaf Numbers\nSurrounded Regions\nClone Graph\nBinary Tree Preorder Traversal\nBinary Tree Postorder Traversal\nBinary Tree Upside Down\nBinary Tree Right Side View\nNumber of Islands\nCourse Schedule\nCourse Schedule II\nDesign Add and Search Words Data Structure\nCount Complete Tree Nodes\nInvert Binary Tree\nKth Smallest Element in a BST\nLowest Common Ancestor of a Binary Search Tree\nLowest Common Ancestor of a Binary Tree\nCount Univalue Subtrees\nBinary Tree Paths\nGraph Valid Tree\nAlien Dictionary\nClosest Binary Search Tree Value\nClosest Binary Search Tree Value II\nInorder Successor in BST\nSerialize and Deserialize Binary Tree\nBinary Tree Longest Consecutive Sequence\nSmallest Rectangle Enclosing Black Pixels\nMinimum Height Trees\nBinary Tree Vertical Order Traversal\nNumber of Connected Components in an Undirected Graph\nLongest Increasing Path in a Matrix\nReconstruct Itinerary\nLargest BST Subtree\nHouse Robber III\nNested List Weight Sum\nFlatten Nested List Iterator\nNested List Weight Sum II\nWater and Jug Problem\nFind Leaves of Binary Tree\nMini Parser\nLexicographical Numbers\nLongest Absolute File Path\nEvaluate Division\nSum of Left Leaves\nPacific Atlantic Water Flow\nBattleships in a Board\nPath Sum III\nSerialize and Deserialize BST\nIsland Perimeter\nConcatenated Words\nThe Maze\nThe Maze III\nFind Mode in Binary Search Tree\nThe Maze II\nMost Frequent Subtree Sum\nAll Paths from Source Lead to Destination\nFind Bottom Left Tree Value\nFreedom Trail\nFind Largest Value in Each Tree Row\nMinesweeper\nMinimum Absolute Difference in BST\nConstruct Binary Tree from String\nConvert BST to Greater Tree\nDiameter of Binary Tree\nBoundary of Binary Tree\nNumber of Provinces\nBinary Tree Longest Consecutive Sequence II\nBinary Tree Tilt\nArray Nesting\nSubtree of Another Tree\nKill Process\nConstruct String from Binary Tree\nMerge Two Binary Trees\nAdd One Row to Tree\nAverage of Levels in Binary Tree\nFind Duplicate Subtrees\nTwo Sum IV - Input is a BST\nPrint Binary Tree\nMaximum Width of Binary Tree\nEqual Tree Partition\nPath Sum IV\nTrim a Binary Search Tree\nSecond Minimum Node In a Binary Tree\nBulb Switcher II\nRedundant Connection\nRedundant Connection II\nLongest Univalue Path\nEmployee Importance\nNumber of Distinct Islands\nMax Area of Island\nNumber of Distinct Islands II\nAccounts Merge\nFlood Fill\nSentence Similarity II\nClosest Leaf in a Binary Tree\nNetwork Delay Time\nContain Virus\nCracking the Safe\nPyramid Transition Matrix\nConvert Binary Search Tree to Sorted Doubly Linked List\nSerialize and Deserialize N-ary Tree\nFlatten a Multilevel Doubly Linked List\nCouples Holding Hands\nEncode N-ary Tree to Binary Tree\nMaximum Depth of N-ary Tree\nN-ary Tree Preorder Traversal\nN-ary Tree Postorder Traversal\nSwim in Rising Water\nMinimum Distance Between BST Nodes\nIs Graph Bipartite?\nCheapest Flights Within K Stops\nAll Paths From Source to Target\nFind Eventual Safe States\nBinary Tree Pruning\nMaking A Large Island\nSum of Distances in Tree\nSimilar String Groups\nKeys and Rooms\nLoud and Rich\nAll Nodes Distance K in Binary Tree\nSmallest Subtree with all the Deepest Nodes\nLeaf-Similar Trees\nPossible Bipartition\nIncreasing Order Search Tree\nMinimize Malware Spread\nMinimize Malware Spread II\nShortest Bridge\nRange Sum of BST\nMost Stones Removed with Same Row or Column\nFlip Equivalent Binary Trees\nRegions Cut By Slashes\nUnivalued Binary Tree\nBinary Tree Cameras\nFlip Binary Tree To Match Preorder Traversal\nDistribute Coins in Binary Tree\nVertical Order Traversal of a Binary Tree\nSmallest String Starting From Leaf\nCousins in Binary Tree\nNumber of Enclaves\nSum of Root To Leaf Binary Numbers\nMaximum Average Subtree\nMaximum Difference Between Node and Ancestor\nRecover a Tree From Preorder Traversal\nPath With Maximum Minimum Value\nColoring A Border\nEscape a Large Maze\nBinary Search Tree to Greater Sum Tree\nMaximum Level Sum of a Binary Tree\nFlower Planting With No Adjacent\nTwo Sum BSTs\nInsufficient Nodes in Root to Leaf Paths\nTree Diameter\nSmallest Common Region\nDelete Tree Nodes\nDelete Nodes And Return Forest\nLowest Common Ancestor of Deepest Leaves\nSum of Nodes with Even-Valued Grandparent\nBinary Tree Coloring Game\nDeepest Leaves Sum\nWeb Crawler\nValidate Binary Tree Nodes\nBalance a Binary Search Tree\nKth Ancestor of a Tree Node\nCritical Connections in a Network\nSmallest String With Swaps\nSort Items by Groups Respecting Dependencies\nWhere Will the Ball Fall\nDistance to a Cycle in Undirected Graph\nWeb Crawler Multithreaded\nNumber of Closed Islands\nFind Elements in a Contaminated Binary Tree\nCount Servers that Communicate\nAll Elements in Two Binary Search Trees\nJump Game III\nAll Ancestors of a Node in a Directed Acyclic Graph\nCheck If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree\nNumber of Operations to Make Network Connected\nDelete Leaves With a Given Value\nMaximum Product of Splitted Binary Tree\nLongest ZigZag Path in a Binary Tree\nMaximum Sum BST in Binary Tree\nLinked List in Binary Tree\nTime Needed to Inform All Employees\nFrog Position After T Seconds\nFind a Corresponding Node of a Binary Tree in a Clone of That Tree\nCheck if There is a Valid Path in a Grid\nCount Good Nodes in Binary Tree\nMinimum Time to Collect All Apples in a Tree\nCourse Schedule IV\nPseudo-Palindromic Paths in a Binary Tree\nReorder Routes to Make All Paths Lead to the City Zero\nFind All The Lonely Nodes\nClone Binary Tree With Random Pointer\nClone N-ary Tree\nNumber of Nodes in the Sub-Tree With the Same Label\nFind Root of N-Ary Tree\nNumber of Good Leaf Nodes Pairs\nMove Sub-Tree of N-Ary Tree\nDetect Cycles in 2D Grid\nDiameter of N-Ary Tree\nMinimum Number of Days to Disconnect Island\nThrone Inheritance\nCheck If Two Expression Trees are Equivalent\nPath With Minimum Effort\nLowest Common Ancestor of a Binary Tree II\nCorrect a Binary Tree\nChange the Root of a Binary Tree\nLowest Common Ancestor of a Binary Tree IV\nMinimize Hamming Distance After Swap Operations\nTree of Coprimes\nFind Distance in a Binary Tree\nShortest Path in a Hidden Grid\nMinimum Path Cost in a Hidden Grid\nLongest Word With All Prefixes\nCount Sub Islands\nMerge BSTs to Create Single BST\nLast Day Where You Can Still Cross\nFind All Groups of Farmland\nOperations on Tree\nFind if Path Exists in Graph\nCount Nodes Equal to Sum of Descendants\nSmallest Missing Genetic Value in Each Subtree\nCount Nodes With the Highest Score\nValid Arrangement of Pairs\nDetonate the Maximum Bombs\nFind All People With Secret\nStep-By-Step Directions From a Binary Tree Node to Another\nMaximum Employees to Be Invited to a Meeting\nCreate Binary Tree From Descriptions\nCount Nodes Equal to Average of Subtree\nLongest Path With Different Adjacent Characters\nClosest Node to Path in Tree"))}h.isMDXComponent=!0}}]);