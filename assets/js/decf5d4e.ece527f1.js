"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[1238],{3905:function(n,t,e){e.d(t,{Zo:function(){return p},kt:function(){return d}});var r=e(7294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function l(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var s=r.createContext({}),u=function(n){var t=r.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},p=function(n){var t=u(n.components);return r.createElement(s.Provider,{value:t},n.children)},m={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,a=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),c=u(e),d=i,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return e?r.createElement(f,o(o({ref:t},p),{},{components:e})):r.createElement(f,o({ref:t},p))}));function d(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var a=e.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=n,l.mdxType="string"==typeof n?n:i,o[1]=l;for(var u=2;u<a;u++)o[u]=e[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}c.displayName="MDXCreateElement"},2063:function(n,t,e){e.r(t),e.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var r=e(7462),i=e(3366),a=(e(7294),e(3905)),o=["components"],l={title:"Common Problems",description:"This will cover the most of the topics that will be part of the Common Problems.",last_modified:new Date("2022-06-08T15:36:32.363Z"),sidebar_label:"Common Problems"},s=void 0,u={unversionedId:"preparation/common-problems",id:"preparation/common-problems",title:"Common Problems",description:"This will cover the most of the topics that will be part of the Common Problems.",source:"@site/docs/preparation/common-problems.md",sourceDirName:"preparation",slug:"/preparation/common-problems",permalink:"/interview-prep/preparation/common-problems",draft:!1,tags:[],version:"current",frontMatter:{title:"Common Problems",description:"This will cover the most of the topics that will be part of the Common Problems.",last_modified:"2022-06-08T15:36:32.363Z",sidebar_label:"Common Problems"},sidebar:"docs",previous:{title:"Bit Manipulation",permalink:"/interview-prep/preparation/bit-manipulation"},next:{title:"Comparators",permalink:"/interview-prep/preparation/comparators"}},p={},m=[{value:"Priniting the combination of an array of particular size.",id:"priniting-the-combination-of-an-array-of-particular-size",level:2},{value:"Printing all the possible paths of a binary tree.",id:"printing-all-the-possible-paths-of-a-binary-tree",level:2},{value:"Permutation of an array.",id:"permutation-of-an-array",level:2},{value:"To check if Double is an Integer.",id:"to-check-if-double-is-an-integer",level:2},{value:"Roman to Integer.",id:"roman-to-integer",level:2},{value:"Rotate a Matrix.",id:"rotate-a-matrix",level:2},{value:"Spiral Matrix.",id:"spiral-matrix",level:2},{value:"House Robber.",id:"house-robber",level:2},{value:"Number of Islands.",id:"number-of-islands",level:2},{value:"Count Primes",id:"count-primes",level:2},{value:"Maximal Square.",id:"maximal-square",level:2}],c={toc:m};function d(n){var t=n.components,e=(0,i.Z)(n,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This will cover the most of the topics that will be part of the Common Problems."),(0,a.kt)("h2",{id:"priniting-the-combination-of-an-array-of-particular-size"},"Priniting the combination of an array of particular size."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public static void findCombinations(int[] A, int i, int k, List<Integer> out)\n    {\n        if (k == 0) {\n            //Operation with List<Integer> out\n            return;\n        }\n    \n        // start from the next index till the last index\n        for (int j = i; j < A.length; j++)\n        {\n            out.add(A[j]);\n            findCombinations(A, j + 1, k - 1, out);\n            out.remove(out.size() - 1);        // backtrack\n        }\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        List<List<Integer>> output = new ArrayList();\n        output.add(new ArrayList<Integer>());\n\n        for (int num : nums) {\n            List<List<Integer>> newSubsets = new ArrayList();\n            for (List<Integer> curr : output) {\n            newSubsets.add(new ArrayList<Integer>(curr){{add(num);}});\n            }\n            for (List<Integer> curr : newSubsets) {\n            output.add(curr);\n            }\n        }\n        return output;\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n        public static void main(String[] args){\n                int[] A = { 1, 2, 3 };\n        int k = 2;\n        System.out.println(findCombinations(A, 0, k, new ArrayList<>()));\n\n                // If you want to print out all the combination then you can put a for loop \n                // on the length of the A starting from 1.\n        }\n}\n\n// This is a call to the left method for printing out the combination of length 2 from the array.\n")),(0,a.kt)("h2",{id:"printing-all-the-possible-paths-of-a-binary-tree"},"Printing all the possible paths of a binary tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public void printAllPathsBinaryTree(TreeNode root) {\n            ArrayList<Integer> path = new ArrayList<Integer>();\n            printPathsBinaryTree(root, path);\n        }\n        \n        public void printPathsBinaryTree(TreeNode root, ArrayList<Integer> path) {\n            if (root == null) {\n                return;\n            }\n            path.add(root.data);\n            if (root.left == null && root.right == null) {\n                System.out.println(path);\n            }\n            printPathsBinaryTree(root.left, path);\n            printPathsBinaryTree(root.right, path);\n            path.remove(path.size() - 1);\n        }\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"APPLICATIONS")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Can be used to calculate the longest path from any node to targeted node.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Can be used to find the path with all the equal values in them.")))),(0,a.kt)("h2",{id:"permutation-of-an-array"},"Permutation of an array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    void permutate(int[] array, int start) {\n            if (start == array.length) {\n                //computations.\n                return;\n            }\n            for (int i = start; i < array.length; ++i) {\n                this.swap(array, i, start);\n                this.permutate(array, start + 1);\n                this.swap(array, i, start);\n            }\n        }\n        void swap(int[] array, int i, int j) {\n            if (i != j) {\n                int temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n        }\n}\n")),(0,a.kt)("h2",{id:"to-check-if-double-is-an-integer"},"To check if Double is an Integer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```java\nclass Solution {\n    public void static main(String[] args){\n                double temp = Math.log(n)/Math.log(2);\n                if(temp%1==0) // then its a double.\n        }\n}\n```\n\n> **APPLICATIONS**\n> \n> - Checking if double is an integer.\n> - This also contains snippet to check whether a number is in power of 2.\n")),(0,a.kt)("h2",{id:"roman-to-integer"},"Roman to Integer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'```java\nclass Solution {\n    public int romanToInt(String S) {\n        int ans = 0, num = 0;\n        for (int i = S.length()-1; i >= 0; i--) {\n            switch(S.charAt(i)) {\n                case \'I\': num = 1; break;\n                case \'V\': num = 5; break;\n                case \'X\': num = 10; break;\n                case \'L\': num = 50; break;\n                case \'C\': num = 100; break;\n                case \'D\': num = 500; break;\n                case \'M\': num = 1000; break;\n            }\n            if (4 * num < ans) ans -= num;\n            else ans += num;\n        }\n        return ans;\n    }\n}\n```\n```python\nclass Solution:\n    def romanToInt(self, s: str) -> int:\n        translations = {\n            "I": 1,\n            "V": 5,\n            "X": 10,\n            "L": 50,\n            "C": 100,\n            "D": 500,\n            "M": 1000\n        }\n        number = 0\n        s = s.replace("IV", "IIII").replace("IX", "VIIII")\n        s = s.replace("XL", "XXXX").replace("XC", "LXXXX")\n        s = s.replace("CD", "CCCC").replace("CM", "DCCCC")\n        for char in s:\n            number += translations[char]\n        return number\n```\n')),(0,a.kt)("h2",{id:"rotate-a-matrix"},"Rotate a Matrix."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```java\nclass Solution {\n\n  public void rotate(int[][] matrix) {\n    transpose(matrix);\n    reflect(matrix);\n  }\n\n  public void transpose(int[][] matrix) {\n    int n = matrix.length;\n    for (int i = 0; i < n; i++) {\n      for (int j = i + 1; j < n; j++) {\n        int tmp = matrix[j][i];\n        matrix[j][i] = matrix[i][j];\n        matrix[i][j] = tmp;\n      }\n    }\n  }\n\n  public void reflect(int[][] matrix) {\n    int n = matrix.length;\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n / 2; j++) {\n        int tmp = matrix[i][j];\n        matrix[i][j] = matrix[i][n - j - 1];\n        matrix[i][n - j - 1] = tmp;\n      }\n    }\n  }\n}\n```\n")),(0,a.kt)("h2",{id:"spiral-matrix"},"Spiral Matrix."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```java\nclass Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        List<Integer> nums = new ArrayList();\n        if(matrix == null||matrix.length == 0){\n            return nums;\n        }\n        int size = matrix[0].length * matrix.length;\n        \n        int top = 0;\n        int bottom = matrix.length-1;\n        int left = 0;\n        int right = matrix[0].length-1;\n        \n        while(nums.size()<size){\n            for(int i=left; i<=right && nums.size()<size;i++){\n                nums.add(matrix[top][i]);\n            }\n            top++;\n            for(int i=top; i<=bottom && nums.size()<size;i++){\n                nums.add(matrix[i][right]);\n            }\n            right--;\n            for(int i=right;i>=left && nums.size()<size;i--){\n                nums.add(matrix[bottom][i]);\n            }\n            bottom--;\n            for(int i=bottom;i>=top && nums.size()<size;i--){\n                nums.add(matrix[i][left]);\n            }\n            left++;\n        }\n        return nums;\n        \n    }\n}\n```\n")),(0,a.kt)("h2",{id:"house-robber"},"House Robber."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```java\nclass Solution {\n    public int rob(int[] nums) {\n        if(nums.length == 1) return nums[0];\n        int[] dp = new int[nums.length];\n        dp[0] = nums[0];\n        dp[1] = nums[1];\n        dp[1] = Math.max(nums[0],nums[1]);\n        for(int i = 2;i<nums.length;i++){\n            dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]);\n        }\n        return dp[dp.length-1];\n    }\n}\n```\n")),(0,a.kt)("h2",{id:"number-of-islands"},"Number of Islands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```java\nclass Solution {\n    public int numIslands(char[][] grid) {\n        int result = 0;\n        if(grid == null || grid.length == 0) return 0;\n        \n        for(int i=0;i<grid.length;i++){\n            for(int j=0;j<grid[i].length;j++){\n                if(grid[i][j] == '1'){\n                    result += dfs(grid, i, j);\n                }\n            }\n        }\n        \n        return result;\n    }\n    public int dfs(char[][] grid, int i, int j){\n        if(i<0 || i>=grid.length || j<0 || j>=grid[i].length || grid[i][j] == '0'){\n            return 0;\n        }\n        grid[i][j] = '0';\n        dfs(grid,i+1,j);\n        dfs(grid,i-1,j);\n        dfs(grid,i,j+1);\n        dfs(grid,i,j-1);\n        return 1;\n    }\n}\n```\n")),(0,a.kt)("h2",{id:"count-primes"},"Count Primes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```java\npublic class Solution {\n    public int countPrimes(int n) {\n        boolean[] notPrime = new boolean[n];\n        int count = 0;\n        for (int i = 2; i < n; i++) {\n            if (notPrime[i] == false) {\n                count++;\n                for (int j = 2; i*j < n; j++) {\n                    notPrime[i*j] = true;\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n```\n")),(0,a.kt)("h2",{id:"maximal-square"},"Maximal Square."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"dp(i,j)=  (min(dp(i\u22121,j),dp(i\u22121,j\u22121),dp(i,j\u22121)))   +1.")),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class Solution {\n    public int maximalSquare(char[][] matrix) {\n        int rows = matrix.length, cols = rows > 0 ? matrix[0].length : 0;\n        int[][] dp = new int[rows + 1][cols + 1];\n        int maxsqlen = 0;\n        for (int i = 1; i <= rows; i++) {\n            for (int j = 1; j <= cols; j++) {\n                if (matrix[i-1][j-1] == '1'){\n                    dp[i][j] = (Math.min(Math.min(dp[i][j - 1], dp[i - 1][j]),dp[i - 1][j - 1])) + 1;\n                    maxsqlen = Math.max(maxsqlen, dp[i][j]);\n                }\n            }\n        }\n        return maxsqlen * maxsqlen;\n    }\n}\n"))))}d.isMDXComponent=!0}}]);