"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[8187],{3905:function(e,i,a){a.d(i,{Zo:function(){return d},kt:function(){return h}});var t=a(7294);function r(e,i,a){return i in e?Object.defineProperty(e,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[i]=a,e}function n(e,i){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);i&&(t=t.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var i=1;i<arguments.length;i++){var a=null!=arguments[i]?arguments[i]:{};i%2?n(Object(a),!0).forEach((function(i){r(e,i,a[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(a,i))}))}return e}function s(e,i){if(null==e)return{};var a,t,r=function(e,i){if(null==e)return{};var a,t,r={},n=Object.keys(e);for(t=0;t<n.length;t++)a=n[t],i.indexOf(a)>=0||(r[a]=e[a]);return r}(e,i);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)a=n[t],i.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=t.createContext({}),u=function(e){var i=t.useContext(o),a=i;return e&&(a="function"==typeof e?e(i):l(l({},i),e)),a},d=function(e){var i=u(e.components);return t.createElement(o.Provider,{value:i},e.children)},m={inlineCode:"code",wrapper:function(e){var i=e.children;return t.createElement(t.Fragment,{},i)}},g=t.forwardRef((function(e,i){var a=e.components,r=e.mdxType,n=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),g=u(a),h=r,c=g["".concat(o,".").concat(h)]||g[h]||m[h]||n;return a?t.createElement(c,l(l({ref:i},d),{},{components:a})):t.createElement(c,l({ref:i},d))}));function h(e,i){var a=arguments,r=i&&i.mdxType;if("string"==typeof e||r){var n=a.length,l=new Array(n);l[0]=g;var s={};for(var o in i)hasOwnProperty.call(i,o)&&(s[o]=i[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var u=2;u<n;u++)l[u]=a[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},939:function(e,i,a){a.r(i),a.d(i,{assets:function(){return d},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var t=a(7462),r=a(3366),n=(a(7294),a(3905)),l=["components"],s={title:"Medium",description:"This will cover up all the medium questions that are available on Leetcode.",last_modified:new Date("2022-06-10T00:17:44.174Z"),sidebar_label:"Medium"},o=void 0,u={unversionedId:"leetcode-questions/medium",id:"leetcode-questions/medium",title:"Medium",description:"This will cover up all the medium questions that are available on Leetcode.",source:"@site/docs/leetcode-questions/medium.md",sourceDirName:"leetcode-questions",slug:"/leetcode-questions/medium",permalink:"/interview-prep/leetcode-questions/medium",draft:!1,tags:[],version:"current",frontMatter:{title:"Medium",description:"This will cover up all the medium questions that are available on Leetcode.",last_modified:"2022-06-10T00:17:44.174Z",sidebar_label:"Medium"},sidebar:"docs",previous:{title:"Type guards",permalink:"/interview-prep/javascript/typescript/type-guards"},next:{title:"Solving Leetcode Questions",permalink:"/interview-prep/leetcode-questions/solving-leetcode-problems"}},d={},m=[{value:"Add Two Numbers",id:"add-two-numbers",level:2},{value:"Inputs",id:"inputs",level:3},{value:"Process",id:"process",level:3},{value:"Edge Cases",id:"edge-cases",level:3},{value:"Longest Substring Without Repeating Characters",id:"longest-substring-without-repeating-characters",level:2},{value:"Longest Palindromic Substring",id:"longest-palindromic-substring",level:2},{value:"Zigzag Conversion",id:"zigzag-conversion",level:2},{value:"Reverse Integer",id:"reverse-integer",level:2},{value:"String to Integer (atoi)",id:"string-to-integer-atoi",level:2},{value:"Container With Most Water",id:"container-with-most-water",level:2},{value:"Integer to Roman",id:"integer-to-roman",level:2},{value:"3Sum",id:"3sum",level:2},{value:"3Sum Closest",id:"3sum-closest",level:2},{value:"Letter Combinations of a Phone Number",id:"letter-combinations-of-a-phone-number",level:2},{value:"4Sum",id:"4sum",level:2},{value:"Remove Nth Node From End of List",id:"remove-nth-node-from-end-of-list",level:2},{value:"Generate Parentheses",id:"generate-parentheses",level:2},{value:"Swap Nodes in Pairs",id:"swap-nodes-in-pairs",level:2},{value:"Divide Two Integers",id:"divide-two-integers",level:2},{value:"Next Permutation",id:"next-permutation",level:2},{value:"Search in Rotated Sorted Array",id:"search-in-rotated-sorted-array",level:2},{value:"Find First and Last Position of Element in Sorted Array",id:"find-first-and-last-position-of-element-in-sorted-array",level:2},{value:"Valid Sudoku",id:"valid-sudoku",level:2},{value:"Count and Say",id:"count-and-say",level:2},{value:"Combination Sum",id:"combination-sum",level:2},{value:"Combination Sum II",id:"combination-sum-ii",level:2},{value:"Multiply Strings",id:"multiply-strings",level:2},{value:"Jump Game II",id:"jump-game-ii",level:2},{value:"Permutations",id:"permutations",level:2},{value:"Permutations II",id:"permutations-ii",level:2},{value:"Rotate Image",id:"rotate-image",level:2},{value:"Group Anagrams",id:"group-anagrams",level:2},{value:"Pow(x, n)",id:"powx-n",level:2},{value:"Spiral Matrix",id:"spiral-matrix",level:2},{value:"Jump Game",id:"jump-game",level:2},{value:"Merge Intervals",id:"merge-intervals",level:2},{value:"Insert Interval",id:"insert-interval",level:2},{value:"Spiral Matrix II",id:"spiral-matrix-ii",level:2},{value:"Rotate List",id:"rotate-list",level:2},{value:"Unique Paths",id:"unique-paths",level:2},{value:"Unique Paths II",id:"unique-paths-ii",level:2},{value:"Minimum Path Sum",id:"minimum-path-sum",level:2},{value:"Simplify Path",id:"simplify-path",level:2},{value:"Set Matrix Zeroes",id:"set-matrix-zeroes",level:2},{value:"Search a 2D Matrix",id:"search-a-2d-matrix",level:2},{value:"Sort Colors",id:"sort-colors",level:2},{value:"Combinations",id:"combinations",level:2},{value:"Subsets",id:"subsets",level:2},{value:"Word Search",id:"word-search",level:2},{value:"Remove Duplicates from Sorted Array II",id:"remove-duplicates-from-sorted-array-ii",level:2},{value:"Search in Rotated Sorted Array II",id:"search-in-rotated-sorted-array-ii",level:2},{value:"Remove Duplicates from Sorted List II",id:"remove-duplicates-from-sorted-list-ii",level:2},{value:"Partition List",id:"partition-list",level:2},{value:"Gray Code",id:"gray-code",level:2},{value:"Subsets II",id:"subsets-ii",level:2},{value:"Decode Ways",id:"decode-ways",level:2},{value:"Reverse Linked List II",id:"reverse-linked-list-ii",level:2},{value:"Restore IP Addresses",id:"restore-ip-addresses",level:2},{value:"Unique Binary Search Trees II",id:"unique-binary-search-trees-ii",level:2},{value:"Unique Binary Search Trees",id:"unique-binary-search-trees",level:2},{value:"Interleaving String",id:"interleaving-string",level:2},{value:"Validate Binary Search Tree",id:"validate-binary-search-tree",level:2},{value:"Recover Binary Search Tree",id:"recover-binary-search-tree",level:2},{value:"Binary Tree Level Order Traversal",id:"binary-tree-level-order-traversal",level:2},{value:"Binary Tree Zigzag Level Order Traversal",id:"binary-tree-zigzag-level-order-traversal",level:2},{value:"Construct Binary Tree from Preorder and Inorder Traversal",id:"construct-binary-tree-from-preorder-and-inorder-traversal",level:2},{value:"Construct Binary Tree from Inorder and Postorder Traversal",id:"construct-binary-tree-from-inorder-and-postorder-traversal",level:2},{value:"Binary Tree Level Order Traversal II",id:"binary-tree-level-order-traversal-ii",level:2},{value:"Convert Sorted List to Binary Search Tree",id:"convert-sorted-list-to-binary-search-tree",level:2},{value:"Path Sum II",id:"path-sum-ii",level:2},{value:"Flatten Binary Tree to Linked List",id:"flatten-binary-tree-to-linked-list",level:2},{value:"Populating Next Right Pointers in Each Node",id:"populating-next-right-pointers-in-each-node",level:2},{value:"Populating Next Right Pointers in Each Node II",id:"populating-next-right-pointers-in-each-node-ii",level:2},{value:"Triangle",id:"triangle",level:2},{value:"Best Time to Buy and Sell Stock II",id:"best-time-to-buy-and-sell-stock-ii",level:2},{value:"Longest Consecutive Sequence",id:"longest-consecutive-sequence",level:2},{value:"Sum Root to Leaf Numbers",id:"sum-root-to-leaf-numbers",level:2},{value:"Surrounded Regions",id:"surrounded-regions",level:2},{value:"Palindrome Partitioning",id:"palindrome-partitioning",level:2},{value:"Clone Graph",id:"clone-graph",level:2},{value:"Gas Station",id:"gas-station",level:2},{value:"Single Number II",id:"single-number-ii",level:2},{value:"Copy List with Random Pointer",id:"copy-list-with-random-pointer",level:2},{value:"Word Break",id:"word-break",level:2},{value:"Linked List Cycle II",id:"linked-list-cycle-ii",level:2},{value:"Reorder List",id:"reorder-list",level:2},{value:"LRU Cache",id:"lru-cache",level:2},{value:"Insertion Sort List",id:"insertion-sort-list",level:2},{value:"Sort List",id:"sort-list",level:2},{value:"Evaluate Reverse Polish Notation",id:"evaluate-reverse-polish-notation",level:2},{value:"Reverse Words in a String",id:"reverse-words-in-a-string",level:2},{value:"Maximum Product Subarray",id:"maximum-product-subarray",level:2},{value:"Find Minimum in Rotated Sorted Array",id:"find-minimum-in-rotated-sorted-array",level:2},{value:"Binary Tree Upside Down",id:"binary-tree-upside-down",level:2},{value:"Longest Substring with At Most Two Distinct Characters",id:"longest-substring-with-at-most-two-distinct-characters",level:2},{value:"One Edit Distance",id:"one-edit-distance",level:2},{value:"Find Peak Element",id:"find-peak-element",level:2},{value:"Compare Version Numbers",id:"compare-version-numbers",level:2},{value:"Fraction to Recurring Decimal",id:"fraction-to-recurring-decimal",level:2},{value:"Two Sum II - Input Array Is Sorted",id:"two-sum-ii---input-array-is-sorted",level:2},{value:"Factorial Trailing Zeroes",id:"factorial-trailing-zeroes",level:2},{value:"Binary Search Tree Iterator",id:"binary-search-tree-iterator",level:2},{value:"Second Highest Salary",id:"second-highest-salary",level:2},{value:"Nth Highest Salary",id:"nth-highest-salary",level:2},{value:"Rank Scores",id:"rank-scores",level:2},{value:"Largest Number",id:"largest-number",level:2},{value:"Consecutive Numbers",id:"consecutive-numbers",level:2},{value:"Department Highest Salary",id:"department-highest-salary",level:2},{value:"Reverse Words in a String II",id:"reverse-words-in-a-string-ii",level:2},{value:"Repeated DNA Sequences",id:"repeated-dna-sequences",level:2},{value:"Rotate Array",id:"rotate-array",level:2},{value:"Word Frequency",id:"word-frequency",level:2},{value:"Transpose File",id:"transpose-file",level:2},{value:"House Robber",id:"house-robber",level:2},{value:"Binary Tree Right Side View",id:"binary-tree-right-side-view",level:2},{value:"Number of Islands",id:"number-of-islands",level:2},{value:"Bitwise AND of Numbers Range",id:"bitwise-and-of-numbers-range",level:2},{value:"Count Primes",id:"count-primes",level:2},{value:"Course Schedule",id:"course-schedule",level:2},{value:"Implement Trie (Prefix Tree)",id:"implement-trie-prefix-tree",level:2},{value:"Minimum Size Subarray Sum",id:"minimum-size-subarray-sum",level:2},{value:"Course Schedule II",id:"course-schedule-ii",level:2},{value:"Design Add and Search Words Data Structure",id:"design-add-and-search-words-data-structure",level:2},{value:"House Robber II",id:"house-robber-ii",level:2},{value:"Kth Largest Element in an Array",id:"kth-largest-element-in-an-array",level:2},{value:"Combination Sum III",id:"combination-sum-iii",level:2},{value:"Contains Duplicate III",id:"contains-duplicate-iii",level:2},{value:"Maximal Square",id:"maximal-square",level:2},{value:"Count Complete Tree Nodes",id:"count-complete-tree-nodes",level:2},{value:"Rectangle Area",id:"rectangle-area",level:2},{value:"Basic Calculator II",id:"basic-calculator-ii",level:2},{value:"Majority Element II",id:"majority-element-ii",level:2},{value:"Kth Smallest Element in a BST",id:"kth-smallest-element-in-a-bst",level:2},{value:"Lowest Common Ancestor of a Binary Tree",id:"lowest-common-ancestor-of-a-binary-tree",level:2},{value:"Product of Array Except Self",id:"product-of-array-except-self",level:2},{value:"Search a 2D Matrix II",id:"search-a-2d-matrix-ii",level:2},{value:"Different Ways to Add Parentheses",id:"different-ways-to-add-parentheses",level:2},{value:"Shortest Word Distance II",id:"shortest-word-distance-ii",level:2},{value:"Shortest Word Distance III",id:"shortest-word-distance-iii",level:2},{value:"Strobogrammatic Number II",id:"strobogrammatic-number-ii",level:2},{value:"Group Shifted Strings",id:"group-shifted-strings",level:2},{value:"Count Univalue Subtrees",id:"count-univalue-subtrees",level:2},{value:"Flatten 2D Vector",id:"flatten-2d-vector",level:2},{value:"Meeting Rooms II",id:"meeting-rooms-ii",level:2},{value:"Factor Combinations",id:"factor-combinations",level:2},{value:"Verify Preorder Sequence in Binary Search Tree",id:"verify-preorder-sequence-in-binary-search-tree",level:2},{value:"Paint House",id:"paint-house",level:2},{value:"3Sum Smaller",id:"3sum-smaller",level:2},{value:"Single Number III",id:"single-number-iii",level:2},{value:"Graph Valid Tree",id:"graph-valid-tree",level:2},{value:"Ugly Number II",id:"ugly-number-ii",level:2},{value:"Palindrome Permutation II",id:"palindrome-permutation-ii",level:2},{value:"Encode and Decode Strings",id:"encode-and-decode-strings",level:2},{value:"H-Index",id:"h-index",level:2},{value:"H-Index II",id:"h-index-ii",level:2},{value:"Paint Fence",id:"paint-fence",level:2},{value:"Find the Celebrity",id:"find-the-celebrity",level:2},{value:"Perfect Squares",id:"perfect-squares",level:2},{value:"Wiggle Sort",id:"wiggle-sort",level:2},{value:"Zigzag Iterator",id:"zigzag-iterator",level:2},{value:"Peeking Iterator",id:"peeking-iterator",level:2},{value:"Inorder Successor in BST",id:"inorder-successor-in-bst",level:2},{value:"Walls and Gates",id:"walls-and-gates",level:2},{value:"Find the Duplicate Number",id:"find-the-duplicate-number",level:2},{value:"Unique Word Abbreviation",id:"unique-word-abbreviation",level:2},{value:"Game of Life",id:"game-of-life",level:2},{value:"Word Pattern II",id:"word-pattern-ii",level:2},{value:"Flip Game II",id:"flip-game-ii",level:2},{value:"Binary Tree Longest Consecutive Sequence",id:"binary-tree-longest-consecutive-sequence",level:2},{value:"Bulls and Cows",id:"bulls-and-cows",level:2},{value:"Longest Increasing Subsequence",id:"longest-increasing-subsequence",level:2},{value:"Range Sum Query 2D - Immutable",id:"range-sum-query-2d---immutable",level:2},{value:"Additive Number",id:"additive-number",level:2},{value:"Range Sum Query - Mutable",id:"range-sum-query---mutable",level:2},{value:"Best Time to Buy and Sell Stock with Cooldown",id:"best-time-to-buy-and-sell-stock-with-cooldown",level:2},{value:"Minimum Height Trees",id:"minimum-height-trees",level:2},{value:"Sparse Matrix Multiplication",id:"sparse-matrix-multiplication",level:2},{value:"Super Ugly Number",id:"super-ugly-number",level:2},{value:"Binary Tree Vertical Order Traversal",id:"binary-tree-vertical-order-traversal",level:2},{value:"Remove Duplicate Letters",id:"remove-duplicate-letters",level:2},{value:"Maximum Product of Word Lengths",id:"maximum-product-of-word-lengths",level:2},{value:"Bulb Switcher",id:"bulb-switcher",level:2},{value:"Generalized Abbreviation",id:"generalized-abbreviation",level:2},{value:"Coin Change",id:"coin-change",level:2},{value:"Number of Connected Components in an Undirected Graph",id:"number-of-connected-components-in-an-undirected-graph",level:2},{value:"Wiggle Sort II",id:"wiggle-sort-ii",level:2},{value:"Maximum Size Subarray Sum Equals k",id:"maximum-size-subarray-sum-equals-k",level:2},{value:"Odd Even Linked List",id:"odd-even-linked-list",level:2},{value:"Verify Preorder Serialization of a Binary Tree",id:"verify-preorder-serialization-of-a-binary-tree",level:2},{value:"Largest BST Subtree",id:"largest-bst-subtree",level:2},{value:"Increasing Triplet Subsequence",id:"increasing-triplet-subsequence",level:2},{value:"House Robber III",id:"house-robber-iii",level:2},{value:"Nested List Weight Sum",id:"nested-list-weight-sum",level:2},{value:"Longest Substring with At Most K Distinct Characters",id:"longest-substring-with-at-most-k-distinct-characters",level:2},{value:"Flatten Nested List Iterator",id:"flatten-nested-list-iterator",level:2},{value:"Integer Break",id:"integer-break",level:2},{value:"Top K Frequent Elements",id:"top-k-frequent-elements",level:2},{value:"Design Tic-Tac-Toe",id:"design-tic-tac-toe",level:2},{value:"Android Unlock Patterns",id:"android-unlock-patterns",level:2},{value:"Design Snake Game",id:"design-snake-game",level:2},{value:"Design Twitter",id:"design-twitter",level:2},{value:"Line Reflection",id:"line-reflection",level:2},{value:"Count Numbers with Unique Digits",id:"count-numbers-with-unique-digits",level:2},{value:"Sort Transformed Array",id:"sort-transformed-array",level:2},{value:"Bomb Enemy",id:"bomb-enemy",level:2},{value:"Design Hit Counter",id:"design-hit-counter",level:2},{value:"Nested List Weight Sum II",id:"nested-list-weight-sum-ii",level:2},{value:"Water and Jug Problem",id:"water-and-jug-problem",level:2},{value:"Find Leaves of Binary Tree",id:"find-leaves-of-binary-tree",level:2},{value:"Largest Divisible Subset",id:"largest-divisible-subset",level:2},{value:"Plus One Linked List",id:"plus-one-linked-list",level:2},{value:"Range Addition",id:"range-addition",level:2},{value:"Sum of Two Integers",id:"sum-of-two-integers",level:2},{value:"Super Pow",id:"super-pow",level:2},{value:"Find K Pairs with Smallest Sums",id:"find-k-pairs-with-smallest-sums",level:2},{value:"Guess Number Higher or Lower II",id:"guess-number-higher-or-lower-ii",level:2},{value:"Wiggle Subsequence",id:"wiggle-subsequence",level:2},{value:"Combination Sum IV",id:"combination-sum-iv",level:2},{value:"Kth Smallest Element in a Sorted Matrix",id:"kth-smallest-element-in-a-sorted-matrix",level:2},{value:"Design Phone Directory",id:"design-phone-directory",level:2},{value:"Insert Delete GetRandom O(1)",id:"insert-delete-getrandom-o1",level:2},{value:"Linked List Random Node",id:"linked-list-random-node",level:2},{value:"Shuffle an Array",id:"shuffle-an-array",level:2},{value:"Mini Parser",id:"mini-parser",level:2},{value:"Lexicographical Numbers",id:"lexicographical-numbers",level:2},{value:"Longest Absolute File Path",id:"longest-absolute-file-path",level:2},{value:"Elimination Game",id:"elimination-game",level:2},{value:"UTF-8 Validation",id:"utf-8-validation",level:2},{value:"Decode String",id:"decode-string",level:2},{value:"Longest Substring with At Least K Repeating Characters",id:"longest-substring-with-at-least-k-repeating-characters",level:2},{value:"Rotate Function",id:"rotate-function",level:2},{value:"Integer Replacement",id:"integer-replacement",level:2},{value:"Random Pick Index",id:"random-pick-index",level:2},{value:"Evaluate Division",id:"evaluate-division",level:2},{value:"Nth Digit",id:"nth-digit",level:2},{value:"Remove K Digits",id:"remove-k-digits",level:2},{value:"Queue Reconstruction by Height",id:"queue-reconstruction-by-height",level:2},{value:"Arithmetic Slices",id:"arithmetic-slices",level:2},{value:"Partition Equal Subset Sum",id:"partition-equal-subset-sum",level:2},{value:"Pacific Atlantic Water Flow",id:"pacific-atlantic-water-flow",level:2},{value:"Sentence Screen Fitting",id:"sentence-screen-fitting",level:2},{value:"Battleships in a Board",id:"battleships-in-a-board",level:2},{value:"Maximum XOR of Two Numbers in an Array",id:"maximum-xor-of-two-numbers-in-an-array",level:2},{value:"Reconstruct Original Digits from English",id:"reconstruct-original-digits-from-english",level:2},{value:"Longest Repeating Character Replacement",id:"longest-repeating-character-replacement",level:2},{value:"Convert Binary Search Tree to Sorted Doubly Linked List",id:"convert-binary-search-tree-to-sorted-doubly-linked-list",level:2},{value:"Construct Quad Tree",id:"construct-quad-tree",level:2},{value:"N-ary Tree Level Order Traversal",id:"n-ary-tree-level-order-traversal",level:2},{value:"Flatten a Multilevel Doubly Linked List",id:"flatten-a-multilevel-doubly-linked-list",level:2},{value:"Minimum Genetic Mutation",id:"minimum-genetic-mutation",level:2},{value:"Non-overlapping Intervals",id:"non-overlapping-intervals",level:2},{value:"Find Right Interval",id:"find-right-interval",level:2},{value:"Path Sum III",id:"path-sum-iii",level:2},{value:"Find All Anagrams in a String",id:"find-all-anagrams-in-a-string",level:2},{value:"Ternary Expression Parser",id:"ternary-expression-parser",level:2},{value:"Find All Duplicates in an Array",id:"find-all-duplicates-in-an-array",level:2},{value:"String Compression",id:"string-compression",level:2},{value:"Sequence Reconstruction",id:"sequence-reconstruction",level:2},{value:"Add Two Numbers II",id:"add-two-numbers-ii",level:2},{value:"Number of Boomerangs",id:"number-of-boomerangs",level:2},{value:"Serialize and Deserialize BST",id:"serialize-and-deserialize-bst",level:2},{value:"Delete Node in a BST",id:"delete-node-in-a-bst",level:2},{value:"Sort Characters By Frequency",id:"sort-characters-by-frequency",level:2},{value:"Minimum Number of Arrows to Burst Balloons",id:"minimum-number-of-arrows-to-burst-balloons",level:2},{value:"Minimum Moves to Equal Array Elements",id:"minimum-moves-to-equal-array-elements",level:2},{value:"4Sum II",id:"4sum-ii",level:2},{value:"132 Pattern",id:"132-pattern",level:2},{value:"Circular Array Loop",id:"circular-array-loop",level:2},{value:"Minimum Moves to Equal Array Elements II",id:"minimum-moves-to-equal-array-elements-ii",level:2},{value:"Can I Win",id:"can-i-win",level:2},{value:"Unique Substrings in Wraparound String",id:"unique-substrings-in-wraparound-string",level:2},{value:"Validate IP Address",id:"validate-ip-address",level:2},{value:"Convex Polygon",id:"convex-polygon",level:2},{value:"Implement Rand10() Using Rand7()",id:"implement-rand10-using-rand7",level:2},{value:"Matchsticks to Square",id:"matchsticks-to-square",level:2},{value:"Ones and Zeroes",id:"ones-and-zeroes",level:2},{value:"Heaters",id:"heaters",level:2},{value:"Total Hamming Distance",id:"total-hamming-distance",level:2},{value:"Generate Random Point in a Circle",id:"generate-random-point-in-a-circle",level:2},{value:"Magical String",id:"magical-string",level:2},{value:"Find Permutation",id:"find-permutation",level:2},{value:"Predict the Winner",id:"predict-the-winner",level:2},{value:"Max Consecutive Ones II",id:"max-consecutive-ones-ii",level:2},{value:"The Maze",id:"the-maze",level:2},{value:"Increasing Subsequences",id:"increasing-subsequences",level:2},{value:"Target Sum",id:"target-sum",level:2},{value:"Random Point in Non-overlapping Rectangles",id:"random-point-in-non-overlapping-rectangles",level:2},{value:"Diagonal Traverse",id:"diagonal-traverse",level:2},{value:"Next Greater Element II",id:"next-greater-element-ii",level:2},{value:"The Maze II",id:"the-maze-ii",level:2},{value:"Most Frequent Subtree Sum",id:"most-frequent-subtree-sum",level:2},{value:"Inorder Successor in BST II",id:"inorder-successor-in-bst-ii",level:2},{value:"Find Bottom Left Tree Value",id:"find-bottom-left-tree-value",level:2},{value:"Find Largest Value in Each Tree Row",id:"find-largest-value-in-each-tree-row",level:2},{value:"Longest Palindromic Subsequence",id:"longest-palindromic-subsequence",level:2},{value:"Coin Change 2",id:"coin-change-2",level:2},{value:"Random Flip Matrix",id:"random-flip-matrix",level:2},{value:"Longest Uncommon Subsequence II",id:"longest-uncommon-subsequence-ii",level:2},{value:"Continuous Subarray Sum",id:"continuous-subarray-sum",level:2},{value:"Longest Word in Dictionary through Deleting",id:"longest-word-in-dictionary-through-deleting",level:2},{value:"Contiguous Array",id:"contiguous-array",level:2},{value:"Beautiful Arrangement",id:"beautiful-arrangement",level:2},{value:"Random Pick with Weight",id:"random-pick-with-weight",level:2},{value:"Minesweeper",id:"minesweeper",level:2},{value:"Lonely Pixel I",id:"lonely-pixel-i",level:2},{value:"K-diff Pairs in an Array",id:"k-diff-pairs-in-an-array",level:2},{value:"Lonely Pixel II",id:"lonely-pixel-ii",level:2},{value:"Game Play Analysis III",id:"game-play-analysis-iii",level:2},{value:"Encode and Decode TinyURL",id:"encode-and-decode-tinyurl",level:2},{value:"Construct Binary Tree from String",id:"construct-binary-tree-from-string",level:2},{value:"Complex Number Multiplication",id:"complex-number-multiplication",level:2},{value:"Convert BST to Greater Tree",id:"convert-bst-to-greater-tree",level:2},{value:"Minimum Time Difference",id:"minimum-time-difference",level:2},{value:"Single Element in a Sorted Array",id:"single-element-in-a-sorted-array",level:2},{value:"01 Matrix",id:"01-matrix",level:2},{value:"Output Contest Matches",id:"output-contest-matches",level:2},{value:"Boundary of Binary Tree",id:"boundary-of-binary-tree",level:2},{value:"Number of Provinces",id:"number-of-provinces",level:2},{value:"Binary Tree Longest Consecutive Sequence II",id:"binary-tree-longest-consecutive-sequence-ii",level:2},{value:"Game Play Analysis IV",id:"game-play-analysis-iv",level:2},{value:"Optimal Division",id:"optimal-division",level:2},{value:"Brick Wall",id:"brick-wall",level:2},{value:"Split Concatenated Strings",id:"split-concatenated-strings",level:2},{value:"Next Greater Element III",id:"next-greater-element-iii",level:2},{value:"Logical OR of Two Binary Grids Represented as Quad-Trees",id:"logical-or-of-two-binary-grids-represented-as-quad-trees",level:2},{value:"Subarray Sum Equals K",id:"subarray-sum-equals-k",level:2},{value:"Longest Line of Consecutive One in Matrix",id:"longest-line-of-consecutive-one-in-matrix",level:2},{value:"Array Nesting",id:"array-nesting",level:2},{value:"Permutation in String",id:"permutation-in-string",level:2},{value:"Managers with at Least 5 Direct Reports",id:"managers-with-at-least-5-direct-reports",level:2},{value:"Squirrel Simulation",id:"squirrel-simulation",level:2},{value:"Winning Candidate",id:"winning-candidate",level:2},{value:"Out of Boundary Paths",id:"out-of-boundary-paths",level:2},{value:"Get Highest Answer Rate Question",id:"get-highest-answer-rate-question",level:2},{value:"Count Student Number in Departments",id:"count-student-number-in-departments",level:2},{value:"Shortest Unsorted Continuous Subarray",id:"shortest-unsorted-continuous-subarray",level:2},{value:"Kill Process",id:"kill-process",level:2},{value:"Delete Operation for Two Strings",id:"delete-operation-for-two-strings",level:2},{value:"Investments in 2016",id:"investments-in-2016",level:2},{value:"Fraction Addition and Subtraction",id:"fraction-addition-and-subtraction",level:2},{value:"Valid Square",id:"valid-square",level:2},{value:"Friend Requests II: Who Has the Most Friends",id:"friend-requests-ii-who-has-the-most-friends",level:2},{value:"Tree Node",id:"tree-node",level:2},{value:"Find Duplicate File in System",id:"find-duplicate-file-in-system",level:2},{value:"Valid Triangle Number",id:"valid-triangle-number",level:2},{value:"Shortest Distance in a Plane",id:"shortest-distance-in-a-plane",level:2},{value:"Second Degree Follower",id:"second-degree-follower",level:2},{value:"Add Bold Tag in String",id:"add-bold-tag-in-string",level:2},{value:"Task Scheduler",id:"task-scheduler",level:2},{value:"Design Circular Queue",id:"design-circular-queue",level:2},{value:"Add One Row to Tree",id:"add-one-row-to-tree",level:2},{value:"Maximum Distance in Arrays",id:"maximum-distance-in-arrays",level:2},{value:"Minimum Factorization",id:"minimum-factorization",level:2},{value:"Exchange Seats",id:"exchange-seats",level:2},{value:"Sum of Square Numbers",id:"sum-of-square-numbers",level:2},{value:"Find the Derangement of An Array",id:"find-the-derangement-of-an-array",level:2},{value:"Design Log Storage System",id:"design-log-storage-system",level:2},{value:"Exclusive Time of Functions",id:"exclusive-time-of-functions",level:2},{value:"Shopping Offers",id:"shopping-offers",level:2},{value:"Solve the Equation",id:"solve-the-equation",level:2},{value:"Design Circular Deque",id:"design-circular-deque",level:2},{value:"Maximum Length of Pair Chain",id:"maximum-length-of-pair-chain",level:2},{value:"Palindromic Substrings",id:"palindromic-substrings",level:2},{value:"Replace Words",id:"replace-words",level:2},{value:"Dota2 Senate",id:"dota2-senate",level:2},{value:"2 Keys Keyboard",id:"2-keys-keyboard",level:2},{value:"4 Keys Keyboard",id:"4-keys-keyboard",level:2},{value:"Find Duplicate Subtrees",id:"find-duplicate-subtrees",level:2},{value:"Maximum Binary Tree",id:"maximum-binary-tree",level:2},{value:"Print Binary Tree",id:"print-binary-tree",level:2},{value:"Find K Closest Elements",id:"find-k-closest-elements",level:2},{value:"Split Array into Consecutive Subsequences",id:"split-array-into-consecutive-subsequences",level:2},{value:"Maximum Width of Binary Tree",id:"maximum-width-of-binary-tree",level:2},{value:"Equal Tree Partition",id:"equal-tree-partition",level:2},{value:"Non-decreasing Array",id:"non-decreasing-array",level:2},{value:"Path Sum IV",id:"path-sum-iv",level:2},{value:"Beautiful Arrangement II",id:"beautiful-arrangement-ii",level:2},{value:"Trim a Binary Search Tree",id:"trim-a-binary-search-tree",level:2},{value:"Maximum Swap",id:"maximum-swap",level:2},{value:"Bulb Switcher II",id:"bulb-switcher-ii",level:2},{value:"Number of Longest Increasing Subsequence",id:"number-of-longest-increasing-subsequence",level:2},{value:"Implement Magic Dictionary",id:"implement-magic-dictionary",level:2},{value:"Map Sum Pairs",id:"map-sum-pairs",level:2},{value:"Valid Parenthesis String",id:"valid-parenthesis-string",level:2},{value:"Next Closest Time",id:"next-closest-time",level:2},{value:"Redundant Connection",id:"redundant-connection",level:2},{value:"Repeated String Match",id:"repeated-string-match",level:2},{value:"Longest Univalue Path",id:"longest-univalue-path",level:2},{value:"Knight Probability in Chessboard",id:"knight-probability-in-chessboard",level:2},{value:"Employee Importance",id:"employee-importance",level:2},{value:"Top K Frequent Words",id:"top-k-frequent-words",level:2},{value:"Number of Distinct Islands",id:"number-of-distinct-islands",level:2},{value:"Max Area of Island",id:"max-area-of-island",level:2},{value:"Partition to K Equal Sum Subsets",id:"partition-to-k-equal-sum-subsets",level:2},{value:"Insert into a Binary Search Tree",id:"insert-into-a-binary-search-tree",level:2},{value:"Search in a Sorted Array of Unknown Size",id:"search-in-a-sorted-array-of-unknown-size",level:2},{value:"Design Linked List",id:"design-linked-list",level:2},{value:"Insert into a Sorted Circular Linked List",id:"insert-into-a-sorted-circular-linked-list",level:2},{value:"Minimum ASCII Delete Sum for Two Strings",id:"minimum-ascii-delete-sum-for-two-strings",level:2},{value:"Subarray Product Less Than K",id:"subarray-product-less-than-k",level:2},{value:"Best Time to Buy and Sell Stock with Transaction Fee",id:"best-time-to-buy-and-sell-stock-with-transaction-fee",level:2},{value:"Maximum Length of Repeated Subarray",id:"maximum-length-of-repeated-subarray",level:2},{value:"Longest Word in Dictionary",id:"longest-word-in-dictionary",level:2},{value:"Accounts Merge",id:"accounts-merge",level:2},{value:"Remove Comments",id:"remove-comments",level:2},{value:"Candy Crush",id:"candy-crush",level:2},{value:"Split Linked List in Parts",id:"split-linked-list-in-parts",level:2},{value:"My Calendar I",id:"my-calendar-i",level:2},{value:"My Calendar II",id:"my-calendar-ii",level:2},{value:"Asteroid Collision",id:"asteroid-collision",level:2},{value:"Sentence Similarity II",id:"sentence-similarity-ii",level:2},{value:"Monotone Increasing Digits",id:"monotone-increasing-digits",level:2},{value:"Daily Temperatures",id:"daily-temperatures",level:2},{value:"Delete and Earn",id:"delete-and-earn",level:2},{value:"Closest Leaf in a Binary Tree",id:"closest-leaf-in-a-binary-tree",level:2},{value:"Network Delay Time",id:"network-delay-time",level:2},{value:"Number Of Corner Rectangles",id:"number-of-corner-rectangles",level:2},{value:"IP to CIDR",id:"ip-to-cidr",level:2},{value:"Open the Lock",id:"open-the-lock",level:2},{value:"Reach a Number",id:"reach-a-number",level:2},{value:"Pour Water",id:"pour-water",level:2},{value:"Pyramid Transition Matrix",id:"pyramid-transition-matrix",level:2},{value:"Bold Words in String",id:"bold-words-in-string",level:2},{value:"Partition Labels",id:"partition-labels",level:2},{value:"Largest Plus Sign",id:"largest-plus-sign",level:2},{value:"Reorganize String",id:"reorganize-string",level:2},{value:"Max Chunks To Make Sorted",id:"max-chunks-to-make-sorted",level:2},{value:"Global and Local Inversions",id:"global-and-local-inversions",level:2},{value:"Split BST",id:"split-bst",level:2},{value:"Swap Adjacent in LR String",id:"swap-adjacent-in-lr-string",level:2},{value:"K-th Symbol in Grammar",id:"k-th-symbol-in-grammar",level:2},{value:"Rabbits in Forest",id:"rabbits-in-forest",level:2},{value:"Letter Case Permutation",id:"letter-case-permutation",level:2},{value:"Is Graph Bipartite?",id:"is-graph-bipartite",level:2},{value:"Cheapest Flights Within K Stops",id:"cheapest-flights-within-k-stops",level:2},{value:"Rotated Digits",id:"rotated-digits",level:2},{value:"Escape The Ghosts",id:"escape-the-ghosts",level:2},{value:"Domino and Tromino Tiling",id:"domino-and-tromino-tiling",level:2},{value:"Custom Sort String",id:"custom-sort-string",level:2},{value:"Number of Matching Subsequences",id:"number-of-matching-subsequences",level:2},{value:"Valid Tic-Tac-Toe State",id:"valid-tic-tac-toe-state",level:2},{value:"Number of Subarrays with Bounded Maximum",id:"number-of-subarrays-with-bounded-maximum",level:2},{value:"All Paths From Source to Target",id:"all-paths-from-source-to-target",level:2},{value:"Champagne Tower",id:"champagne-tower",level:2},{value:"Find Eventual Safe States",id:"find-eventual-safe-states",level:2},{value:"Max Increase to Keep City Skyline",id:"max-increase-to-keep-city-skyline",level:2},{value:"Soup Servings",id:"soup-servings",level:2},{value:"Expressive Words",id:"expressive-words",level:2},{value:"Subdomain Visit Count",id:"subdomain-visit-count",level:2},{value:"Largest Sum of Averages",id:"largest-sum-of-averages",level:2},{value:"Binary Tree Pruning",id:"binary-tree-pruning",level:2},{value:"Ambiguous Coordinates",id:"ambiguous-coordinates",level:2},{value:"Linked List Components",id:"linked-list-components",level:2},{value:"Short Encoding of Words",id:"short-encoding-of-words",level:2},{value:"Card Flipping Game",id:"card-flipping-game",level:2},{value:"Binary Trees With Factors",id:"binary-trees-with-factors",level:2},{value:"Friends Of Appropriate Ages",id:"friends-of-appropriate-ages",level:2},{value:"Most Profit Assigning Work",id:"most-profit-assigning-work",level:2},{value:"Masking Personal Information",id:"masking-personal-information",level:2},{value:"Find And Replace in String",id:"find-and-replace-in-string",level:2},{value:"Image Overlap",id:"image-overlap",level:2},{value:"New 21 Game",id:"new-21-game",level:2},{value:"Push Dominoes",id:"push-dominoes",level:2},{value:"Magic Squares In Grid",id:"magic-squares-in-grid",level:2},{value:"Keys and Rooms",id:"keys-and-rooms",level:2},{value:"Split Array into Fibonacci Sequence",id:"split-array-into-fibonacci-sequence",level:2},{value:"Longest Mountain in Array",id:"longest-mountain-in-array",level:2},{value:"Hand of Straights",id:"hand-of-straights",level:2},{value:"Shifting Letters",id:"shifting-letters",level:2},{value:"Maximize Distance to Closest Person",id:"maximize-distance-to-closest-person",level:2},{value:"Loud and Rich",id:"loud-and-rich",level:2},{value:"Car Fleet",id:"car-fleet",level:2},{value:"Exam Room",id:"exam-room",level:2},{value:"Score of Parentheses",id:"score-of-parentheses",level:2},{value:"Mirror Reflection",id:"mirror-reflection",level:2},{value:"Score After Flipping Matrix",id:"score-after-flipping-matrix",level:2},{value:"All Nodes Distance K in Binary Tree",id:"all-nodes-distance-k-in-binary-tree",level:2},{value:"Smallest Subtree with all the Deepest Nodes",id:"smallest-subtree-with-all-the-deepest-nodes",level:2},{value:"Prime Palindrome",id:"prime-palindrome",level:2},{value:"Reordered Power of 2",id:"reordered-power-of-2",level:2},{value:"Advantage Shuffle",id:"advantage-shuffle",level:2},{value:"Length of Longest Fibonacci Subsequence",id:"length-of-longest-fibonacci-subsequence",level:2},{value:"Walking Robot Simulation",id:"walking-robot-simulation",level:2},{value:"Koko Eating Bananas",id:"koko-eating-bananas",level:2},{value:"Stone Game",id:"stone-game",level:2},{value:"Decoded String at Index",id:"decoded-string-at-index",level:2},{value:"Boats to Save People",id:"boats-to-save-people",level:2},{value:"Spiral Matrix III",id:"spiral-matrix-iii",level:2},{value:"Possible Bipartition",id:"possible-bipartition",level:2},{value:"Construct Binary Tree from Preorder and Postorder Traversal",id:"construct-binary-tree-from-preorder-and-postorder-traversal",level:2},{value:"Find and Replace Pattern",id:"find-and-replace-pattern",level:2},{value:"Groups of Special-Equivalent Strings",id:"groups-of-special-equivalent-strings",level:2},{value:"All Possible Full Binary Trees",id:"all-possible-full-binary-trees",level:2},{value:"Bitwise ORs of Subarrays",id:"bitwise-ors-of-subarrays",level:2},{value:"RLE Iterator",id:"rle-iterator",level:2},{value:"Online Stock Span",id:"online-stock-span",level:2},{value:"Fruit Into Baskets",id:"fruit-into-baskets",level:2},{value:"Sum of Subarray Minimums",id:"sum-of-subarray-minimums",level:2},{value:"Snakes and Ladders",id:"snakes-and-ladders",level:2},{value:"Smallest Range II",id:"smallest-range-ii",level:2},{value:"Online Election",id:"online-election",level:2},{value:"Sort an Array",id:"sort-an-array",level:2},{value:"Partition Array into Disjoint Intervals",id:"partition-array-into-disjoint-intervals",level:2},{value:"Word Subsets",id:"word-subsets",level:2},{value:"Maximum Sum Circular Subarray",id:"maximum-sum-circular-subarray",level:2},{value:"Complete Binary Tree Inserter",id:"complete-binary-tree-inserter",level:2},{value:"Minimum Add to Make Parentheses Valid",id:"minimum-add-to-make-parentheses-valid",level:2},{value:"3Sum With Multiplicity",id:"3sum-with-multiplicity",level:2},{value:"Flip String to Monotone Increasing",id:"flip-string-to-monotone-increasing",level:2},{value:"Binary Subarrays With Sum",id:"binary-subarrays-with-sum",level:2},{value:"Minimum Falling Path Sum",id:"minimum-falling-path-sum",level:2},{value:"Beautiful Array",id:"beautiful-array",level:2},{value:"Shortest Bridge",id:"shortest-bridge",level:2},{value:"Knight Dialer",id:"knight-dialer",level:2},{value:"Minimum Area Rectangle",id:"minimum-area-rectangle",level:2},{value:"Minimum Increment to Make Array Unique",id:"minimum-increment-to-make-array-unique",level:2},{value:"Validate Stack Sequences",id:"validate-stack-sequences",level:2},{value:"Most Stones Removed with Same Row or Column",id:"most-stones-removed-with-same-row-or-column",level:2},{value:"Bag of Tokens",id:"bag-of-tokens",level:2},{value:"Largest Time for Given Digits",id:"largest-time-for-given-digits",level:2},{value:"Reveal Cards In Increasing Order",id:"reveal-cards-in-increasing-order",level:2},{value:"Flip Equivalent Binary Trees",id:"flip-equivalent-binary-trees",level:2},{value:"Array of Doubled Pairs",id:"array-of-doubled-pairs",level:2},{value:"Delete Columns to Make Sorted II",id:"delete-columns-to-make-sorted-ii",level:2},{value:"Prison Cells After N Days",id:"prison-cells-after-n-days",level:2},{value:"Check Completeness of a Binary Tree",id:"check-completeness-of-a-binary-tree",level:2},{value:"Regions Cut By Slashes",id:"regions-cut-by-slashes",level:2},{value:"Maximum Width Ramp",id:"maximum-width-ramp",level:2},{value:"Minimum Area Rectangle II",id:"minimum-area-rectangle-ii",level:2},{value:"Vowel Spellchecker",id:"vowel-spellchecker",level:2},{value:"Numbers With Same Consecutive Differences",id:"numbers-with-same-consecutive-differences",level:2},{value:"Pancake Sorting",id:"pancake-sorting",level:2},{value:"Powerful Integers",id:"powerful-integers",level:2},{value:"Flip Binary Tree To Match Preorder Traversal",id:"flip-binary-tree-to-match-preorder-traversal",level:2},{value:"K Closest Points to Origin",id:"k-closest-points-to-origin",level:2},{value:"Subarray Sums Divisible by K",id:"subarray-sums-divisible-by-k",level:2},{value:"Longest Turbulent Subarray",id:"longest-turbulent-subarray",level:2},{value:"Distribute Coins in Binary Tree",id:"distribute-coins-in-binary-tree",level:2},{value:"Time Based Key-Value Store",id:"time-based-key-value-store",level:2},{value:"Minimum Cost For Tickets",id:"minimum-cost-for-tickets",level:2},{value:"String Without AAA or BBB",id:"string-without-aaa-or-bbb",level:2},{value:"Sum of Even Numbers After Queries",id:"sum-of-even-numbers-after-queries",level:2},{value:"Interval List Intersections",id:"interval-list-intersections",level:2},{value:"Smallest String Starting From Leaf",id:"smallest-string-starting-from-leaf",level:2},{value:"Satisfiability of Equality Equations",id:"satisfiability-of-equality-equations",level:2},{value:"Broken Calculator",id:"broken-calculator",level:2},{value:"Rotting Oranges",id:"rotting-oranges",level:2},{value:"Maximum Binary Tree II",id:"maximum-binary-tree-ii",level:2},{value:"Check If Word Is Valid After Substitutions",id:"check-if-word-is-valid-after-substitutions",level:2},{value:"Max Consecutive Ones III",id:"max-consecutive-ones-iii",level:2},{value:"Clumsy Factorial",id:"clumsy-factorial",level:2},{value:"Minimum Domino Rotations For Equal Row",id:"minimum-domino-rotations-for-equal-row",level:2},{value:"Construct Binary Search Tree from Preorder Traversal",id:"construct-binary-search-tree-from-preorder-traversal",level:2},{value:"Pairs of Songs With Total Durations Divisible by 60",id:"pairs-of-songs-with-total-durations-divisible-by-60",level:2},{value:"Capacity To Ship Packages Within D Days",id:"capacity-to-ship-packages-within-d-days",level:2},{value:"Best Sightseeing Pair",id:"best-sightseeing-pair",level:2},{value:"Smallest Integer Divisible by K",id:"smallest-integer-divisible-by-k",level:2},{value:"Binary String With Substrings Representing 1 To N",id:"binary-string-with-substrings-representing-1-to-n",level:2},{value:"Convert to Base -2",id:"convert-to-base--2",level:2},{value:"Next Greater Node In Linked List",id:"next-greater-node-in-linked-list",level:2},{value:"Number of Enclaves",id:"number-of-enclaves",level:2},{value:"Camelcase Matching",id:"camelcase-matching",level:2},{value:"Video Stitching",id:"video-stitching",level:2},{value:"Maximum Difference Between Node and Ancestor",id:"maximum-difference-between-node-and-ancestor",level:2},{value:"Longest Arithmetic Subsequence",id:"longest-arithmetic-subsequence",level:2},{value:"Two City Scheduling",id:"two-city-scheduling",level:2},{value:"Maximum Sum of Two Non-Overlapping Subarrays",id:"maximum-sum-of-two-non-overlapping-subarrays",level:2},{value:"Moving Stones Until Consecutive",id:"moving-stones-until-consecutive",level:2},{value:"Coloring A Border",id:"coloring-a-border",level:2},{value:"Uncrossed Lines",id:"uncrossed-lines",level:2},{value:"Binary Search Tree to Greater Sum Tree",id:"binary-search-tree-to-greater-sum-tree",level:2},{value:"Minimum Score Triangulation of Polygon",id:"minimum-score-triangulation-of-polygon",level:2},{value:"Moving Stones Until Consecutive II",id:"moving-stones-until-consecutive-ii",level:2},{value:"Robot Bounded In Circle",id:"robot-bounded-in-circle",level:2},{value:"Flower Planting With No Adjacent",id:"flower-planting-with-no-adjacent",level:2},{value:"Partition Array for Maximum Sum",id:"partition-array-for-maximum-sum",level:2},{value:"Customers Who Bought All Products",id:"customers-who-bought-all-products",level:2},{value:"Longest String Chain",id:"longest-string-chain",level:2},{value:"Last Stone Weight II",id:"last-stone-weight-ii",level:2},{value:"Grumpy Bookstore Owner",id:"grumpy-bookstore-owner",level:2},{value:"Previous Permutation With One Swap",id:"previous-permutation-with-one-swap",level:2},{value:"Distant Barcodes",id:"distant-barcodes",level:2},{value:"Shortest Way to Form String",id:"shortest-way-to-form-string",level:2},{value:"Campus Bikes",id:"campus-bikes",level:2},{value:"Minimize Rounding Error to Meet Target",id:"minimize-rounding-error-to-meet-target",level:2},{value:"All Paths from Source Lead to Destination",id:"all-paths-from-source-lead-to-destination",level:2},{value:"Missing Element in Sorted Array",id:"missing-element-in-sorted-array",level:2},{value:"Lexicographically Smallest Equivalent String",id:"lexicographically-smallest-equivalent-string",level:2},{value:"Longest Repeating Substring",id:"longest-repeating-substring",level:2},{value:"Campus Bikes II",id:"campus-bikes-ii",level:2},{value:"Product Sales Analysis III",id:"product-sales-analysis-iii",level:2},{value:"Flip Columns For Maximum Number of Equal Rows",id:"flip-columns-for-maximum-number-of-equal-rows",level:2},{value:"Adding Two Negabinary Numbers",id:"adding-two-negabinary-numbers",level:2},{value:"Project Employees III",id:"project-employees-iii",level:2},{value:"Letter Tile Possibilities",id:"letter-tile-possibilities",level:2},{value:"Insufficient Nodes in Root to Leaf Paths",id:"insufficient-nodes-in-root-to-leaf-paths",level:2},{value:"Smallest Subsequence of Distinct Characters",id:"smallest-subsequence-of-distinct-characters",level:2},{value:"Brace Expansion",id:"brace-expansion",level:2},{value:"Largest Values From Labels",id:"largest-values-from-labels",level:2},{value:"Shortest Path in Binary Matrix",id:"shortest-path-in-binary-matrix",level:2},{value:"Statistics from a Large Sample",id:"statistics-from-a-large-sample",level:2},{value:"Car Pooling",id:"car-pooling",level:2},{value:"Unpopular Books",id:"unpopular-books",level:2},{value:"Find K-Length Substrings With No Repeated Characters",id:"find-k-length-substrings-with-no-repeated-characters",level:2},{value:"The Earliest Moment When Everyone Become Friends",id:"the-earliest-moment-when-everyone-become-friends",level:2},{value:"Path With Maximum Minimum Value",id:"path-with-maximum-minimum-value",level:2},{value:"Path In Zigzag Labelled Binary Tree",id:"path-in-zigzag-labelled-binary-tree",level:2},{value:"Filling Bookcase Shelves",id:"filling-bookcase-shelves",level:2},{value:"New Users Daily Count",id:"new-users-daily-count",level:2},{value:"Corporate Flight Bookings",id:"corporate-flight-bookings",level:2},{value:"Delete Nodes And Return Forest",id:"delete-nodes-and-return-forest",level:2},{value:"Maximum Nesting Depth of Two Valid Parentheses Strings",id:"maximum-nesting-depth-of-two-valid-parentheses-strings",level:2},{value:"Highest Grade For Each Student",id:"highest-grade-for-each-student",level:2},{value:"Print FooBar Alternately",id:"print-foobar-alternately",level:2},{value:"Print Zero Even Odd",id:"print-zero-even-odd",level:2},{value:"Building H2O",id:"building-h2o",level:2},{value:"Maximum Average Subtree",id:"maximum-average-subtree",level:2},{value:"Lowest Common Ancestor of Deepest Leaves",id:"lowest-common-ancestor-of-deepest-leaves",level:2},{value:"Longest Well-Performing Interval",id:"longest-well-performing-interval",level:2},{value:"Active Businesses",id:"active-businesses",level:2},{value:"Shortest Path with Alternating Colors",id:"shortest-path-with-alternating-colors",level:2},{value:"Minimum Cost Tree From Leaf Values",id:"minimum-cost-tree-from-leaf-values",level:2},{value:"Maximum of Absolute Value Expression",id:"maximum-of-absolute-value-expression",level:2},{value:"Reported Posts II",id:"reported-posts-ii",level:2},{value:"Connecting Cities With Minimum Cost",id:"connecting-cities-with-minimum-cost",level:2},{value:"Parallel Courses",id:"parallel-courses",level:2},{value:"Alphabet Board Path",id:"alphabet-board-path",level:2},{value:"Largest 1-Bordered Square",id:"largest-1-bordered-square",level:2},{value:"Stone Game II",id:"stone-game-ii",level:2},{value:"Longest Common Subsequence",id:"longest-common-subsequence",level:2},{value:"Decrease Elements To Make Array Zigzag",id:"decrease-elements-to-make-array-zigzag",level:2},{value:"Binary Tree Coloring Game",id:"binary-tree-coloring-game",level:2},{value:"Snapshot Array",id:"snapshot-array",level:2},{value:"Article Views II",id:"article-views-ii",level:2},{value:"Minimum Swaps to Group All 1&#39;s Together",id:"minimum-swaps-to-group-all-1s-together",level:2},{value:"Analyze User Website Visit Pattern",id:"analyze-user-website-visit-pattern",level:2},{value:"Number of Dice Rolls With Target Sum",id:"number-of-dice-rolls-with-target-sum",level:2},{value:"Swap For Longest Repeated Character Substring",id:"swap-for-longest-repeated-character-substring",level:2},{value:"Market Analysis I",id:"market-analysis-i",level:2},{value:"Maximum Level Sum of a Binary Tree",id:"maximum-level-sum-of-a-binary-tree",level:2},{value:"As Far from Land as Possible",id:"as-far-from-land-as-possible",level:2},{value:"Product Price at a Given Date",id:"product-price-at-a-given-date",level:2},{value:"Design File System",id:"design-file-system",level:2},{value:"Minimum Cost to Connect Sticks",id:"minimum-cost-to-connect-sticks",level:2},{value:"Invalid Transactions",id:"invalid-transactions",level:2},{value:"Compare Strings by Frequency of the Smallest Character",id:"compare-strings-by-frequency-of-the-smallest-character",level:2},{value:"Remove Zero Sum Consecutive Nodes from Linked List",id:"remove-zero-sum-consecutive-nodes-from-linked-list",level:2},{value:"Immediate Food Delivery II",id:"immediate-food-delivery-ii",level:2},{value:"Can Make Palindrome from Substring",id:"can-make-palindrome-from-substring",level:2},{value:"Before and After Puzzle",id:"before-and-after-puzzle",level:2},{value:"Shortest Distance to Target Color",id:"shortest-distance-to-target-color",level:2},{value:"Maximum Subarray Sum with One Deletion",id:"maximum-subarray-sum-with-one-deletion",level:2},{value:"Design Bounded Blocking Queue",id:"design-bounded-blocking-queue",level:2},{value:"Reverse Substrings Between Each Pair of Parentheses",id:"reverse-substrings-between-each-pair-of-parentheses",level:2},{value:"K-Concatenation Maximum Sum",id:"k-concatenation-maximum-sum",level:2},{value:"Monthly Transactions I",id:"monthly-transactions-i",level:2},{value:"Fizz Buzz Multithreaded",id:"fizz-buzz-multithreaded",level:2},{value:"Minimum Knight Moves",id:"minimum-knight-moves",level:2},{value:"Find Smallest Common Element in All Rows",id:"find-smallest-common-element-in-all-rows",level:2},{value:"Ugly Number III",id:"ugly-number-iii",level:2},{value:"Smallest String With Swaps",id:"smallest-string-with-swaps",level:2},{value:"Last Person to Fit in the Bus",id:"last-person-to-fit-in-the-bus",level:2},{value:"Monthly Transactions II",id:"monthly-transactions-ii",level:2},{value:"Get Equal Substrings Within Budget",id:"get-equal-substrings-within-budget",level:2},{value:"Remove All Adjacent Duplicates in String II",id:"remove-all-adjacent-duplicates-in-string-ii",level:2},{value:"Team Scores in Football Tournament",id:"team-scores-in-football-tournament",level:2},{value:"Two Sum BSTs",id:"two-sum-bsts",level:2},{value:"Stepping Numbers",id:"stepping-numbers",level:2},{value:"Longest Arithmetic Subsequence of Given Difference",id:"longest-arithmetic-subsequence-of-given-difference",level:2},{value:"Path with Maximum Gold",id:"path-with-maximum-gold",level:2},{value:"Queens That Can Attack the King",id:"queens-that-can-attack-the-king",level:2},{value:"The Dining Philosophers",id:"the-dining-philosophers",level:2},{value:"Airplane Seat Assignment Probability",id:"airplane-seat-assignment-probability",level:2},{value:"Meeting Scheduler",id:"meeting-scheduler",level:2},{value:"Toss Strange Coins",id:"toss-strange-coins",level:2},{value:"Remove Sub-Folders from the Filesystem",id:"remove-sub-folders-from-the-filesystem",level:2},{value:"Replace the Substring for Balanced String",id:"replace-the-substring-for-balanced-string",level:2},{value:"Web Crawler",id:"web-crawler",level:2},{value:"Find Positive Integer Solution for a Given Equation",id:"find-positive-integer-solution-for-a-given-equation",level:2},{value:"Circular Permutation in Binary Representation",id:"circular-permutation-in-binary-representation",level:2},{value:"Maximum Length of a Concatenated String with Unique Characters",id:"maximum-length-of-a-concatenated-string-with-unique-characters",level:2},{value:"Web Crawler Multithreaded",id:"web-crawler-multithreaded",level:2},{value:"Design A Leaderboard",id:"design-a-leaderboard",level:2},{value:"Tree Diameter",id:"tree-diameter",level:2},{value:"Minimum Swaps to Make Strings Equal",id:"minimum-swaps-to-make-strings-equal",level:2},{value:"Count Number of Nice Subarrays",id:"count-number-of-nice-subarrays",level:2},{value:"Minimum Remove to Make Valid Parentheses",id:"minimum-remove-to-make-valid-parentheses",level:2},{value:"Reconstruct a 2-Row Binary Matrix",id:"reconstruct-a-2-row-binary-matrix",level:2},{value:"Number of Closed Islands",id:"number-of-closed-islands",level:2},{value:"Encode Number",id:"encode-number",level:2},{value:"Smallest Common Region",id:"smallest-common-region",level:2},{value:"Synonymous Sentences",id:"synonymous-sentences",level:2},{value:"Find Elements in a Contaminated Binary Tree",id:"find-elements-in-a-contaminated-binary-tree",level:2},{value:"Greatest Sum Divisible by Three",id:"greatest-sum-divisible-by-three",level:2},{value:"Page Recommendations",id:"page-recommendations",level:2},{value:"Print Immutable Linked List in Reverse",id:"print-immutable-linked-list-in-reverse",level:2},{value:"Count Servers that Communicate",id:"count-servers-that-communicate",level:2},{value:"Search Suggestions System",id:"search-suggestions-system",level:2},{value:"All People Report to the Given Manager",id:"all-people-report-to-the-given-manager",level:2},{value:"Remove Interval",id:"remove-interval",level:2},{value:"Delete Tree Nodes",id:"delete-tree-nodes",level:2},{value:"Number of Burgers with No Waste of Ingredients",id:"number-of-burgers-with-no-waste-of-ingredients",level:2},{value:"Count Square Submatrices with All Ones",id:"count-square-submatrices-with-all-ones",level:2},{value:"Group the People Given the Group Size They Belong To",id:"group-the-people-given-the-group-size-they-belong-to",level:2},{value:"Find the Smallest Divisor Given a Threshold",id:"find-the-smallest-divisor-given-a-threshold",level:2},{value:"Find the Start and End Number of Continuous Ranges",id:"find-the-start-and-end-number-of-continuous-ranges",level:2},{value:"Iterator for Combination",id:"iterator-for-combination",level:2},{value:"Remove Covered Intervals",id:"remove-covered-intervals",level:2},{value:"Sequential Digits",id:"sequential-digits",level:2},{value:"Maximum Side Length of a Square with Sum Less than or Equal to Threshold",id:"maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",level:2},{value:"Divide Array in Sets of K Consecutive Numbers",id:"divide-array-in-sets-of-k-consecutive-numbers",level:2},{value:"Maximum Number of Occurrences of a Substring",id:"maximum-number-of-occurrences-of-a-substring",level:2},{value:"Sum of Mutated Array Closest to Target",id:"sum-of-mutated-array-closest-to-target",level:2},{value:"Deepest Leaves Sum",id:"deepest-leaves-sum",level:2},{value:"All Elements in Two Binary Search Trees",id:"all-elements-in-two-binary-search-trees",level:2},{value:"Jump Game III",id:"jump-game-iii",level:2},{value:"Running Total for Different Genders",id:"running-total-for-different-genders",level:2},{value:"XOR Queries of a Subarray",id:"xor-queries-of-a-subarray",level:2},{value:"Get Watched Videos by Your Friends",id:"get-watched-videos-by-your-friends",level:2},{value:"Matrix Block Sum",id:"matrix-block-sum",level:2},{value:"Sum of Nodes with Even-Valued Grandparent",id:"sum-of-nodes-with-even-valued-grandparent",level:2},{value:"Minimum Flips to Make a OR b Equal to c",id:"minimum-flips-to-make-a-or-b-equal-to-c",level:2},{value:"Number of Operations to Make Network Connected",id:"number-of-operations-to-make-network-connected",level:2},{value:"Restaurant Growth",id:"restaurant-growth",level:2},{value:"Print Words Vertically",id:"print-words-vertically",level:2},{value:"Delete Leaves With a Given Value",id:"delete-leaves-with-a-given-value",level:2},{value:"Break a Palindrome",id:"break-a-palindrome",level:2},{value:"Sort the Matrix Diagonally",id:"sort-the-matrix-diagonally",level:2},{value:"Filter Restaurants by Vegan-Friendly, Price and Distance",id:"filter-restaurants-by-vegan-friendly-price-and-distance",level:2},{value:"Find the City With the Smallest Number of Neighbors at a Threshold Distance",id:"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",level:2},{value:"Reduce Array Size to The Half",id:"reduce-array-size-to-the-half",level:2},{value:"Maximum Product of Splitted Binary Tree",id:"maximum-product-of-splitted-binary-tree",level:2},{value:"Movie Rating",id:"movie-rating",level:2},{value:"Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",id:"number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",level:2},{value:"Angle Between Hands of a Clock",id:"angle-between-hands-of-a-clock",level:2},{value:"Minimum Number of Steps to Make Two Strings Anagram",id:"minimum-number-of-steps-to-make-two-strings-anagram",level:2},{value:"Tweet Counts Per Frequency",id:"tweet-counts-per-frequency",level:2},{value:"Product of the Last K Numbers",id:"product-of-the-last-k-numbers",level:2},{value:"Maximum Number of Events That Can Be Attended",id:"maximum-number-of-events-that-can-be-attended",level:2},{value:"Activity Participants",id:"activity-participants",level:2},{value:"Apply Discount Every n Orders",id:"apply-discount-every-n-orders",level:2},{value:"Number of Substrings Containing All Three Characters",id:"number-of-substrings-containing-all-three-characters",level:2},{value:"Validate Binary Tree Nodes",id:"validate-binary-tree-nodes",level:2},{value:"Closest Divisors",id:"closest-divisors",level:2},{value:"Number of Trusted Contacts of a Customer",id:"number-of-trusted-contacts-of-a-customer",level:2},{value:"Rank Teams by Votes",id:"rank-teams-by-votes",level:2},{value:"Linked List in Binary Tree",id:"linked-list-in-binary-tree",level:2},{value:"Find the Longest Substring Containing Vowels in Even Counts",id:"find-the-longest-substring-containing-vowels-in-even-counts",level:2},{value:"Longest ZigZag Path in a Binary Tree",id:"longest-zigzag-path-in-a-binary-tree",level:2},{value:"Number of Times Binary String Is Prefix-Aligned",id:"number-of-times-binary-string-is-prefix-aligned",level:2},{value:"Time Needed to Inform All Employees",id:"time-needed-to-inform-all-employees",level:2},{value:"Design a Stack With Increment Operation",id:"design-a-stack-with-increment-operation",level:2},{value:"Balance a Binary Search Tree",id:"balance-a-binary-search-tree",level:2},{value:"Cinema Seat Allocation",id:"cinema-seat-allocation",level:2},{value:"Sort Integers by The Power Value",id:"sort-integers-by-the-power-value",level:2},{value:"Four Divisors",id:"four-divisors",level:2},{value:"Check if There is a Valid Path in a Grid",id:"check-if-there-is-a-valid-path-in-a-grid",level:2},{value:"Capital Gain/Loss",id:"capital-gainloss",level:2},{value:"Count Number of Teams",id:"count-number-of-teams",level:2},{value:"Design Underground System",id:"design-underground-system",level:2},{value:"Customers Who Bought Products A and B but Not C",id:"customers-who-bought-products-a-and-b-but-not-c",level:2},{value:"Construct K Palindrome Strings",id:"construct-k-palindrome-strings",level:2},{value:"Circle and Rectangle Overlapping",id:"circle-and-rectangle-overlapping",level:2},{value:"Number of Steps to Reduce a Number in Binary Representation to One",id:"number-of-steps-to-reduce-a-number-in-binary-representation-to-one",level:2},{value:"Longest Happy String",id:"longest-happy-string",level:2},{value:"Queries on a Permutation With Key",id:"queries-on-a-permutation-with-key",level:2},{value:"HTML Entity Parser",id:"html-entity-parser",level:2},{value:"Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",id:"find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",level:2},{value:"The k-th Lexicographical String of All Happy Strings of Length n",id:"the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",level:2},{value:"Display Table of Food Orders in a Restaurant",id:"display-table-of-food-orders-in-a-restaurant",level:2},{value:"Minimum Number of Frogs Croaking",id:"minimum-number-of-frogs-croaking",level:2},{value:"Maximum Points You Can Obtain from Cards",id:"maximum-points-you-can-obtain-from-cards",level:2},{value:"Diagonal Traverse II",id:"diagonal-traverse-ii",level:2},{value:"Leftmost Column with at Least a One",id:"leftmost-column-with-at-least-a-one",level:2},{value:"First Unique Number",id:"first-unique-number",level:2},{value:"Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",id:"check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree",level:2},{value:"Max Difference You Can Get From Changing an Integer",id:"max-difference-you-can-get-from-changing-an-integer",level:2},{value:"Check If a String Can Break Another String",id:"check-if-a-string-can-break-another-string",level:2},{value:"Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",id:"longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",level:2},{value:"Evaluate Boolean Expression",id:"evaluate-boolean-expression",level:2},{value:"Count Triplets That Can Form Two Arrays of Equal XOR",id:"count-triplets-that-can-form-two-arrays-of-equal-xor",level:2},{value:"Minimum Time to Collect All Apples in a Tree",id:"minimum-time-to-collect-all-apples-in-a-tree",level:2},{value:"Apples &amp; Oranges",id:"apples--oranges",level:2},{value:"Simplified Fractions",id:"simplified-fractions",level:2},{value:"Count Good Nodes in Binary Tree",id:"count-good-nodes-in-binary-tree",level:2},{value:"Rearrange Words in a Sentence",id:"rearrange-words-in-a-sentence",level:2},{value:"People Whose List of Favorite Companies Is Not a Subset of Another List",id:"people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",level:2},{value:"Active Users",id:"active-users",level:2},{value:"Maximum Number of Vowels in a Substring of Given Length",id:"maximum-number-of-vowels-in-a-substring-of-given-length",level:2},{value:"Pseudo-Palindromic Paths in a Binary Tree",id:"pseudo-palindromic-paths-in-a-binary-tree",level:2},{value:"Rectangles Area",id:"rectangles-area",level:2},{value:"Check If a String Contains All Binary Codes of Size K",id:"check-if-a-string-contains-all-binary-codes-of-size-k",level:2},{value:"Course Schedule IV",id:"course-schedule-iv",level:2},{value:"Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",id:"maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",level:2},{value:"Reorder Routes to Make All Paths Lead to the City Zero",id:"reorder-routes-to-make-all-paths-lead-to-the-city-zero",level:2},{value:"Calculate Salaries",id:"calculate-salaries",level:2},{value:"The k Strongest Values in an Array",id:"the-k-strongest-values-in-an-array",level:2},{value:"Design Browser History",id:"design-browser-history",level:2},{value:"Subrectangle Queries",id:"subrectangle-queries",level:2},{value:"Find Two Non-overlapping Sub-arrays Each With Target Sum",id:"find-two-non-overlapping-sub-arrays-each-with-target-sum",level:2},{value:"Least Number of Unique Integers after K Removals",id:"least-number-of-unique-integers-after-k-removals",level:2},{value:"Minimum Number of Days to Make m Bouquets",id:"minimum-number-of-days-to-make-m-bouquets",level:2},{value:"Clone Binary Tree With Random Pointer",id:"clone-binary-tree-with-random-pointer",level:2},{value:"Making File Names Unique",id:"making-file-names-unique",level:2},{value:"Avoid Flood in The City",id:"avoid-flood-in-the-city",level:2},{value:"Clone N-ary Tree",id:"clone-n-ary-tree",level:2},{value:"The kth Factor of n",id:"the-kth-factor-of-n",level:2},{value:"Longest Subarray of 1&#39;s After Deleting One Element",id:"longest-subarray-of-1s-after-deleting-one-element",level:2},{value:"Check If Array Pairs Are Divisible by k",id:"check-if-array-pairs-are-divisible-by-k",level:2},{value:"Number of Subsequences That Satisfy the Given Sum Condition",id:"number-of-subsequences-that-satisfy-the-given-sum-condition",level:2},{value:"Design a File Sharing System",id:"design-a-file-sharing-system",level:2},{value:"Countries You Can Safely Invest In",id:"countries-you-can-safely-invest-in",level:2},{value:"Last Moment Before All Ants Fall Out of a Plank",id:"last-moment-before-all-ants-fall-out-of-a-plank",level:2},{value:"Count Submatrices With All Ones",id:"count-submatrices-with-all-ones",level:2},{value:"Find Root of N-Ary Tree",id:"find-root-of-n-ary-tree",level:2},{value:"Range Sum of Sorted Subarray Sums",id:"range-sum-of-sorted-subarray-sums",level:2},{value:"Minimum Difference Between Largest and Smallest Value in Three Moves",id:"minimum-difference-between-largest-and-smallest-value-in-three-moves",level:2},{value:"Number of Substrings With Only 1s",id:"number-of-substrings-with-only-1s",level:2},{value:"Path with Maximum Probability",id:"path-with-maximum-probability",level:2},{value:"Number of Nodes in the Sub-Tree With the Same Label",id:"number-of-nodes-in-the-sub-tree-with-the-same-label",level:2},{value:"Diameter of N-Ary Tree",id:"diameter-of-n-ary-tree",level:2},{value:"Number of Sub-arrays With Odd Sum",id:"number-of-sub-arrays-with-odd-sum",level:2},{value:"Number of Good Ways to Split a String",id:"number-of-good-ways-to-split-a-string",level:2},{value:"Minimum Suffix Flips",id:"minimum-suffix-flips",level:2},{value:"Number of Good Leaf Nodes Pairs",id:"number-of-good-leaf-nodes-pairs",level:2},{value:"The Most Recent Three Orders",id:"the-most-recent-three-orders",level:2},{value:"Find the Index of the Large Integer",id:"find-the-index-of-the-large-integer",level:2},{value:"Find the Winner of an Array Game",id:"find-the-winner-of-an-array-game",level:2},{value:"Minimum Swaps to Arrange a Binary Grid",id:"minimum-swaps-to-arrange-a-binary-grid",level:2},{value:"Guess the Majority in a Hidden Array",id:"guess-the-majority-in-a-hidden-array",level:2},{value:"Can Convert String in K Moves",id:"can-convert-string-in-k-moves",level:2},{value:"Minimum Insertions to Balance a Parentheses String",id:"minimum-insertions-to-balance-a-parentheses-string",level:2},{value:"Find Kth Bit in Nth Binary String",id:"find-kth-bit-in-nth-binary-string",level:2},{value:"Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",id:"maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",level:2},{value:"The Most Recent Orders for Each Product",id:"the-most-recent-orders-for-each-product",level:2},{value:"Minimum Operations to Make Array Equal",id:"minimum-operations-to-make-array-equal",level:2},{value:"Magnetic Force Between Two Balls",id:"magnetic-force-between-two-balls",level:2},{value:"Strings Differ by One Character",id:"strings-differ-by-one-character",level:2},{value:"Bank Account Summary",id:"bank-account-summary",level:2},{value:"Minimum Number of Vertices to Reach All Nodes",id:"minimum-number-of-vertices-to-reach-all-nodes",level:2},{value:"Minimum Numbers of Function Calls to Make Target Array",id:"minimum-numbers-of-function-calls-to-make-target-array",level:2},{value:"Detect Cycles in 2D Grid",id:"detect-cycles-in-2d-grid",level:2},{value:"Maximum Number of Coins You Can Get",id:"maximum-number-of-coins-you-can-get",level:2},{value:"Find Latest Group of Size M",id:"find-latest-group-of-size-m",level:2},{value:"Put Boxes Into the Warehouse I",id:"put-boxes-into-the-warehouse-i",level:2},{value:"Maximum Length of Subarray With Positive Product",id:"maximum-length-of-subarray-with-positive-product",level:2},{value:"Dot Product of Two Sparse Vectors",id:"dot-product-of-two-sparse-vectors",level:2},{value:"Number of Ways to Split a String",id:"number-of-ways-to-split-a-string",level:2},{value:"Shortest Subarray to be Removed to Make Array Sorted",id:"shortest-subarray-to-be-removed-to-make-array-sorted",level:2},{value:"Number of Ways Where Square of Number Is Equal to Product of Two Numbers",id:"number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",level:2},{value:"Minimum Time to Make Rope Colorful",id:"minimum-time-to-make-rope-colorful",level:2},{value:"Put Boxes Into the Warehouse II",id:"put-boxes-into-the-warehouse-ii",level:2},{value:"Count Unhappy Friends",id:"count-unhappy-friends",level:2},{value:"Min Cost to Connect All Points",id:"min-cost-to-connect-all-points",level:2},{value:"Binary Search Tree Iterator II",id:"binary-search-tree-iterator-ii",level:2},{value:"Maximum Sum Obtained of Any Permutation",id:"maximum-sum-obtained-of-any-permutation",level:2},{value:"Make Sum Divisible by P",id:"make-sum-divisible-by-p",level:2},{value:"Split a String Into the Max Number of Unique Substrings",id:"split-a-string-into-the-max-number-of-unique-substrings",level:2},{value:"Maximum Non Negative Product in a Matrix",id:"maximum-non-negative-product-in-a-matrix",level:2},{value:"The Most Frequently Ordered Products for Each Customer",id:"the-most-frequently-ordered-products-for-each-customer",level:2},{value:"Maximum Profit of Operating a Centennial Wheel",id:"maximum-profit-of-operating-a-centennial-wheel",level:2},{value:"Throne Inheritance",id:"throne-inheritance",level:2},{value:"Find Nearest Right Node in Binary Tree",id:"find-nearest-right-node-in-binary-tree",level:2},{value:"Alert Using Same Key-Card Three or More Times in a One Hour Period",id:"alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",level:2},{value:"Find Valid Matrix Given Row and Column Sums",id:"find-valid-matrix-given-row-and-column-sums",level:2},{value:"Even Odd Tree",id:"even-odd-tree",level:2},{value:"Check If Two Expression Trees are Equivalent",id:"check-if-two-expression-trees-are-equivalent",level:2},{value:"Find the Missing IDs",id:"find-the-missing-ids",level:2},{value:"Maximal Network Rank",id:"maximal-network-rank",level:2},{value:"Split Two Strings to Make Palindrome",id:"split-two-strings-to-make-palindrome",level:2},{value:"Maximum Font to Fit a Sentence in a Screen",id:"maximum-font-to-fit-a-sentence-in-a-screen",level:2},{value:"Coordinate With Maximum Network Quality",id:"coordinate-with-maximum-network-quality",level:2},{value:"Number of Sets of K Non-Overlapping Line Segments",id:"number-of-sets-of-k-non-overlapping-line-segments",level:2},{value:"Lexicographically Smallest String After Applying Operations",id:"lexicographically-smallest-string-after-applying-operations",level:2},{value:"Best Team With No Conflicts",id:"best-team-with-no-conflicts",level:2},{value:"Design an Expression Tree With Evaluate Function",id:"design-an-expression-tree-with-evaluate-function",level:2},{value:"Arithmetic Subarrays",id:"arithmetic-subarrays",level:2},{value:"Path With Minimum Effort",id:"path-with-minimum-effort",level:2},{value:"Add Two Polynomials Represented as Linked Lists",id:"add-two-polynomials-represented-as-linked-lists",level:2},{value:"Widest Vertical Area Between Two Points Containing No Points",id:"widest-vertical-area-between-two-points-containing-no-points",level:2},{value:"Count Substrings That Differ by One Character",id:"count-substrings-that-differ-by-one-character",level:2},{value:"Count Sorted Vowel Strings",id:"count-sorted-vowel-strings",level:2},{value:"Furthest Building You Can Reach",id:"furthest-building-you-can-reach",level:2},{value:"Lowest Common Ancestor of a Binary Tree II",id:"lowest-common-ancestor-of-a-binary-tree-ii",level:2},{value:"Minimum Deletions to Make Character Frequencies Unique",id:"minimum-deletions-to-make-character-frequencies-unique",level:2},{value:"Sell Diminishing-Valued Colored Balls",id:"sell-diminishing-valued-colored-balls",level:2},{value:"Lowest Common Ancestor of a Binary Tree III",id:"lowest-common-ancestor-of-a-binary-tree-iii",level:2},{value:"Minimum Deletions to Make String Balanced",id:"minimum-deletions-to-make-string-balanced",level:2},{value:"Minimum Jumps to Reach Home",id:"minimum-jumps-to-reach-home",level:2},{value:"Determine if Two Strings Are Close",id:"determine-if-two-strings-are-close",level:2},{value:"Minimum Operations to Reduce X to Zero",id:"minimum-operations-to-reduce-x-to-zero",level:2},{value:"Correct a Binary Tree",id:"correct-a-binary-tree",level:2},{value:"Smallest String With A Given Numeric Value",id:"smallest-string-with-a-given-numeric-value",level:2},{value:"Ways to Make a Fair Array",id:"ways-to-make-a-fair-array",level:2},{value:"Change the Root of a Binary Tree",id:"change-the-root-of-a-binary-tree",level:2},{value:"Merge In Between Linked Lists",id:"merge-in-between-linked-lists",level:2},{value:"Design Front Middle Back Queue",id:"design-front-middle-back-queue",level:2},{value:"Find the Most Competitive Subsequence",id:"find-the-most-competitive-subsequence",level:2},{value:"Minimum Moves to Make Array Complementary",id:"minimum-moves-to-make-array-complementary",level:2},{value:"Lowest Common Ancestor of a Binary Tree IV",id:"lowest-common-ancestor-of-a-binary-tree-iv",level:2},{value:"Max Number of K-Sum Pairs",id:"max-number-of-k-sum-pairs",level:2},{value:"Concatenation of Consecutive Binary Numbers",id:"concatenation-of-consecutive-binary-numbers",level:2},{value:"Longest Palindromic Subsequence II",id:"longest-palindromic-subsequence-ii",level:2},{value:"Sum of Absolute Differences in a Sorted Array",id:"sum-of-absolute-differences-in-a-sorted-array",level:2},{value:"Stone Game VI",id:"stone-game-vi",level:2},{value:"Partitioning Into Minimum Number Of Deci-Binary Numbers",id:"partitioning-into-minimum-number-of-deci-binary-numbers",level:2},{value:"Stone Game VII",id:"stone-game-vii",level:2},{value:"Maximum Erasure Value",id:"maximum-erasure-value",level:2},{value:"Jump Game VI",id:"jump-game-vi",level:2},{value:"Number of Distinct Substrings in a String",id:"number-of-distinct-substrings-in-a-string",level:2},{value:"Number of Calls Between Two Persons",id:"number-of-calls-between-two-persons",level:2},{value:"Average Waiting Time",id:"average-waiting-time",level:2},{value:"Maximum Binary String After Change",id:"maximum-binary-string-after-change",level:2},{value:"Maximum Number of Eaten Apples",id:"maximum-number-of-eaten-apples",level:2},{value:"Where Will the Ball Fall",id:"where-will-the-ball-fall",level:2},{value:"Biggest Window Between Visits",id:"biggest-window-between-visits",level:2},{value:"Count Good Meals",id:"count-good-meals",level:2},{value:"Ways to Split Array Into Three Subarrays",id:"ways-to-split-array-into-three-subarrays",level:2},{value:"Count Apples and Oranges",id:"count-apples-and-oranges",level:2},{value:"Maximum Score From Removing Substrings",id:"maximum-score-from-removing-substrings",level:2},{value:"Construct the Lexicographically Largest Valid Sequence",id:"construct-the-lexicographically-largest-valid-sequence",level:2},{value:"Swapping Nodes in a Linked List",id:"swapping-nodes-in-a-linked-list",level:2},{value:"Minimize Hamming Distance After Swap Operations",id:"minimize-hamming-distance-after-swap-operations",level:2},{value:"Tuple with Same Product",id:"tuple-with-same-product",level:2},{value:"Largest Submatrix With Rearrangements",id:"largest-submatrix-with-rearrangements",level:2},{value:"Shortest Path to Get Food",id:"shortest-path-to-get-food",level:2},{value:"Minimum Number of People to Teach",id:"minimum-number-of-people-to-teach",level:2},{value:"Decode XORed Permutation",id:"decode-xored-permutation",level:2},{value:"Change Minimum Characters to Satisfy One of Three Conditions",id:"change-minimum-characters-to-satisfy-one-of-three-conditions",level:2},{value:"Find Kth Largest XOR Coordinate Value",id:"find-kth-largest-xor-coordinate-value",level:2},{value:"Find Distance in a Binary Tree",id:"find-distance-in-a-binary-tree",level:2},{value:"Restore the Array From Adjacent Pairs",id:"restore-the-array-from-adjacent-pairs",level:2},{value:"Can You Eat Your Favorite Candy on Your Favorite Day?",id:"can-you-eat-your-favorite-candy-on-your-favorite-day",level:2},{value:"Maximum Subarray Sum After One Operation",id:"maximum-subarray-sum-after-one-operation",level:2},{value:"Leetflex Banned Accounts",id:"leetflex-banned-accounts",level:2},{value:"Maximum Absolute Sum of Any Subarray",id:"maximum-absolute-sum-of-any-subarray",level:2},{value:"Minimum Length of String After Deleting Similar Ends",id:"minimum-length-of-string-after-deleting-similar-ends",level:2},{value:"Maximum Score From Removing Stones",id:"maximum-score-from-removing-stones",level:2},{value:"Largest Merge Of Two Strings",id:"largest-merge-of-two-strings",level:2},{value:"Design Most Recently Used Queue",id:"design-most-recently-used-queue",level:2},{value:"Count Number of Homogenous Substrings",id:"count-number-of-homogenous-substrings",level:2},{value:"Minimum Limit of Balls in a Bag",id:"minimum-limit-of-balls-in-a-bag",level:2},{value:"Buildings With an Ocean View",id:"buildings-with-an-ocean-view",level:2},{value:"Form Array by Concatenating Subarrays of Another Array",id:"form-array-by-concatenating-subarrays-of-another-array",level:2},{value:"Map of Highest Peak",id:"map-of-highest-peak",level:2},{value:"Minimum Number of Operations to Move All Balls to Each Box",id:"minimum-number-of-operations-to-move-all-balls-to-each-box",level:2},{value:"Maximum Score from Performing Multiplication Operations",id:"maximum-score-from-performing-multiplication-operations",level:2},{value:"Sort Features by Popularity",id:"sort-features-by-popularity",level:2},{value:"Closest Dessert Cost",id:"closest-dessert-cost",level:2},{value:"Equal Sum Arrays With Minimum Number of Operations",id:"equal-sum-arrays-with-minimum-number-of-operations",level:2},{value:"Shortest Path in a Hidden Grid",id:"shortest-path-in-a-hidden-grid",level:2},{value:"Check if Number is a Sum of Powers of Three",id:"check-if-number-is-a-sum-of-powers-of-three",level:2},{value:"Sum of Beauty of All Substrings",id:"sum-of-beauty-of-all-substrings",level:2},{value:"Grand Slam Titles",id:"grand-slam-titles",level:2},{value:"Minimum Elements to Add to Form a Given Sum",id:"minimum-elements-to-add-to-form-a-given-sum",level:2},{value:"Number of Restricted Paths From First to Last Node",id:"number-of-restricted-paths-from-first-to-last-node",level:2},{value:"Maximum Average Pass Ratio",id:"maximum-average-pass-ratio",level:2},{value:"Count Pairs of Equal Substrings With Minimum Difference",id:"count-pairs-of-equal-substrings-with-minimum-difference",level:2},{value:"Design Authentication Manager",id:"design-authentication-manager",level:2},{value:"Maximum Number of Consecutive Values You Can Make",id:"maximum-number-of-consecutive-values-you-can-make",level:2},{value:"Number of Orders in the Backlog",id:"number-of-orders-in-the-backlog",level:2},{value:"Maximum Value at a Given Index in a Bounded Array",id:"maximum-value-at-a-given-index-in-a-bounded-array",level:2},{value:"Implement Trie II (Prefix Tree)",id:"implement-trie-ii-prefix-tree",level:2},{value:"Minimum Number of Operations to Reinitialize a Permutation",id:"minimum-number-of-operations-to-reinitialize-a-permutation",level:2},{value:"Evaluate the Bracket Pairs of a String",id:"evaluate-the-bracket-pairs-of-a-string",level:2},{value:"Minimum Path Cost in a Hidden Grid",id:"minimum-path-cost-in-a-hidden-grid",level:2},{value:"Find Interview Candidates",id:"find-interview-candidates",level:2},{value:"Sentence Similarity III",id:"sentence-similarity-iii",level:2},{value:"Count Nice Pairs in an Array",id:"count-nice-pairs-in-an-array",level:2},{value:"Finding the Users Active Minutes",id:"finding-the-users-active-minutes",level:2},{value:"Minimum Absolute Sum Difference",id:"minimum-absolute-sum-difference",level:2},{value:"Maximum Number of Accepted Invitations",id:"maximum-number-of-accepted-invitations",level:2},{value:"Find the Winner of the Circular Game",id:"find-the-winner-of-the-circular-game",level:2},{value:"Minimum Sideway Jumps",id:"minimum-sideway-jumps",level:2},{value:"Queries on Number of Points Inside a Circle",id:"queries-on-number-of-points-inside-a-circle",level:2},{value:"Maximum XOR for Each Query",id:"maximum-xor-for-each-query",level:2},{value:"Maximum Transaction Each Day",id:"maximum-transaction-each-day",level:2},{value:"Maximum Ice Cream Bars",id:"maximum-ice-cream-bars",level:2},{value:"Single-Threaded CPU",id:"single-threaded-cpu",level:2},{value:"Remove Duplicates From an Unsorted Linked List",id:"remove-duplicates-from-an-unsorted-linked-list",level:2},{value:"Frequency of the Most Frequent Element",id:"frequency-of-the-most-frequent-element",level:2},{value:"Longest Substring Of All Vowels in Order",id:"longest-substring-of-all-vowels-in-order",level:2},{value:"League Statistics",id:"league-statistics",level:2},{value:"Suspicious Bank Accounts",id:"suspicious-bank-accounts",level:2},{value:"Seat Reservation Manager",id:"seat-reservation-manager",level:2},{value:"Maximum Element After Decreasing and Rearranging",id:"maximum-element-after-decreasing-and-rearranging",level:2},{value:"Splitting a String Into Descending Consecutive Values",id:"splitting-a-string-into-descending-consecutive-values",level:2},{value:"Minimum Adjacent Swaps to Reach the Kth Smallest Number",id:"minimum-adjacent-swaps-to-reach-the-kth-smallest-number",level:2},{value:"Distinct Numbers in Each Subarray",id:"distinct-numbers-in-each-subarray",level:2},{value:"Maximum Distance Between a Pair of Values",id:"maximum-distance-between-a-pair-of-values",level:2},{value:"Maximum Subarray Min-Product",id:"maximum-subarray-min-product",level:2},{value:"Longest Word With All Prefixes",id:"longest-word-with-all-prefixes",level:2},{value:"Incremental Memory Leak",id:"incremental-memory-leak",level:2},{value:"Rotating the Box",id:"rotating-the-box",level:2},{value:"Minimum Number of Swaps to Make the Binary String Alternating",id:"minimum-number-of-swaps-to-make-the-binary-string-alternating",level:2},{value:"Finding Pairs With a Certain Sum",id:"finding-pairs-with-a-certain-sum",level:2},{value:"Orders With Maximum Quantity Above Average",id:"orders-with-maximum-quantity-above-average",level:2},{value:"Product of Two Run-Length Encoded Arrays",id:"product-of-two-run-length-encoded-arrays",level:2},{value:"Minimum Speed to Arrive on Time",id:"minimum-speed-to-arrive-on-time",level:2},{value:"Jump Game VII",id:"jump-game-vii",level:2},{value:"Minimize Product Sum of Two Arrays",id:"minimize-product-sum-of-two-arrays",level:2},{value:"Group Employees of the Same Salary",id:"group-employees-of-the-same-salary",level:2},{value:"Minimize Maximum Pair Sum in Array",id:"minimize-maximum-pair-sum-in-array",level:2},{value:"Get Biggest Three Rhombus Sums in a Grid",id:"get-biggest-three-rhombus-sums-in-a-grid",level:2},{value:"Maximum Value after Insertion",id:"maximum-value-after-insertion",level:2},{value:"Process Tasks Using Servers",id:"process-tasks-using-servers",level:2},{value:"Egg Drop With 2 Eggs and N Floors",id:"egg-drop-with-2-eggs-and-n-floors",level:2},{value:"Count Pairs in Two Arrays",id:"count-pairs-in-two-arrays",level:2},{value:"Reduction Operations to Make the Array Elements Equal",id:"reduction-operations-to-make-the-array-elements-equal",level:2},{value:"Minimum Number of Flips to Make the Binary String Alternating",id:"minimum-number-of-flips-to-make-the-binary-string-alternating",level:2},{value:"Cutting Ribbons",id:"cutting-ribbons",level:2},{value:"Find the Student that Will Replace the Chalk",id:"find-the-student-that-will-replace-the-chalk",level:2},{value:"Largest Magic Square",id:"largest-magic-square",level:2},{value:"Maximum Number of Removable Characters",id:"maximum-number-of-removable-characters",level:2},{value:"Merge Triplets to Form Target Triplet",id:"merge-triplets-to-form-target-triplet",level:2},{value:"Find a Peak Element II",id:"find-a-peak-element-ii",level:2},{value:"Depth of BST Given Insertion Order",id:"depth-of-bst-given-insertion-order",level:2},{value:"The Number of Full Rounds You Have Played",id:"the-number-of-full-rounds-you-have-played",level:2},{value:"Count Sub Islands",id:"count-sub-islands",level:2},{value:"Minimum Absolute Difference Queries",id:"minimum-absolute-difference-queries",level:2},{value:"Count Salary Categories",id:"count-salary-categories",level:2},{value:"Game of Nim",id:"game-of-nim",level:2},{value:"Remove All Occurrences of a Substring",id:"remove-all-occurrences-of-a-substring",level:2},{value:"Maximum Alternating Subsequence Sum",id:"maximum-alternating-subsequence-sum",level:2},{value:"Cyclically Rotating a Grid",id:"cyclically-rotating-a-grid",level:2},{value:"Number of Wonderful Substrings",id:"number-of-wonderful-substrings",level:2},{value:"Kth Smallest Subarray Sum",id:"kth-smallest-subarray-sum",level:2},{value:"Eliminate Maximum Number of Monsters",id:"eliminate-maximum-number-of-monsters",level:2},{value:"Count Good Numbers",id:"count-good-numbers",level:2},{value:"Nearest Exit from Entrance in Maze",id:"nearest-exit-from-entrance-in-maze",level:2},{value:"Sum Game",id:"sum-game",level:2},{value:"Unique Length-3 Palindromic Subsequences",id:"unique-length-3-palindromic-subsequences",level:2},{value:"Confirmation Rate",id:"confirmation-rate",level:2},{value:"Add Minimum Number of Rungs",id:"add-minimum-number-of-rungs",level:2},{value:"Maximum Number of Points with Cost",id:"maximum-number-of-points-with-cost",level:2},{value:"Longest Common Subsequence Between Sorted Arrays",id:"longest-common-subsequence-between-sorted-arrays",level:2},{value:"The Number of the Smallest Unoccupied Chair",id:"the-number-of-the-smallest-unoccupied-chair",level:2},{value:"Describe the Painting",id:"describe-the-painting",level:2},{value:"Largest Number After Mutating Substring",id:"largest-number-after-mutating-substring",level:2},{value:"Maximum Compatibility Score Sum",id:"maximum-compatibility-score-sum",level:2},{value:"Strong Friendship",id:"strong-friendship",level:2},{value:"Maximum of Minimum Values in All Subarrays",id:"maximum-of-minimum-values-in-all-subarrays",level:2},{value:"All the Pairs With the Maximum Number of Common Followers",id:"all-the-pairs-with-the-maximum-number-of-common-followers",level:2},{value:"Maximum Number of Weeks for Which You Can Work",id:"maximum-number-of-weeks-for-which-you-can-work",level:2},{value:"Minimum Garden Perimeter to Collect Enough Apples",id:"minimum-garden-perimeter-to-collect-enough-apples",level:2},{value:"Check if Move is Legal",id:"check-if-move-is-legal",level:2},{value:"Minimum Total Space Wasted With K Resizing Operations",id:"minimum-total-space-wasted-with-k-resizing-operations",level:2},{value:"Remove Stones to Minimize the Total",id:"remove-stones-to-minimize-the-total",level:2},{value:"Minimum Number of Swaps to Make the String Balanced",id:"minimum-number-of-swaps-to-make-the-string-balanced",level:2},{value:"Binary Searchable Numbers in an Unsorted Array",id:"binary-searchable-numbers-in-an-unsorted-array",level:2},{value:"Array With Elements Not Equal to Average of Neighbors",id:"array-with-elements-not-equal-to-average-of-neighbors",level:2},{value:"Minimum Non-Zero Product of the Array Elements",id:"minimum-non-zero-product-of-the-array-elements",level:2},{value:"Count Nodes Equal to Sum of Descendants",id:"count-nodes-equal-to-sum-of-descendants",level:2},{value:"Maximum Matrix Sum",id:"maximum-matrix-sum",level:2},{value:"Number of Ways to Arrive at Destination",id:"number-of-ways-to-arrive-at-destination",level:2},{value:"Find Unique Binary String",id:"find-unique-binary-string",level:2},{value:"Minimize the Difference Between Target and Chosen Elements",id:"minimize-the-difference-between-target-and-chosen-elements",level:2},{value:"Widest Pair of Indices With Equal Range Sum",id:"widest-pair-of-indices-with-equal-range-sum",level:2},{value:"Find the Kth Largest Integer in the Array",id:"find-the-kth-largest-integer-in-the-array",level:2},{value:"Minimum Number of Work Sessions to Finish the Tasks",id:"minimum-number-of-work-sessions-to-finish-the-tasks",level:2},{value:"Find Cutoff Score for Each School",id:"find-cutoff-score-for-each-school",level:2},{value:"Maximum Number of People That Can Be Caught in Tag",id:"maximum-number-of-people-that-can-be-caught-in-tag",level:2},{value:"Count the Number of Experiments",id:"count-the-number-of-experiments",level:2},{value:"Find All Groups of Farmland",id:"find-all-groups-of-farmland",level:2},{value:"Operations on Tree",id:"operations-on-tree",level:2},{value:"The Number of Weak Characters in the Game",id:"the-number-of-weak-characters-in-the-game",level:2},{value:"First Day Where You Have Been in All the Rooms",id:"first-day-where-you-have-been-in-all-the-rooms",level:2},{value:"Smallest Greater Multiple Made of Two Digits",id:"smallest-greater-multiple-made-of-two-digits",level:2},{value:"Number of Pairs of Interchangeable Rectangles",id:"number-of-pairs-of-interchangeable-rectangles",level:2},{value:"Maximum Product of the Length of Two Palindromic Subsequences",id:"maximum-product-of-the-length-of-two-palindromic-subsequences",level:2},{value:"Find Original Array From Doubled Array",id:"find-original-array-from-doubled-array",level:2},{value:"Maximum Earnings From Taxi",id:"maximum-earnings-from-taxi",level:2},{value:"Sum of Beauty in the Array",id:"sum-of-beauty-in-the-array",level:2},{value:"Detect Squares",id:"detect-squares",level:2},{value:"Average Height of Buildings in Each Segment",id:"average-height-of-buildings-in-each-segment",level:2},{value:"Grid Game",id:"grid-game",level:2},{value:"Check if Word Can Be Placed In Crossword",id:"check-if-word-can-be-placed-in-crossword",level:2},{value:"Number of Accounts That Did Not Stream",id:"number-of-accounts-that-did-not-stream",level:2},{value:"Brightest Position on Street",id:"brightest-position-on-street",level:2},{value:"Number of Pairs of Strings With Concatenation Equal to Target",id:"number-of-pairs-of-strings-with-concatenation-equal-to-target",level:2},{value:"Maximize the Confusion of an Exam",id:"maximize-the-confusion-of-an-exam",level:2},{value:"Find Missing Observations",id:"find-missing-observations",level:2},{value:"Stone Game IX",id:"stone-game-ix",level:2},{value:"Count Subarrays With More Ones Than Zeros",id:"count-subarrays-with-more-ones-than-zeros",level:2},{value:"Minimum Operations to Make a Uni-Value Grid",id:"minimum-operations-to-make-a-uni-value-grid",level:2},{value:"Stock Price Fluctuation",id:"stock-price-fluctuation",level:2},{value:"Maximum Alternating Subarray Sum",id:"maximum-alternating-subarray-sum",level:2},{value:"Remove Colored Pieces if Both Neighbors are the Same Color",id:"remove-colored-pieces-if-both-neighbors-are-the-same-color",level:2},{value:"The Time When the Network Becomes Idle",id:"the-time-when-the-network-becomes-idle",level:2},{value:"Accepted Candidates From the Interviews",id:"accepted-candidates-from-the-interviews",level:2},{value:"Simple Bank System",id:"simple-bank-system",level:2},{value:"Count Number of Maximum Bitwise-OR Subsets",id:"count-number-of-maximum-bitwise-or-subsets",level:2},{value:"Sort Linked List Already Sorted Using Absolute Values",id:"sort-linked-list-already-sorted-using-absolute-values",level:2},{value:"Next Greater Numerically Balanced Number",id:"next-greater-numerically-balanced-number",level:2},{value:"Count Nodes With the Highest Score",id:"count-nodes-with-the-highest-score",level:2},{value:"The Category of Each Member in the Store",id:"the-category-of-each-member-in-the-store",level:2},{value:"Minimum Cost to Separate Sentence Into Rows",id:"minimum-cost-to-separate-sentence-into-rows",level:2},{value:"Two Best Non-Overlapping Events",id:"two-best-non-overlapping-events",level:2},{value:"Plates Between Candles",id:"plates-between-candles",level:2},{value:"Find the Minimum and Maximum Number of Nodes Between Critical Points",id:"find-the-minimum-and-maximum-number-of-nodes-between-critical-points",level:2},{value:"Minimum Operations to Convert Number",id:"minimum-operations-to-convert-number",level:2},{value:"Number of Spaces Cleaning Robot Cleaned",id:"number-of-spaces-cleaning-robot-cleaned",level:2},{value:"Vowels of All Substrings",id:"vowels-of-all-substrings",level:2},{value:"Minimized Maximum of Products Distributed to Any Store",id:"minimized-maximum-of-products-distributed-to-any-store",level:2},{value:"Account Balance",id:"account-balance",level:2},{value:"Number of Equal Count Substrings",id:"number-of-equal-count-substrings",level:2},{value:"Walking Robot Simulation II",id:"walking-robot-simulation-ii",level:2},{value:"Most Beautiful Item for Each Query",id:"most-beautiful-item-for-each-query",level:2},{value:"Reverse Nodes in Even Length Groups",id:"reverse-nodes-in-even-length-groups",level:2},{value:"Decode the Slanted Ciphertext",id:"decode-the-slanted-ciphertext",level:2},{value:"Paths in Maze That Lead to Same Room",id:"paths-in-maze-that-lead-to-same-room",level:2},{value:"Watering Plants",id:"watering-plants",level:2},{value:"Range Frequency Queries",id:"range-frequency-queries",level:2},{value:"Substrings That Begin and End With the Same Letter",id:"substrings-that-begin-and-end-with-the-same-letter",level:2},{value:"Drop Type 1 Orders for Customers With Type 0 Orders",id:"drop-type-1-orders-for-customers-with-type-0-orders",level:2},{value:"Minimum Number of Buckets Required to Collect Rainwater from Houses",id:"minimum-number-of-buckets-required-to-collect-rainwater-from-houses",level:2},{value:"Minimum Cost Homecoming of a Robot in a Grid",id:"minimum-cost-homecoming-of-a-robot-in-a-grid",level:2},{value:"K Radius Subarray Averages",id:"k-radius-subarray-averages",level:2},{value:"Removing Minimum and Maximum From Array",id:"removing-minimum-and-maximum-from-array",level:2},{value:"Minimum Cost to Reach City With Discounts",id:"minimum-cost-to-reach-city-with-discounts",level:2},{value:"Delete the Middle Node of a Linked List",id:"delete-the-middle-node-of-a-linked-list",level:2},{value:"Step-By-Step Directions From a Binary Tree Node to Another",id:"step-by-step-directions-from-a-binary-tree-node-to-another",level:2},{value:"Subsequence of Size K With the Largest Even Sum",id:"subsequence-of-size-k-with-the-largest-even-sum",level:2},{value:"Find Good Days to Rob the Bank",id:"find-good-days-to-rob-the-bank",level:2},{value:"Detonate the Maximum Bombs",id:"detonate-the-maximum-bombs",level:2},{value:"Sum of Subarray Ranges",id:"sum-of-subarray-ranges",level:2},{value:"Watering Plants II",id:"watering-plants-ii",level:2},{value:"Number of Unique Flavors After Sharing K Candies",id:"number-of-unique-flavors-after-sharing-k-candies",level:2},{value:"Adding Spaces to a String",id:"adding-spaces-to-a-string",level:2},{value:"Number of Smooth Descent Periods of a Stock",id:"number-of-smooth-descent-periods-of-a-stock",level:2},{value:"The Airport With the Most Traffic",id:"the-airport-with-the-most-traffic",level:2},{value:"Elements in Array After Removing and Replacing Elements",id:"elements-in-array-after-removing-and-replacing-elements",level:2},{value:"Find All Possible Recipes from Given Supplies",id:"find-all-possible-recipes-from-given-supplies",level:2},{value:"Check if a Parentheses String Can Be Valid",id:"check-if-a-parentheses-string-can-be-valid",level:2},{value:"Execution of All Suffix Instructions Staying in a Grid",id:"execution-of-all-suffix-instructions-staying-in-a-grid",level:2},{value:"Intervals Between Identical Elements",id:"intervals-between-identical-elements",level:2},{value:"Number of Laser Beams in a Bank",id:"number-of-laser-beams-in-a-bank",level:2},{value:"Destroying Asteroids",id:"destroying-asteroids",level:2},{value:"Remove All Ones With Row and Column Flips",id:"remove-all-ones-with-row-and-column-flips",level:2},{value:"Maximum Twin Sum of a Linked List",id:"maximum-twin-sum-of-a-linked-list",level:2},{value:"Longest Palindrome by Concatenating Two Letter Words",id:"longest-palindrome-by-concatenating-two-letter-words",level:2},{value:"Minimum Swaps to Group All 1&#39;s Together II",id:"minimum-swaps-to-group-all-1s-together-ii",level:2},{value:"Count Words Obtained After Adding a Letter",id:"count-words-obtained-after-adding-a-letter",level:2},{value:"Pour Water Between Buckets to Make Water Levels Equal",id:"pour-water-between-buckets-to-make-water-levels-equal",level:2},{value:"Minimum Moves to Reach Target Score",id:"minimum-moves-to-reach-target-score",level:2},{value:"Solving Questions With Brainpower",id:"solving-questions-with-brainpower",level:2},{value:"The Number of Passengers in Each Bus I",id:"the-number-of-passengers-in-each-bus-i",level:2},{value:"Count the Hidden Sequences",id:"count-the-hidden-sequences",level:2},{value:"K Highest Ranked Items Within a Price Range",id:"k-highest-ranked-items-within-a-price-range",level:2},{value:"Rearrange Array Elements by Sign",id:"rearrange-array-elements-by-sign",level:2},{value:"Find All Lonely Numbers in the Array",id:"find-all-lonely-numbers-in-the-array",level:2},{value:"Minimum Number of Lines to Cover Points",id:"minimum-number-of-lines-to-cover-points",level:2},{value:"All Divisions With the Highest Score of a Binary Array",id:"all-divisions-with-the-highest-score-of-a-binary-array",level:2},{value:"Order Two Columns Independently",id:"order-two-columns-independently",level:2},{value:"Partition Array According to Given Pivot",id:"partition-array-according-to-given-pivot",level:2},{value:"Minimum Cost to Set Cooking Time",id:"minimum-cost-to-set-cooking-time",level:2},{value:"Smallest Value of the Rearranged Number",id:"smallest-value-of-the-rearranged-number",level:2},{value:"Design Bitset",id:"design-bitset",level:2},{value:"Unique Substrings With Equal Digit Frequency",id:"unique-substrings-with-equal-digit-frequency",level:2},{value:"Minimum Operations to Make the Array Alternating",id:"minimum-operations-to-make-the-array-alternating",level:2},{value:"Removing Minimum Number of Magic Beans",id:"removing-minimum-number-of-magic-beans",level:2},{value:"Remove All Ones With Row and Column Flips II",id:"remove-all-ones-with-row-and-column-flips-ii",level:2},{value:"The Change in Global Rankings",id:"the-change-in-global-rankings",level:2},{value:"Find Three Consecutive Integers That Sum to a Given Number",id:"find-three-consecutive-integers-that-sum-to-a-given-number",level:2},{value:"Maximum Split of Positive Even Integers",id:"maximum-split-of-positive-even-integers",level:2},{value:"Merge Nodes in Between Zeros",id:"merge-nodes-in-between-zeros",level:2},{value:"Construct String With Repeat Limit",id:"construct-string-with-repeat-limit",level:2},{value:"Number of Ways to Build Sturdy Brick Wall",id:"number-of-ways-to-build-sturdy-brick-wall",level:2},{value:"Minimum Number of Steps to Make Two Strings Anagram II",id:"minimum-number-of-steps-to-make-two-strings-anagram-ii",level:2},{value:"Minimum Time to Complete Trips",id:"minimum-time-to-complete-trips",level:2},{value:"Number of Ways to Build House of Cards",id:"number-of-ways-to-build-house-of-cards",level:2},{value:"Sort the Jumbled Numbers",id:"sort-the-jumbled-numbers",level:2},{value:"All Ancestors of a Node in a Directed Acyclic Graph",id:"all-ancestors-of-a-node-in-a-directed-acyclic-graph",level:2},{value:"Append K Integers With Minimal Sum",id:"append-k-integers-with-minimal-sum",level:2},{value:"Create Binary Tree From Descriptions",id:"create-binary-tree-from-descriptions",level:2},{value:"Number of Single Divisor Triplets",id:"number-of-single-divisor-triplets",level:2},{value:"Count Artifacts That Can Be Extracted",id:"count-artifacts-that-can-be-extracted",level:2},{value:"Maximize the Topmost Element After K Moves",id:"maximize-the-topmost-element-after-k-moves",level:2},{value:"Maximize Number of Subsequences in a String",id:"maximize-number-of-subsequences-in-a-string",level:2},{value:"Minimum Operations to Halve Array Sum",id:"minimum-operations-to-halve-array-sum",level:2},{value:"Count Collisions on a Road",id:"count-collisions-on-a-road",level:2},{value:"Maximum Points in an Archery Competition",id:"maximum-points-in-an-archery-competition",level:2},{value:"Minimum Health to Beat Game",id:"minimum-health-to-beat-game",level:2},{value:"Minimum Deletions to Make Array Beautiful",id:"minimum-deletions-to-make-array-beautiful",level:2},{value:"Find Palindrome With Fixed Length",id:"find-palindrome-with-fixed-length",level:2},{value:"Maximum Sum Score of Array",id:"maximum-sum-score-of-array",level:2},{value:"Find Triangular Sum of an Array",id:"find-triangular-sum-of-an-array",level:2},{value:"Number of Ways to Select Buildings",id:"number-of-ways-to-select-buildings",level:2},{value:"Find Players With Zero or One Losses",id:"find-players-with-zero-or-one-losses",level:2},{value:"Maximum Candies Allocated to K Children",id:"maximum-candies-allocated-to-k-children",level:2},{value:"Users With Two Purchases Within Seven Days",id:"users-with-two-purchases-within-seven-days",level:2},{value:"Minimize Result by Adding Parentheses to Expression",id:"minimize-result-by-adding-parentheses-to-expression",level:2},{value:"Maximum Product After K Increments",id:"maximum-product-after-k-increments",level:2},{value:"Count Positions on Street With Required Brightness",id:"count-positions-on-street-with-required-brightness",level:2},{value:"Number of Times a Driver Was a Passenger",id:"number-of-times-a-driver-was-a-passenger",level:2},{value:"Number of Ways to Buy Pens and Pencils",id:"number-of-ways-to-buy-pens-and-pencils",level:2},{value:"Design an ATM Machine",id:"design-an-atm-machine",level:2},{value:"Minimum Rounds to Complete All Tasks",id:"minimum-rounds-to-complete-all-tasks",level:2},{value:"Maximum Trailing Zeros in a Cornered Path",id:"maximum-trailing-zeros-in-a-cornered-path",level:2},{value:"Count Lattice Points Inside a Circle",id:"count-lattice-points-inside-a-circle",level:2},{value:"Count Number of Rectangles Containing Each Point",id:"count-number-of-rectangles-containing-each-point",level:2},{value:"Minimum Average Difference",id:"minimum-average-difference",level:2},{value:"Count Unguarded Cells in the Grid",id:"count-unguarded-cells-in-the-grid",level:2},{value:"Minimum Consecutive Cards to Pick Up",id:"minimum-consecutive-cards-to-pick-up",level:2},{value:"K Divisible Elements Subarrays",id:"k-divisible-elements-subarrays",level:2},{value:"Count Nodes Equal to Average of Subtree",id:"count-nodes-equal-to-average-of-subtree",level:2},{value:"Count Number of Texts",id:"count-number-of-texts",level:2},{value:"Minimum Number of Keypresses",id:"minimum-number-of-keypresses",level:2},{value:"Number of Ways to Split Array",id:"number-of-ways-to-split-array",level:2},{value:"Maximum White Tiles Covered by a Carpet",id:"maximum-white-tiles-covered-by-a-carpet",level:2},{value:"Maximum Consecutive Floors Without Special Floors",id:"maximum-consecutive-floors-without-special-floors",level:2},{value:"Largest Combination With Bitwise AND Greater Than Zero",id:"largest-combination-with-bitwise-and-greater-than-zero",level:2},{value:"Maximum Bags With Full Capacity of Rocks",id:"maximum-bags-with-full-capacity-of-rocks",level:2},{value:"Minimum Lines to Represent a Line Chart",id:"minimum-lines-to-represent-a-line-chart",level:2},{value:"Number of People That Can Be Seen in a Grid",id:"number-of-people-that-can-be-seen-in-a-grid",level:2},{value:"Sender With Largest Word Count",id:"sender-with-largest-word-count",level:2},{value:"Maximum Total Importance of Roads",id:"maximum-total-importance-of-roads",level:2},{value:"Apply Discount to Prices",id:"apply-discount-to-prices",level:2},{value:"Steps to Make Array Non-decreasing",id:"steps-to-make-array-non-decreasing",level:2},{value:"Maximum Profit From Trading Stocks",id:"maximum-profit-from-trading-stocks",level:2},{value:"Products With Three or More Orders in Two Consecutive Years",id:"products-with-three-or-more-orders-in-two-consecutive-years",level:2},{value:"Partition Array Such That Maximum Difference Is K",id:"partition-array-such-that-maximum-difference-is-k",level:2},{value:"Replace Elements in an Array",id:"replace-elements-in-an-array",level:2},{value:"Jump Game IX",id:"jump-game-ix",level:2},{value:"Resources",id:"resources",level:2}],g={toc:m};function h(e){var i=e.components,a=(0,r.Z)(e,l);return(0,n.kt)("wrapper",(0,t.Z)({},g,a,{components:i,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This will cover up all the medium questions that are available on Leetcode."),(0,n.kt)("h2",{id:"add-two-numbers"},"Add Two Numbers"),(0,n.kt)("p",null,"Tags: Linked List, Math, Recursion"),(0,n.kt)("h3",{id:"inputs"},"Inputs"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n")),(0,n.kt)("h3",{id:"process"},"Process"),(0,n.kt)("h3",{id:"edge-cases"},"Edge Cases"),(0,n.kt)("h2",{id:"longest-substring-without-repeating-characters"},"Longest Substring Without Repeating Characters"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sliding Window"),(0,n.kt)("h2",{id:"longest-palindromic-substring"},"Longest Palindromic Substring"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"zigzag-conversion"},"Zigzag Conversion"),(0,n.kt)("p",null,"Tags: String"),(0,n.kt)("h2",{id:"reverse-integer"},"Reverse Integer"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"string-to-integer-atoi"},"String to Integer (atoi)"),(0,n.kt)("p",null,"Tags: String"),(0,n.kt)("h2",{id:"container-with-most-water"},"Container With Most Water"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Greedy"),(0,n.kt)("h2",{id:"integer-to-roman"},"Integer to Roman"),(0,n.kt)("p",null,"Tags: Hash Table, Math, String"),(0,n.kt)("h2",{id:"3sum"},"3Sum"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"3sum-closest"},"3Sum Closest"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"letter-combinations-of-a-phone-number"},"Letter Combinations of a Phone Number"),(0,n.kt)("p",null,"Tags: Hash Table, String, Backtracking"),(0,n.kt)("h2",{id:"4sum"},"4Sum"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"remove-nth-node-from-end-of-list"},"Remove Nth Node From End of List"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers"),(0,n.kt)("h2",{id:"generate-parentheses"},"Generate Parentheses"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Backtracking"),(0,n.kt)("h2",{id:"swap-nodes-in-pairs"},"Swap Nodes in Pairs"),(0,n.kt)("p",null,"Tags: Linked List, Recursion"),(0,n.kt)("h2",{id:"divide-two-integers"},"Divide Two Integers"),(0,n.kt)("p",null,"Tags: Math, Bit Manipulation"),(0,n.kt)("h2",{id:"next-permutation"},"Next Permutation"),(0,n.kt)("p",null,"Tags: Array, Two Pointers"),(0,n.kt)("h2",{id:"search-in-rotated-sorted-array"},"Search in Rotated Sorted Array"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"find-first-and-last-position-of-element-in-sorted-array"},"Find First and Last Position of Element in Sorted Array"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"valid-sudoku"},"Valid Sudoku"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Matrix"),(0,n.kt)("h2",{id:"count-and-say"},"Count and Say"),(0,n.kt)("p",null,"Tags: String"),(0,n.kt)("h2",{id:"combination-sum"},"Combination Sum"),(0,n.kt)("p",null,"Tags: Array, Backtracking"),(0,n.kt)("h2",{id:"combination-sum-ii"},"Combination Sum II"),(0,n.kt)("p",null,"Tags: Array, Backtracking"),(0,n.kt)("h2",{id:"multiply-strings"},"Multiply Strings"),(0,n.kt)("p",null,"Tags: Math, String, Simulation"),(0,n.kt)("h2",{id:"jump-game-ii"},"Jump Game II"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"permutations"},"Permutations"),(0,n.kt)("p",null,"Tags: Array, Backtracking"),(0,n.kt)("h2",{id:"permutations-ii"},"Permutations II"),(0,n.kt)("p",null,"Tags: Array, Backtracking"),(0,n.kt)("h2",{id:"rotate-image"},"Rotate Image"),(0,n.kt)("p",null,"Tags: Array, Math, Matrix"),(0,n.kt)("h2",{id:"group-anagrams"},"Group Anagrams"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Sorting"),(0,n.kt)("h2",{id:"powx-n"},"Pow(x, n)"),(0,n.kt)("p",null,"Tags: Math, Recursion"),(0,n.kt)("h2",{id:"spiral-matrix"},"Spiral Matrix"),(0,n.kt)("p",null,"Tags: Array, Matrix, Simulation"),(0,n.kt)("h2",{id:"jump-game"},"Jump Game"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"merge-intervals"},"Merge Intervals"),(0,n.kt)("p",null,"Tags: Array, Sorting"),(0,n.kt)("h2",{id:"insert-interval"},"Insert Interval"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"spiral-matrix-ii"},"Spiral Matrix II"),(0,n.kt)("p",null,"Tags: Array, Matrix, Simulation"),(0,n.kt)("h2",{id:"rotate-list"},"Rotate List"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers"),(0,n.kt)("h2",{id:"unique-paths"},"Unique Paths"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Combinatorics"),(0,n.kt)("h2",{id:"unique-paths-ii"},"Unique Paths II"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"minimum-path-sum"},"Minimum Path Sum"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"simplify-path"},"Simplify Path"),(0,n.kt)("p",null,"Tags: String, Stack"),(0,n.kt)("h2",{id:"set-matrix-zeroes"},"Set Matrix Zeroes"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Matrix"),(0,n.kt)("h2",{id:"search-a-2d-matrix"},"Search a 2D Matrix"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Matrix"),(0,n.kt)("h2",{id:"sort-colors"},"Sort Colors"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"combinations"},"Combinations"),(0,n.kt)("p",null,"Tags: Backtracking"),(0,n.kt)("h2",{id:"subsets"},"Subsets"),(0,n.kt)("p",null,"Tags: Array, Backtracking, Bit Manipulation"),(0,n.kt)("h2",{id:"word-search"},"Word Search"),(0,n.kt)("p",null,"Tags: Array, Backtracking, Matrix"),(0,n.kt)("h2",{id:"remove-duplicates-from-sorted-array-ii"},"Remove Duplicates from Sorted Array II"),(0,n.kt)("p",null,"Tags: Array, Two Pointers"),(0,n.kt)("h2",{id:"search-in-rotated-sorted-array-ii"},"Search in Rotated Sorted Array II"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"remove-duplicates-from-sorted-list-ii"},"Remove Duplicates from Sorted List II"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers"),(0,n.kt)("h2",{id:"partition-list"},"Partition List"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers"),(0,n.kt)("h2",{id:"gray-code"},"Gray Code"),(0,n.kt)("p",null,"Tags: Math, Backtracking, Bit Manipulation"),(0,n.kt)("h2",{id:"subsets-ii"},"Subsets II"),(0,n.kt)("p",null,"Tags: Array, Backtracking, Bit Manipulation"),(0,n.kt)("h2",{id:"decode-ways"},"Decode Ways"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"reverse-linked-list-ii"},"Reverse Linked List II"),(0,n.kt)("p",null,"Tags: Linked List"),(0,n.kt)("h2",{id:"restore-ip-addresses"},"Restore IP Addresses"),(0,n.kt)("p",null,"Tags: String, Backtracking"),(0,n.kt)("h2",{id:"unique-binary-search-trees-ii"},"Unique Binary Search Trees II"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Backtracking, Tree, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"unique-binary-search-trees"},"Unique Binary Search Trees"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Tree, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"interleaving-string"},"Interleaving String"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"validate-binary-search-tree"},"Validate Binary Search Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"recover-binary-search-tree"},"Recover Binary Search Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"binary-tree-level-order-traversal"},"Binary Tree Level Order Traversal"),(0,n.kt)("p",null,"Tags: Tree, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"binary-tree-zigzag-level-order-traversal"},"Binary Tree Zigzag Level Order Traversal"),(0,n.kt)("p",null,"Tags: Tree, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"construct-binary-tree-from-preorder-and-inorder-traversal"},"Construct Binary Tree from Preorder and Inorder Traversal"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Divide and Conquer, Tree, Binary Tree"),(0,n.kt)("h2",{id:"construct-binary-tree-from-inorder-and-postorder-traversal"},"Construct Binary Tree from Inorder and Postorder Traversal"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Divide and Conquer, Tree, Binary Tree"),(0,n.kt)("h2",{id:"binary-tree-level-order-traversal-ii"},"Binary Tree Level Order Traversal II"),(0,n.kt)("p",null,"Tags: Tree, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"convert-sorted-list-to-binary-search-tree"},"Convert Sorted List to Binary Search Tree"),(0,n.kt)("p",null,"Tags: Linked List, Divide and Conquer, Tree, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"path-sum-ii"},"Path Sum II"),(0,n.kt)("p",null,"Tags: Backtracking, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"flatten-binary-tree-to-linked-list"},"Flatten Binary Tree to Linked List"),(0,n.kt)("p",null,"Tags: Linked List, Stack, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"populating-next-right-pointers-in-each-node"},"Populating Next Right Pointers in Each Node"),(0,n.kt)("p",null,"Tags: Linked List, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"populating-next-right-pointers-in-each-node-ii"},"Populating Next Right Pointers in Each Node II"),(0,n.kt)("p",null,"Tags: Linked List, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"triangle"},"Triangle"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"best-time-to-buy-and-sell-stock-ii"},"Best Time to Buy and Sell Stock II"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"longest-consecutive-sequence"},"Longest Consecutive Sequence"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Union Find"),(0,n.kt)("h2",{id:"sum-root-to-leaf-numbers"},"Sum Root to Leaf Numbers"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"surrounded-regions"},"Surrounded Regions"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Matrix"),(0,n.kt)("h2",{id:"palindrome-partitioning"},"Palindrome Partitioning"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Backtracking"),(0,n.kt)("h2",{id:"clone-graph"},"Clone Graph"),(0,n.kt)("p",null,"Tags: Hash Table, Depth-First Search, Breadth-First Search, Graph"),(0,n.kt)("h2",{id:"gas-station"},"Gas Station"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"single-number-ii"},"Single Number II"),(0,n.kt)("p",null,"Tags: Array, Bit Manipulation"),(0,n.kt)("h2",{id:"copy-list-with-random-pointer"},"Copy List with Random Pointer"),(0,n.kt)("p",null,"Tags: Hash Table, Linked List"),(0,n.kt)("h2",{id:"word-break"},"Word Break"),(0,n.kt)("p",null,"Tags: Hash Table, String, Dynamic Programming, Trie, Memoization"),(0,n.kt)("h2",{id:"linked-list-cycle-ii"},"Linked List Cycle II"),(0,n.kt)("p",null,"Tags: Hash Table, Linked List, Two Pointers"),(0,n.kt)("h2",{id:"reorder-list"},"Reorder List"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers, Stack, Recursion"),(0,n.kt)("h2",{id:"lru-cache"},"LRU Cache"),(0,n.kt)("p",null,"Tags: Hash Table, Linked List, Design, Doubly-Linked List"),(0,n.kt)("h2",{id:"insertion-sort-list"},"Insertion Sort List"),(0,n.kt)("p",null,"Tags: Linked List, Sorting"),(0,n.kt)("h2",{id:"sort-list"},"Sort List"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers, Divide and Conquer, Sorting, Merge Sort"),(0,n.kt)("h2",{id:"evaluate-reverse-polish-notation"},"Evaluate Reverse Polish Notation"),(0,n.kt)("p",null,"Tags: Array, Math, Stack"),(0,n.kt)("h2",{id:"reverse-words-in-a-string"},"Reverse Words in a String"),(0,n.kt)("p",null,"Tags: Two Pointers, String"),(0,n.kt)("h2",{id:"maximum-product-subarray"},"Maximum Product Subarray"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"find-minimum-in-rotated-sorted-array"},"Find Minimum in Rotated Sorted Array"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"binary-tree-upside-down"},"Binary Tree Upside Down"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"longest-substring-with-at-most-two-distinct-characters"},"Longest Substring with At Most Two Distinct Characters"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sliding Window"),(0,n.kt)("h2",{id:"one-edit-distance"},"One Edit Distance"),(0,n.kt)("p",null,"Tags: Two Pointers, String"),(0,n.kt)("h2",{id:"find-peak-element"},"Find Peak Element"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"compare-version-numbers"},"Compare Version Numbers"),(0,n.kt)("p",null,"Tags: Two Pointers, String"),(0,n.kt)("h2",{id:"fraction-to-recurring-decimal"},"Fraction to Recurring Decimal"),(0,n.kt)("p",null,"Tags: Hash Table, Math, String"),(0,n.kt)("h2",{id:"two-sum-ii---input-array-is-sorted"},"Two Sum II - Input Array Is Sorted"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search"),(0,n.kt)("h2",{id:"factorial-trailing-zeroes"},"Factorial Trailing Zeroes"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"binary-search-tree-iterator"},"Binary Search Tree Iterator"),(0,n.kt)("p",null,"Tags: Stack, Tree, Design, Binary Search Tree, Binary Tree, Iterator"),(0,n.kt)("h2",{id:"second-highest-salary"},"Second Highest Salary"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"nth-highest-salary"},"Nth Highest Salary"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"rank-scores"},"Rank Scores"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"largest-number"},"Largest Number"),(0,n.kt)("p",null,"Tags: String, Greedy, Sorting"),(0,n.kt)("h2",{id:"consecutive-numbers"},"Consecutive Numbers"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"department-highest-salary"},"Department Highest Salary"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"reverse-words-in-a-string-ii"},"Reverse Words in a String II"),(0,n.kt)("p",null,"Tags: Two Pointers, String"),(0,n.kt)("h2",{id:"repeated-dna-sequences"},"Repeated DNA Sequences"),(0,n.kt)("p",null,"Tags: Hash Table, String, Bit Manipulation, Sliding Window, Rolling Hash, Hash Function"),(0,n.kt)("h2",{id:"rotate-array"},"Rotate Array"),(0,n.kt)("p",null,"Tags: Array, Math, Two Pointers"),(0,n.kt)("h2",{id:"word-frequency"},"Word Frequency"),(0,n.kt)("p",null,"Tags: Shell"),(0,n.kt)("h2",{id:"transpose-file"},"Transpose File"),(0,n.kt)("p",null,"Tags: Shell"),(0,n.kt)("h2",{id:"house-robber"},"House Robber"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"binary-tree-right-side-view"},"Binary Tree Right Side View"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"number-of-islands"},"Number of Islands"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Matrix"),(0,n.kt)("h2",{id:"bitwise-and-of-numbers-range"},"Bitwise AND of Numbers Range"),(0,n.kt)("p",null,"Tags: Bit Manipulation"),(0,n.kt)("h2",{id:"count-primes"},"Count Primes"),(0,n.kt)("p",null,"Tags: Array, Math, Enumeration, Number Theory"),(0,n.kt)("h2",{id:"course-schedule"},"Course Schedule"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Topological Sort"),(0,n.kt)("h2",{id:"implement-trie-prefix-tree"},"Implement Trie (Prefix Tree)"),(0,n.kt)("p",null,"Tags: Hash Table, String, Design, Trie"),(0,n.kt)("h2",{id:"minimum-size-subarray-sum"},"Minimum Size Subarray Sum"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sliding Window, Prefix Sum"),(0,n.kt)("h2",{id:"course-schedule-ii"},"Course Schedule II"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Topological Sort"),(0,n.kt)("h2",{id:"design-add-and-search-words-data-structure"},"Design Add and Search Words Data Structure"),(0,n.kt)("p",null,"Tags: String, Depth-First Search, Design, Trie"),(0,n.kt)("h2",{id:"house-robber-ii"},"House Robber II"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"kth-largest-element-in-an-array"},"Kth Largest Element in an Array"),(0,n.kt)("p",null,"Tags: Array, Divide and Conquer, Sorting, Heap (Priority Queue), Quickselect"),(0,n.kt)("h2",{id:"combination-sum-iii"},"Combination Sum III"),(0,n.kt)("p",null,"Tags: Array, Backtracking"),(0,n.kt)("h2",{id:"contains-duplicate-iii"},"Contains Duplicate III"),(0,n.kt)("p",null,"Tags: Array, Sliding Window, Sorting, Bucket Sort, Ordered Set"),(0,n.kt)("h2",{id:"maximal-square"},"Maximal Square"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"count-complete-tree-nodes"},"Count Complete Tree Nodes"),(0,n.kt)("p",null,"Tags: Binary Search, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"rectangle-area"},"Rectangle Area"),(0,n.kt)("p",null,"Tags: Math, Geometry"),(0,n.kt)("h2",{id:"basic-calculator-ii"},"Basic Calculator II"),(0,n.kt)("p",null,"Tags: Math, String, Stack"),(0,n.kt)("h2",{id:"majority-element-ii"},"Majority Element II"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Sorting, Counting"),(0,n.kt)("h2",{id:"kth-smallest-element-in-a-bst"},"Kth Smallest Element in a BST"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"lowest-common-ancestor-of-a-binary-tree"},"Lowest Common Ancestor of a Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"product-of-array-except-self"},"Product of Array Except Self"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"search-a-2d-matrix-ii"},"Search a 2D Matrix II"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Divide and Conquer, Matrix"),(0,n.kt)("h2",{id:"different-ways-to-add-parentheses"},"Different Ways to Add Parentheses"),(0,n.kt)("p",null,"Tags: Math, String, Dynamic Programming, Recursion, Memoization"),(0,n.kt)("h2",{id:"shortest-word-distance-ii"},"Shortest Word Distance II"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Two Pointers, String, Design"),(0,n.kt)("h2",{id:"shortest-word-distance-iii"},"Shortest Word Distance III"),(0,n.kt)("p",null,"Tags: Array, String"),(0,n.kt)("h2",{id:"strobogrammatic-number-ii"},"Strobogrammatic Number II"),(0,n.kt)("p",null,"Tags: Array, String, Recursion"),(0,n.kt)("h2",{id:"group-shifted-strings"},"Group Shifted Strings"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String"),(0,n.kt)("h2",{id:"count-univalue-subtrees"},"Count Univalue Subtrees"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"flatten-2d-vector"},"Flatten 2D Vector"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Design, Iterator"),(0,n.kt)("h2",{id:"meeting-rooms-ii"},"Meeting Rooms II"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Greedy, Sorting, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"factor-combinations"},"Factor Combinations"),(0,n.kt)("p",null,"Tags: Array, Backtracking"),(0,n.kt)("h2",{id:"verify-preorder-sequence-in-binary-search-tree"},"Verify Preorder Sequence in Binary Search Tree"),(0,n.kt)("p",null,"Tags: Stack, Tree, Binary Search Tree, Recursion, Monotonic Stack, Binary Tree"),(0,n.kt)("h2",{id:"paint-house"},"Paint House"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"3sum-smaller"},"3Sum Smaller"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Sorting"),(0,n.kt)("h2",{id:"single-number-iii"},"Single Number III"),(0,n.kt)("p",null,"Tags: Array, Bit Manipulation"),(0,n.kt)("h2",{id:"graph-valid-tree"},"Graph Valid Tree"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Union Find, Graph"),(0,n.kt)("h2",{id:"ugly-number-ii"},"Ugly Number II"),(0,n.kt)("p",null,"Tags: Hash Table, Math, Dynamic Programming, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"palindrome-permutation-ii"},"Palindrome Permutation II"),(0,n.kt)("p",null,"Tags: Hash Table, String, Backtracking"),(0,n.kt)("h2",{id:"encode-and-decode-strings"},"Encode and Decode Strings"),(0,n.kt)("p",null,"Tags: Array, String, Design"),(0,n.kt)("h2",{id:"h-index"},"H-Index"),(0,n.kt)("p",null,"Tags: Array, Sorting, Counting Sort"),(0,n.kt)("h2",{id:"h-index-ii"},"H-Index II"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"paint-fence"},"Paint Fence"),(0,n.kt)("p",null,"Tags: Dynamic Programming"),(0,n.kt)("h2",{id:"find-the-celebrity"},"Find the Celebrity"),(0,n.kt)("p",null,"Tags: Two Pointers, Greedy, Graph, Interactive"),(0,n.kt)("h2",{id:"perfect-squares"},"Perfect Squares"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Breadth-First Search"),(0,n.kt)("h2",{id:"wiggle-sort"},"Wiggle Sort"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"zigzag-iterator"},"Zigzag Iterator"),(0,n.kt)("p",null,"Tags: Array, Design, Queue, Iterator"),(0,n.kt)("h2",{id:"peeking-iterator"},"Peeking Iterator"),(0,n.kt)("p",null,"Tags: Array, Design, Iterator"),(0,n.kt)("h2",{id:"inorder-successor-in-bst"},"Inorder Successor in BST"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"walls-and-gates"},"Walls and Gates"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"find-the-duplicate-number"},"Find the Duplicate Number"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Bit Manipulation"),(0,n.kt)("h2",{id:"unique-word-abbreviation"},"Unique Word Abbreviation"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Design"),(0,n.kt)("h2",{id:"game-of-life"},"Game of Life"),(0,n.kt)("p",null,"Tags: Array, Matrix, Simulation"),(0,n.kt)("h2",{id:"word-pattern-ii"},"Word Pattern II"),(0,n.kt)("p",null,"Tags: Hash Table, String, Backtracking"),(0,n.kt)("h2",{id:"flip-game-ii"},"Flip Game II"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Backtracking, Memoization, Game Theory"),(0,n.kt)("h2",{id:"binary-tree-longest-consecutive-sequence"},"Binary Tree Longest Consecutive Sequence"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"bulls-and-cows"},"Bulls and Cows"),(0,n.kt)("p",null,"Tags: Hash Table, String, Counting"),(0,n.kt)("h2",{id:"longest-increasing-subsequence"},"Longest Increasing Subsequence"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Dynamic Programming"),(0,n.kt)("h2",{id:"range-sum-query-2d---immutable"},"Range Sum Query 2D - Immutable"),(0,n.kt)("p",null,"Tags: Array, Design, Matrix, Prefix Sum"),(0,n.kt)("h2",{id:"additive-number"},"Additive Number"),(0,n.kt)("p",null,"Tags: String, Backtracking"),(0,n.kt)("h2",{id:"range-sum-query---mutable"},"Range Sum Query - Mutable"),(0,n.kt)("p",null,"Tags: Array, Design, Binary Indexed Tree, Segment Tree"),(0,n.kt)("h2",{id:"best-time-to-buy-and-sell-stock-with-cooldown"},"Best Time to Buy and Sell Stock with Cooldown"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"minimum-height-trees"},"Minimum Height Trees"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Topological Sort"),(0,n.kt)("h2",{id:"sparse-matrix-multiplication"},"Sparse Matrix Multiplication"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Matrix"),(0,n.kt)("h2",{id:"super-ugly-number"},"Super Ugly Number"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming"),(0,n.kt)("h2",{id:"binary-tree-vertical-order-traversal"},"Binary Tree Vertical Order Traversal"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"remove-duplicate-letters"},"Remove Duplicate Letters"),(0,n.kt)("p",null,"Tags: String, Stack, Greedy, Monotonic Stack"),(0,n.kt)("h2",{id:"maximum-product-of-word-lengths"},"Maximum Product of Word Lengths"),(0,n.kt)("p",null,"Tags: Array, String, Bit Manipulation"),(0,n.kt)("h2",{id:"bulb-switcher"},"Bulb Switcher"),(0,n.kt)("p",null,"Tags: Math, Brainteaser"),(0,n.kt)("h2",{id:"generalized-abbreviation"},"Generalized Abbreviation"),(0,n.kt)("p",null,"Tags: String, Backtracking, Bit Manipulation"),(0,n.kt)("h2",{id:"coin-change"},"Coin Change"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Breadth-First Search"),(0,n.kt)("h2",{id:"number-of-connected-components-in-an-undirected-graph"},"Number of Connected Components in an Undirected Graph"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Union Find, Graph"),(0,n.kt)("h2",{id:"wiggle-sort-ii"},"Wiggle Sort II"),(0,n.kt)("p",null,"Tags: Array, Divide and Conquer, Sorting, Quickselect"),(0,n.kt)("h2",{id:"maximum-size-subarray-sum-equals-k"},"Maximum Size Subarray Sum Equals k"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"odd-even-linked-list"},"Odd Even Linked List"),(0,n.kt)("p",null,"Tags: Linked List"),(0,n.kt)("h2",{id:"verify-preorder-serialization-of-a-binary-tree"},"Verify Preorder Serialization of a Binary Tree"),(0,n.kt)("p",null,"Tags: String, Stack, Tree, Binary Tree"),(0,n.kt)("h2",{id:"largest-bst-subtree"},"Largest BST Subtree"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"increasing-triplet-subsequence"},"Increasing Triplet Subsequence"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"house-robber-iii"},"House Robber III"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"nested-list-weight-sum"},"Nested List Weight Sum"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"longest-substring-with-at-most-k-distinct-characters"},"Longest Substring with At Most K Distinct Characters"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sliding Window"),(0,n.kt)("h2",{id:"flatten-nested-list-iterator"},"Flatten Nested List Iterator"),(0,n.kt)("p",null,"Tags: Stack, Tree, Depth-First Search, Design, Queue, Iterator"),(0,n.kt)("h2",{id:"integer-break"},"Integer Break"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming"),(0,n.kt)("h2",{id:"top-k-frequent-elements"},"Top K Frequent Elements"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Divide and Conquer, Sorting, Heap (Priority Queue), Bucket Sort, Counting, Quickselect"),(0,n.kt)("h2",{id:"design-tic-tac-toe"},"Design Tic-Tac-Toe"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Design, Matrix"),(0,n.kt)("h2",{id:"android-unlock-patterns"},"Android Unlock Patterns"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Backtracking"),(0,n.kt)("h2",{id:"design-snake-game"},"Design Snake Game"),(0,n.kt)("p",null,"Tags: Array, Design, Queue, Matrix"),(0,n.kt)("h2",{id:"design-twitter"},"Design Twitter"),(0,n.kt)("p",null,"Tags: Hash Table, Linked List, Design, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"line-reflection"},"Line Reflection"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math"),(0,n.kt)("h2",{id:"count-numbers-with-unique-digits"},"Count Numbers with Unique Digits"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Backtracking"),(0,n.kt)("h2",{id:"sort-transformed-array"},"Sort Transformed Array"),(0,n.kt)("p",null,"Tags: Array, Math, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"bomb-enemy"},"Bomb Enemy"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"design-hit-counter"},"Design Hit Counter"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Binary Search, Design, Queue"),(0,n.kt)("h2",{id:"nested-list-weight-sum-ii"},"Nested List Weight Sum II"),(0,n.kt)("p",null,"Tags: Stack, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"water-and-jug-problem"},"Water and Jug Problem"),(0,n.kt)("p",null,"Tags: Math, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"find-leaves-of-binary-tree"},"Find Leaves of Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"largest-divisible-subset"},"Largest Divisible Subset"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming, Sorting"),(0,n.kt)("h2",{id:"plus-one-linked-list"},"Plus One Linked List"),(0,n.kt)("p",null,"Tags: Linked List, Math"),(0,n.kt)("h2",{id:"range-addition"},"Range Addition"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"sum-of-two-integers"},"Sum of Two Integers"),(0,n.kt)("p",null,"Tags: Math, Bit Manipulation"),(0,n.kt)("h2",{id:"super-pow"},"Super Pow"),(0,n.kt)("p",null,"Tags: Math, Divide and Conquer"),(0,n.kt)("h2",{id:"find-k-pairs-with-smallest-sums"},"Find K Pairs with Smallest Sums"),(0,n.kt)("p",null,"Tags: Array, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"guess-number-higher-or-lower-ii"},"Guess Number Higher or Lower II"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Game Theory"),(0,n.kt)("h2",{id:"wiggle-subsequence"},"Wiggle Subsequence"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"combination-sum-iv"},"Combination Sum IV"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"kth-smallest-element-in-a-sorted-matrix"},"Kth Smallest Element in a Sorted Matrix"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sorting, Heap (Priority Queue), Matrix"),(0,n.kt)("h2",{id:"design-phone-directory"},"Design Phone Directory"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Linked List, Design, Queue"),(0,n.kt)("h2",{id:"insert-delete-getrandom-o1"},"Insert Delete GetRandom O(1)"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Design, Randomized"),(0,n.kt)("h2",{id:"linked-list-random-node"},"Linked List Random Node"),(0,n.kt)("p",null,"Tags: Linked List, Math, Reservoir Sampling, Randomized"),(0,n.kt)("h2",{id:"shuffle-an-array"},"Shuffle an Array"),(0,n.kt)("p",null,"Tags: Array, Math, Randomized"),(0,n.kt)("h2",{id:"mini-parser"},"Mini Parser"),(0,n.kt)("p",null,"Tags: String, Stack, Depth-First Search"),(0,n.kt)("h2",{id:"lexicographical-numbers"},"Lexicographical Numbers"),(0,n.kt)("p",null,"Tags: Depth-First Search, Trie"),(0,n.kt)("h2",{id:"longest-absolute-file-path"},"Longest Absolute File Path"),(0,n.kt)("p",null,"Tags: String, Stack, Depth-First Search"),(0,n.kt)("h2",{id:"elimination-game"},"Elimination Game"),(0,n.kt)("p",null,"Tags: Math, Recursion"),(0,n.kt)("h2",{id:"utf-8-validation"},"UTF-8 Validation"),(0,n.kt)("p",null,"Tags: Array, Bit Manipulation"),(0,n.kt)("h2",{id:"decode-string"},"Decode String"),(0,n.kt)("p",null,"Tags: String, Stack, Recursion"),(0,n.kt)("h2",{id:"longest-substring-with-at-least-k-repeating-characters"},"Longest Substring with At Least K Repeating Characters"),(0,n.kt)("p",null,"Tags: Hash Table, String, Divide and Conquer, Sliding Window"),(0,n.kt)("h2",{id:"rotate-function"},"Rotate Function"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming"),(0,n.kt)("h2",{id:"integer-replacement"},"Integer Replacement"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Greedy, Bit Manipulation, Memoization"),(0,n.kt)("h2",{id:"random-pick-index"},"Random Pick Index"),(0,n.kt)("p",null,"Tags: Hash Table, Math, Reservoir Sampling, Randomized"),(0,n.kt)("h2",{id:"evaluate-division"},"Evaluate Division"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Graph, Shortest Path"),(0,n.kt)("h2",{id:"nth-digit"},"Nth Digit"),(0,n.kt)("p",null,"Tags: Math, Binary Search"),(0,n.kt)("h2",{id:"remove-k-digits"},"Remove K Digits"),(0,n.kt)("p",null,"Tags: String, Stack, Greedy, Monotonic Stack"),(0,n.kt)("h2",{id:"queue-reconstruction-by-height"},"Queue Reconstruction by Height"),(0,n.kt)("p",null,"Tags: Array, Greedy, Binary Indexed Tree, Segment Tree, Sorting"),(0,n.kt)("h2",{id:"arithmetic-slices"},"Arithmetic Slices"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"partition-equal-subset-sum"},"Partition Equal Subset Sum"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"pacific-atlantic-water-flow"},"Pacific Atlantic Water Flow"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"sentence-screen-fitting"},"Sentence Screen Fitting"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Simulation"),(0,n.kt)("h2",{id:"battleships-in-a-board"},"Battleships in a Board"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Matrix"),(0,n.kt)("h2",{id:"maximum-xor-of-two-numbers-in-an-array"},"Maximum XOR of Two Numbers in an Array"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Bit Manipulation, Trie"),(0,n.kt)("h2",{id:"reconstruct-original-digits-from-english"},"Reconstruct Original Digits from English"),(0,n.kt)("p",null,"Tags: Hash Table, Math, String"),(0,n.kt)("h2",{id:"longest-repeating-character-replacement"},"Longest Repeating Character Replacement"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sliding Window"),(0,n.kt)("h2",{id:"convert-binary-search-tree-to-sorted-doubly-linked-list"},"Convert Binary Search Tree to Sorted Doubly Linked List"),(0,n.kt)("p",null,"Tags: Linked List, Stack, Tree, Depth-First Search, Binary Search Tree, Binary Tree, Doubly-Linked List"),(0,n.kt)("h2",{id:"construct-quad-tree"},"Construct Quad Tree"),(0,n.kt)("p",null,"Tags: Array, Divide and Conquer, Tree, Matrix"),(0,n.kt)("h2",{id:"n-ary-tree-level-order-traversal"},"N-ary Tree Level Order Traversal"),(0,n.kt)("p",null,"Tags: Tree, Breadth-First Search"),(0,n.kt)("h2",{id:"flatten-a-multilevel-doubly-linked-list"},"Flatten a Multilevel Doubly Linked List"),(0,n.kt)("p",null,"Tags: Linked List, Depth-First Search, Doubly-Linked List"),(0,n.kt)("h2",{id:"minimum-genetic-mutation"},"Minimum Genetic Mutation"),(0,n.kt)("p",null,"Tags: Hash Table, String, Breadth-First Search"),(0,n.kt)("h2",{id:"non-overlapping-intervals"},"Non-overlapping Intervals"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy, Sorting"),(0,n.kt)("h2",{id:"find-right-interval"},"Find Right Interval"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sorting"),(0,n.kt)("h2",{id:"path-sum-iii"},"Path Sum III"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"find-all-anagrams-in-a-string"},"Find All Anagrams in a String"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sliding Window"),(0,n.kt)("h2",{id:"ternary-expression-parser"},"Ternary Expression Parser"),(0,n.kt)("p",null,"Tags: String, Stack, Recursion"),(0,n.kt)("h2",{id:"find-all-duplicates-in-an-array"},"Find All Duplicates in an Array"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"string-compression"},"String Compression"),(0,n.kt)("p",null,"Tags: Two Pointers, String"),(0,n.kt)("h2",{id:"sequence-reconstruction"},"Sequence Reconstruction"),(0,n.kt)("p",null,"Tags: Array, Graph, Topological Sort"),(0,n.kt)("h2",{id:"add-two-numbers-ii"},"Add Two Numbers II"),(0,n.kt)("p",null,"Tags: Linked List, Math, Stack"),(0,n.kt)("h2",{id:"number-of-boomerangs"},"Number of Boomerangs"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math"),(0,n.kt)("h2",{id:"serialize-and-deserialize-bst"},"Serialize and Deserialize BST"),(0,n.kt)("p",null,"Tags: String, Tree, Depth-First Search, Breadth-First Search, Design, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"delete-node-in-a-bst"},"Delete Node in a BST"),(0,n.kt)("p",null,"Tags: Tree, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"sort-characters-by-frequency"},"Sort Characters By Frequency"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sorting, Heap (Priority Queue), Bucket Sort, Counting"),(0,n.kt)("h2",{id:"minimum-number-of-arrows-to-burst-balloons"},"Minimum Number of Arrows to Burst Balloons"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"minimum-moves-to-equal-array-elements"},"Minimum Moves to Equal Array Elements"),(0,n.kt)("p",null,"Tags: Array, Math"),(0,n.kt)("h2",{id:"4sum-ii"},"4Sum II"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"132-pattern"},"132 Pattern"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Stack, Monotonic Stack, Ordered Set"),(0,n.kt)("h2",{id:"circular-array-loop"},"Circular Array Loop"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Two Pointers"),(0,n.kt)("h2",{id:"minimum-moves-to-equal-array-elements-ii"},"Minimum Moves to Equal Array Elements II"),(0,n.kt)("p",null,"Tags: Array, Math, Sorting"),(0,n.kt)("h2",{id:"can-i-win"},"Can I Win"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Bit Manipulation, Memoization, Game Theory, Bitmask"),(0,n.kt)("h2",{id:"unique-substrings-in-wraparound-string"},"Unique Substrings in Wraparound String"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"validate-ip-address"},"Validate IP Address"),(0,n.kt)("p",null,"Tags: String"),(0,n.kt)("h2",{id:"convex-polygon"},"Convex Polygon"),(0,n.kt)("p",null,"Tags: Math, Geometry"),(0,n.kt)("h2",{id:"implement-rand10-using-rand7"},"Implement Rand10() Using Rand7()"),(0,n.kt)("p",null,"Tags: Math, Rejection Sampling, Randomized, Probability and Statistics"),(0,n.kt)("h2",{id:"matchsticks-to-square"},"Matchsticks to Square"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Backtracking, Bit Manipulation, Bitmask"),(0,n.kt)("h2",{id:"ones-and-zeroes"},"Ones and Zeroes"),(0,n.kt)("p",null,"Tags: Array, String, Dynamic Programming"),(0,n.kt)("h2",{id:"heaters"},"Heaters"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Sorting"),(0,n.kt)("h2",{id:"total-hamming-distance"},"Total Hamming Distance"),(0,n.kt)("p",null,"Tags: Array, Math, Bit Manipulation"),(0,n.kt)("h2",{id:"generate-random-point-in-a-circle"},"Generate Random Point in a Circle"),(0,n.kt)("p",null,"Tags: Math, Geometry, Rejection Sampling, Randomized"),(0,n.kt)("h2",{id:"magical-string"},"Magical String"),(0,n.kt)("p",null,"Tags: Two Pointers, String"),(0,n.kt)("h2",{id:"find-permutation"},"Find Permutation"),(0,n.kt)("p",null,"Tags: Array, Stack, Greedy"),(0,n.kt)("h2",{id:"predict-the-winner"},"Predict the Winner"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming, Recursion, Game Theory"),(0,n.kt)("h2",{id:"max-consecutive-ones-ii"},"Max Consecutive Ones II"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Sliding Window"),(0,n.kt)("h2",{id:"the-maze"},"The Maze"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph"),(0,n.kt)("h2",{id:"increasing-subsequences"},"Increasing Subsequences"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Backtracking, Bit Manipulation"),(0,n.kt)("h2",{id:"target-sum"},"Target Sum"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Backtracking"),(0,n.kt)("h2",{id:"random-point-in-non-overlapping-rectangles"},"Random Point in Non-overlapping Rectangles"),(0,n.kt)("p",null,"Tags: Math, Binary Search, Reservoir Sampling, Prefix Sum, Ordered Set, Randomized"),(0,n.kt)("h2",{id:"diagonal-traverse"},"Diagonal Traverse"),(0,n.kt)("p",null,"Tags: Array, Matrix, Simulation"),(0,n.kt)("h2",{id:"next-greater-element-ii"},"Next Greater Element II"),(0,n.kt)("p",null,"Tags: Array, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"the-maze-ii"},"The Maze II"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Heap (Priority Queue), Shortest Path"),(0,n.kt)("h2",{id:"most-frequent-subtree-sum"},"Most Frequent Subtree Sum"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"inorder-successor-in-bst-ii"},"Inorder Successor in BST II"),(0,n.kt)("p",null,"Tags: Tree, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"find-bottom-left-tree-value"},"Find Bottom Left Tree Value"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"find-largest-value-in-each-tree-row"},"Find Largest Value in Each Tree Row"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"longest-palindromic-subsequence"},"Longest Palindromic Subsequence"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"coin-change-2"},"Coin Change 2"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"random-flip-matrix"},"Random Flip Matrix"),(0,n.kt)("p",null,"Tags: Hash Table, Math, Reservoir Sampling, Randomized"),(0,n.kt)("h2",{id:"longest-uncommon-subsequence-ii"},"Longest Uncommon Subsequence II"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Two Pointers, String, Sorting"),(0,n.kt)("h2",{id:"continuous-subarray-sum"},"Continuous Subarray Sum"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Prefix Sum"),(0,n.kt)("h2",{id:"longest-word-in-dictionary-through-deleting"},"Longest Word in Dictionary through Deleting"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, String, Sorting"),(0,n.kt)("h2",{id:"contiguous-array"},"Contiguous Array"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Prefix Sum"),(0,n.kt)("h2",{id:"beautiful-arrangement"},"Beautiful Arrangement"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Backtracking, Bit Manipulation, Bitmask"),(0,n.kt)("h2",{id:"random-pick-with-weight"},"Random Pick with Weight"),(0,n.kt)("p",null,"Tags: Math, Binary Search, Prefix Sum, Randomized"),(0,n.kt)("h2",{id:"minesweeper"},"Minesweeper"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"lonely-pixel-i"},"Lonely Pixel I"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Matrix"),(0,n.kt)("h2",{id:"k-diff-pairs-in-an-array"},"K-diff Pairs in an Array"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Two Pointers, Binary Search, Sorting"),(0,n.kt)("h2",{id:"lonely-pixel-ii"},"Lonely Pixel II"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Matrix"),(0,n.kt)("h2",{id:"game-play-analysis-iii"},"Game Play Analysis III"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"encode-and-decode-tinyurl"},"Encode and Decode TinyURL"),(0,n.kt)("p",null,"Tags: Hash Table, String, Design, Hash Function"),(0,n.kt)("h2",{id:"construct-binary-tree-from-string"},"Construct Binary Tree from String"),(0,n.kt)("p",null,"Tags: String, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"complex-number-multiplication"},"Complex Number Multiplication"),(0,n.kt)("p",null,"Tags: Math, String, Simulation"),(0,n.kt)("h2",{id:"convert-bst-to-greater-tree"},"Convert BST to Greater Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"minimum-time-difference"},"Minimum Time Difference"),(0,n.kt)("p",null,"Tags: Array, Math, String, Sorting"),(0,n.kt)("h2",{id:"single-element-in-a-sorted-array"},"Single Element in a Sorted Array"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"01-matrix"},"01 Matrix"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"output-contest-matches"},"Output Contest Matches"),(0,n.kt)("p",null,"Tags: String, Recursion, Simulation"),(0,n.kt)("h2",{id:"boundary-of-binary-tree"},"Boundary of Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"number-of-provinces"},"Number of Provinces"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Union Find, Graph"),(0,n.kt)("h2",{id:"binary-tree-longest-consecutive-sequence-ii"},"Binary Tree Longest Consecutive Sequence II"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"game-play-analysis-iv"},"Game Play Analysis IV"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"optimal-division"},"Optimal Division"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming"),(0,n.kt)("h2",{id:"brick-wall"},"Brick Wall"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"split-concatenated-strings"},"Split Concatenated Strings"),(0,n.kt)("p",null,"Tags: Array, String, Greedy"),(0,n.kt)("h2",{id:"next-greater-element-iii"},"Next Greater Element III"),(0,n.kt)("p",null,"Tags: Math, Two Pointers, String"),(0,n.kt)("h2",{id:"logical-or-of-two-binary-grids-represented-as-quad-trees"},"Logical OR of Two Binary Grids Represented as Quad-Trees"),(0,n.kt)("p",null,"Tags: Divide and Conquer, Tree"),(0,n.kt)("h2",{id:"subarray-sum-equals-k"},"Subarray Sum Equals K"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Prefix Sum"),(0,n.kt)("h2",{id:"longest-line-of-consecutive-one-in-matrix"},"Longest Line of Consecutive One in Matrix"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"array-nesting"},"Array Nesting"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search"),(0,n.kt)("h2",{id:"permutation-in-string"},"Permutation in String"),(0,n.kt)("p",null,"Tags: Hash Table, Two Pointers, String, Sliding Window"),(0,n.kt)("h2",{id:"managers-with-at-least-5-direct-reports"},"Managers with at Least 5 Direct Reports"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"squirrel-simulation"},"Squirrel Simulation"),(0,n.kt)("p",null,"Tags: Array, Math"),(0,n.kt)("h2",{id:"winning-candidate"},"Winning Candidate"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"out-of-boundary-paths"},"Out of Boundary Paths"),(0,n.kt)("p",null,"Tags: Dynamic Programming"),(0,n.kt)("h2",{id:"get-highest-answer-rate-question"},"Get Highest Answer Rate Question"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"count-student-number-in-departments"},"Count Student Number in Departments"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"shortest-unsorted-continuous-subarray"},"Shortest Unsorted Continuous Subarray"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Stack, Greedy, Sorting, Monotonic Stack"),(0,n.kt)("h2",{id:"kill-process"},"Kill Process"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Tree, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"delete-operation-for-two-strings"},"Delete Operation for Two Strings"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"investments-in-2016"},"Investments in 2016"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"fraction-addition-and-subtraction"},"Fraction Addition and Subtraction"),(0,n.kt)("p",null,"Tags: Math, String, Simulation"),(0,n.kt)("h2",{id:"valid-square"},"Valid Square"),(0,n.kt)("p",null,"Tags: Math, Geometry"),(0,n.kt)("h2",{id:"friend-requests-ii-who-has-the-most-friends"},"Friend Requests II: Who Has the Most Friends"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"tree-node"},"Tree Node"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"find-duplicate-file-in-system"},"Find Duplicate File in System"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String"),(0,n.kt)("h2",{id:"valid-triangle-number"},"Valid Triangle Number"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Greedy, Sorting"),(0,n.kt)("h2",{id:"shortest-distance-in-a-plane"},"Shortest Distance in a Plane"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"second-degree-follower"},"Second Degree Follower"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"add-bold-tag-in-string"},"Add Bold Tag in String"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Trie, String Matching"),(0,n.kt)("h2",{id:"task-scheduler"},"Task Scheduler"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Sorting, Heap (Priority Queue), Counting"),(0,n.kt)("h2",{id:"design-circular-queue"},"Design Circular Queue"),(0,n.kt)("p",null,"Tags: Array, Linked List, Design, Queue"),(0,n.kt)("h2",{id:"add-one-row-to-tree"},"Add One Row to Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"maximum-distance-in-arrays"},"Maximum Distance in Arrays"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"minimum-factorization"},"Minimum Factorization"),(0,n.kt)("p",null,"Tags: Math, Greedy"),(0,n.kt)("h2",{id:"exchange-seats"},"Exchange Seats"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"sum-of-square-numbers"},"Sum of Square Numbers"),(0,n.kt)("p",null,"Tags: Math, Two Pointers, Binary Search"),(0,n.kt)("h2",{id:"find-the-derangement-of-an-array"},"Find the Derangement of An Array"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming"),(0,n.kt)("h2",{id:"design-log-storage-system"},"Design Log Storage System"),(0,n.kt)("p",null,"Tags: Hash Table, String, Design, Ordered Set"),(0,n.kt)("h2",{id:"exclusive-time-of-functions"},"Exclusive Time of Functions"),(0,n.kt)("p",null,"Tags: Array, Stack"),(0,n.kt)("h2",{id:"shopping-offers"},"Shopping Offers"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Backtracking, Bit Manipulation, Memoization, Bitmask"),(0,n.kt)("h2",{id:"solve-the-equation"},"Solve the Equation"),(0,n.kt)("p",null,"Tags: Math, String, Simulation"),(0,n.kt)("h2",{id:"design-circular-deque"},"Design Circular Deque"),(0,n.kt)("p",null,"Tags: Array, Linked List, Design, Queue"),(0,n.kt)("h2",{id:"maximum-length-of-pair-chain"},"Maximum Length of Pair Chain"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy, Sorting"),(0,n.kt)("h2",{id:"palindromic-substrings"},"Palindromic Substrings"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"replace-words"},"Replace Words"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Trie"),(0,n.kt)("h2",{id:"dota2-senate"},"Dota2 Senate"),(0,n.kt)("p",null,"Tags: String, Greedy, Queue"),(0,n.kt)("h2",{id:"2-keys-keyboard"},"2 Keys Keyboard"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming"),(0,n.kt)("h2",{id:"4-keys-keyboard"},"4 Keys Keyboard"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming"),(0,n.kt)("h2",{id:"find-duplicate-subtrees"},"Find Duplicate Subtrees"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"maximum-binary-tree"},"Maximum Binary Tree"),(0,n.kt)("p",null,"Tags: Array, Divide and Conquer, Stack, Tree, Monotonic Stack, Binary Tree"),(0,n.kt)("h2",{id:"print-binary-tree"},"Print Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"find-k-closest-elements"},"Find K Closest Elements"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Sorting, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"split-array-into-consecutive-subsequences"},"Split Array into Consecutive Subsequences"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"maximum-width-of-binary-tree"},"Maximum Width of Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"equal-tree-partition"},"Equal Tree Partition"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"non-decreasing-array"},"Non-decreasing Array"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"path-sum-iv"},"Path Sum IV"),(0,n.kt)("p",null,"Tags: Array, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"beautiful-arrangement-ii"},"Beautiful Arrangement II"),(0,n.kt)("p",null,"Tags: Array, Math"),(0,n.kt)("h2",{id:"trim-a-binary-search-tree"},"Trim a Binary Search Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"maximum-swap"},"Maximum Swap"),(0,n.kt)("p",null,"Tags: Math, Greedy"),(0,n.kt)("h2",{id:"bulb-switcher-ii"},"Bulb Switcher II"),(0,n.kt)("p",null,"Tags: Math, Bit Manipulation, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"number-of-longest-increasing-subsequence"},"Number of Longest Increasing Subsequence"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Binary Indexed Tree, Segment Tree"),(0,n.kt)("h2",{id:"implement-magic-dictionary"},"Implement Magic Dictionary"),(0,n.kt)("p",null,"Tags: Hash Table, String, Design, Trie"),(0,n.kt)("h2",{id:"map-sum-pairs"},"Map Sum Pairs"),(0,n.kt)("p",null,"Tags: Hash Table, String, Design, Trie"),(0,n.kt)("h2",{id:"valid-parenthesis-string"},"Valid Parenthesis String"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Stack, Greedy"),(0,n.kt)("h2",{id:"next-closest-time"},"Next Closest Time"),(0,n.kt)("p",null,"Tags: String, Enumeration"),(0,n.kt)("h2",{id:"redundant-connection"},"Redundant Connection"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Union Find, Graph"),(0,n.kt)("h2",{id:"repeated-string-match"},"Repeated String Match"),(0,n.kt)("p",null,"Tags: String, String Matching"),(0,n.kt)("h2",{id:"longest-univalue-path"},"Longest Univalue Path"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"knight-probability-in-chessboard"},"Knight Probability in Chessboard"),(0,n.kt)("p",null,"Tags: Dynamic Programming"),(0,n.kt)("h2",{id:"employee-importance"},"Employee Importance"),(0,n.kt)("p",null,"Tags: Hash Table, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"top-k-frequent-words"},"Top K Frequent Words"),(0,n.kt)("p",null,"Tags: Hash Table, String, Trie, Sorting, Heap (Priority Queue), Bucket Sort, Counting"),(0,n.kt)("h2",{id:"number-of-distinct-islands"},"Number of Distinct Islands"),(0,n.kt)("p",null,"Tags: Hash Table, Depth-First Search, Breadth-First Search, Union Find, Hash Function"),(0,n.kt)("h2",{id:"max-area-of-island"},"Max Area of Island"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Matrix"),(0,n.kt)("h2",{id:"partition-to-k-equal-sum-subsets"},"Partition to K Equal Sum Subsets"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Backtracking, Bit Manipulation, Memoization, Bitmask"),(0,n.kt)("h2",{id:"insert-into-a-binary-search-tree"},"Insert into a Binary Search Tree"),(0,n.kt)("p",null,"Tags: Tree, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"search-in-a-sorted-array-of-unknown-size"},"Search in a Sorted Array of Unknown Size"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Interactive"),(0,n.kt)("h2",{id:"design-linked-list"},"Design Linked List"),(0,n.kt)("p",null,"Tags: Linked List, Design"),(0,n.kt)("h2",{id:"insert-into-a-sorted-circular-linked-list"},"Insert into a Sorted Circular Linked List"),(0,n.kt)("p",null,"Tags: Linked List"),(0,n.kt)("h2",{id:"minimum-ascii-delete-sum-for-two-strings"},"Minimum ASCII Delete Sum for Two Strings"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"subarray-product-less-than-k"},"Subarray Product Less Than K"),(0,n.kt)("p",null,"Tags: Array, Sliding Window"),(0,n.kt)("h2",{id:"best-time-to-buy-and-sell-stock-with-transaction-fee"},"Best Time to Buy and Sell Stock with Transaction Fee"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"maximum-length-of-repeated-subarray"},"Maximum Length of Repeated Subarray"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Dynamic Programming, Sliding Window, Rolling Hash, Hash Function"),(0,n.kt)("h2",{id:"longest-word-in-dictionary"},"Longest Word in Dictionary"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Trie, Sorting"),(0,n.kt)("h2",{id:"accounts-merge"},"Accounts Merge"),(0,n.kt)("p",null,"Tags: Array, String, Depth-First Search, Breadth-First Search, Union Find"),(0,n.kt)("h2",{id:"remove-comments"},"Remove Comments"),(0,n.kt)("p",null,"Tags: Array, String"),(0,n.kt)("h2",{id:"candy-crush"},"Candy Crush"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Matrix, Simulation"),(0,n.kt)("h2",{id:"split-linked-list-in-parts"},"Split Linked List in Parts"),(0,n.kt)("p",null,"Tags: Linked List"),(0,n.kt)("h2",{id:"my-calendar-i"},"My Calendar I"),(0,n.kt)("p",null,"Tags: Design, Segment Tree, Ordered Set"),(0,n.kt)("h2",{id:"my-calendar-ii"},"My Calendar II"),(0,n.kt)("p",null,"Tags: Design, Segment Tree, Ordered Set"),(0,n.kt)("h2",{id:"asteroid-collision"},"Asteroid Collision"),(0,n.kt)("p",null,"Tags: Array, Stack"),(0,n.kt)("h2",{id:"sentence-similarity-ii"},"Sentence Similarity II"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Depth-First Search, Breadth-First Search, Union Find"),(0,n.kt)("h2",{id:"monotone-increasing-digits"},"Monotone Increasing Digits"),(0,n.kt)("p",null,"Tags: Math, Greedy"),(0,n.kt)("h2",{id:"daily-temperatures"},"Daily Temperatures"),(0,n.kt)("p",null,"Tags: Array, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"delete-and-earn"},"Delete and Earn"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Dynamic Programming"),(0,n.kt)("h2",{id:"closest-leaf-in-a-binary-tree"},"Closest Leaf in a Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"network-delay-time"},"Network Delay Time"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Heap (Priority Queue), Shortest Path"),(0,n.kt)("h2",{id:"number-of-corner-rectangles"},"Number Of Corner Rectangles"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"ip-to-cidr"},"IP to CIDR"),(0,n.kt)("p",null,"Tags: String, Bit Manipulation"),(0,n.kt)("h2",{id:"open-the-lock"},"Open the Lock"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Breadth-First Search"),(0,n.kt)("h2",{id:"reach-a-number"},"Reach a Number"),(0,n.kt)("p",null,"Tags: Math, Binary Search"),(0,n.kt)("h2",{id:"pour-water"},"Pour Water"),(0,n.kt)("p",null,"Tags: Array, Simulation"),(0,n.kt)("h2",{id:"pyramid-transition-matrix"},"Pyramid Transition Matrix"),(0,n.kt)("p",null,"Tags: Bit Manipulation, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"bold-words-in-string"},"Bold Words in String"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Trie, String Matching"),(0,n.kt)("h2",{id:"partition-labels"},"Partition Labels"),(0,n.kt)("p",null,"Tags: Hash Table, Two Pointers, String, Greedy"),(0,n.kt)("h2",{id:"largest-plus-sign"},"Largest Plus Sign"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"reorganize-string"},"Reorganize String"),(0,n.kt)("p",null,"Tags: Hash Table, String, Greedy, Sorting, Heap (Priority Queue), Counting"),(0,n.kt)("h2",{id:"max-chunks-to-make-sorted"},"Max Chunks To Make Sorted"),(0,n.kt)("p",null,"Tags: Array, Stack, Greedy, Sorting, Monotonic Stack"),(0,n.kt)("h2",{id:"global-and-local-inversions"},"Global and Local Inversions"),(0,n.kt)("p",null,"Tags: Array, Math"),(0,n.kt)("h2",{id:"split-bst"},"Split BST"),(0,n.kt)("p",null,"Tags: Tree, Binary Search Tree, Recursion, Binary Tree"),(0,n.kt)("h2",{id:"swap-adjacent-in-lr-string"},"Swap Adjacent in LR String"),(0,n.kt)("p",null,"Tags: Two Pointers, String"),(0,n.kt)("h2",{id:"k-th-symbol-in-grammar"},"K-th Symbol in Grammar"),(0,n.kt)("p",null,"Tags: Math, Bit Manipulation, Recursion"),(0,n.kt)("h2",{id:"rabbits-in-forest"},"Rabbits in Forest"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Greedy"),(0,n.kt)("h2",{id:"letter-case-permutation"},"Letter Case Permutation"),(0,n.kt)("p",null,"Tags: String, Backtracking, Bit Manipulation"),(0,n.kt)("h2",{id:"is-graph-bipartite"},"Is Graph Bipartite?"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Union Find, Graph"),(0,n.kt)("h2",{id:"cheapest-flights-within-k-stops"},"Cheapest Flights Within K Stops"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Depth-First Search, Breadth-First Search, Graph, Heap (Priority Queue), Shortest Path"),(0,n.kt)("h2",{id:"rotated-digits"},"Rotated Digits"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming"),(0,n.kt)("h2",{id:"escape-the-ghosts"},"Escape The Ghosts"),(0,n.kt)("p",null,"Tags: Array, Math"),(0,n.kt)("h2",{id:"domino-and-tromino-tiling"},"Domino and Tromino Tiling"),(0,n.kt)("p",null,"Tags: Dynamic Programming"),(0,n.kt)("h2",{id:"custom-sort-string"},"Custom Sort String"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sorting"),(0,n.kt)("h2",{id:"number-of-matching-subsequences"},"Number of Matching Subsequences"),(0,n.kt)("p",null,"Tags: Hash Table, String, Trie, Sorting"),(0,n.kt)("h2",{id:"valid-tic-tac-toe-state"},"Valid Tic-Tac-Toe State"),(0,n.kt)("p",null,"Tags: Array, String"),(0,n.kt)("h2",{id:"number-of-subarrays-with-bounded-maximum"},"Number of Subarrays with Bounded Maximum"),(0,n.kt)("p",null,"Tags: Array, Two Pointers"),(0,n.kt)("h2",{id:"all-paths-from-source-to-target"},"All Paths From Source to Target"),(0,n.kt)("p",null,"Tags: Backtracking, Depth-First Search, Breadth-First Search, Graph"),(0,n.kt)("h2",{id:"champagne-tower"},"Champagne Tower"),(0,n.kt)("p",null,"Tags: Dynamic Programming"),(0,n.kt)("h2",{id:"find-eventual-safe-states"},"Find Eventual Safe States"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Topological Sort"),(0,n.kt)("h2",{id:"max-increase-to-keep-city-skyline"},"Max Increase to Keep City Skyline"),(0,n.kt)("p",null,"Tags: Array, Greedy, Matrix"),(0,n.kt)("h2",{id:"soup-servings"},"Soup Servings"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Probability and Statistics"),(0,n.kt)("h2",{id:"expressive-words"},"Expressive Words"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, String"),(0,n.kt)("h2",{id:"subdomain-visit-count"},"Subdomain Visit Count"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Counting"),(0,n.kt)("h2",{id:"largest-sum-of-averages"},"Largest Sum of Averages"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"binary-tree-pruning"},"Binary Tree Pruning"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"ambiguous-coordinates"},"Ambiguous Coordinates"),(0,n.kt)("p",null,"Tags: String, Backtracking"),(0,n.kt)("h2",{id:"linked-list-components"},"Linked List Components"),(0,n.kt)("p",null,"Tags: Hash Table, Linked List"),(0,n.kt)("h2",{id:"short-encoding-of-words"},"Short Encoding of Words"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Trie"),(0,n.kt)("h2",{id:"card-flipping-game"},"Card Flipping Game"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"binary-trees-with-factors"},"Binary Trees With Factors"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Dynamic Programming"),(0,n.kt)("h2",{id:"friends-of-appropriate-ages"},"Friends Of Appropriate Ages"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Sorting"),(0,n.kt)("h2",{id:"most-profit-assigning-work"},"Most Profit Assigning Work"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Greedy, Sorting"),(0,n.kt)("h2",{id:"masking-personal-information"},"Masking Personal Information"),(0,n.kt)("p",null,"Tags: String"),(0,n.kt)("h2",{id:"find-and-replace-in-string"},"Find And Replace in String"),(0,n.kt)("p",null,"Tags: Array, String, Sorting"),(0,n.kt)("h2",{id:"image-overlap"},"Image Overlap"),(0,n.kt)("p",null,"Tags: Array, Matrix"),(0,n.kt)("h2",{id:"new-21-game"},"New 21 Game"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Sliding Window, Probability and Statistics"),(0,n.kt)("h2",{id:"push-dominoes"},"Push Dominoes"),(0,n.kt)("p",null,"Tags: Two Pointers, String, Dynamic Programming"),(0,n.kt)("h2",{id:"magic-squares-in-grid"},"Magic Squares In Grid"),(0,n.kt)("p",null,"Tags: Array, Math, Matrix"),(0,n.kt)("h2",{id:"keys-and-rooms"},"Keys and Rooms"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph"),(0,n.kt)("h2",{id:"split-array-into-fibonacci-sequence"},"Split Array into Fibonacci Sequence"),(0,n.kt)("p",null,"Tags: String, Backtracking"),(0,n.kt)("h2",{id:"longest-mountain-in-array"},"Longest Mountain in Array"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Dynamic Programming, Enumeration"),(0,n.kt)("h2",{id:"hand-of-straights"},"Hand of Straights"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Sorting"),(0,n.kt)("h2",{id:"shifting-letters"},"Shifting Letters"),(0,n.kt)("p",null,"Tags: Array, String"),(0,n.kt)("h2",{id:"maximize-distance-to-closest-person"},"Maximize Distance to Closest Person"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"loud-and-rich"},"Loud and Rich"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Graph, Topological Sort"),(0,n.kt)("h2",{id:"car-fleet"},"Car Fleet"),(0,n.kt)("p",null,"Tags: Array, Stack, Sorting, Monotonic Stack"),(0,n.kt)("h2",{id:"exam-room"},"Exam Room"),(0,n.kt)("p",null,"Tags: Design, Ordered Set"),(0,n.kt)("h2",{id:"score-of-parentheses"},"Score of Parentheses"),(0,n.kt)("p",null,"Tags: String, Stack"),(0,n.kt)("h2",{id:"mirror-reflection"},"Mirror Reflection"),(0,n.kt)("p",null,"Tags: Math, Geometry"),(0,n.kt)("h2",{id:"score-after-flipping-matrix"},"Score After Flipping Matrix"),(0,n.kt)("p",null,"Tags: Array, Greedy, Bit Manipulation, Matrix"),(0,n.kt)("h2",{id:"all-nodes-distance-k-in-binary-tree"},"All Nodes Distance K in Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"smallest-subtree-with-all-the-deepest-nodes"},"Smallest Subtree with all the Deepest Nodes"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"prime-palindrome"},"Prime Palindrome"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"reordered-power-of-2"},"Reordered Power of 2"),(0,n.kt)("p",null,"Tags: Math, Sorting, Counting, Enumeration"),(0,n.kt)("h2",{id:"advantage-shuffle"},"Advantage Shuffle"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"length-of-longest-fibonacci-subsequence"},"Length of Longest Fibonacci Subsequence"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Dynamic Programming"),(0,n.kt)("h2",{id:"walking-robot-simulation"},"Walking Robot Simulation"),(0,n.kt)("p",null,"Tags: Array, Simulation"),(0,n.kt)("h2",{id:"koko-eating-bananas"},"Koko Eating Bananas"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"stone-game"},"Stone Game"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming, Game Theory"),(0,n.kt)("h2",{id:"decoded-string-at-index"},"Decoded String at Index"),(0,n.kt)("p",null,"Tags: String, Stack"),(0,n.kt)("h2",{id:"boats-to-save-people"},"Boats to Save People"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Greedy, Sorting"),(0,n.kt)("h2",{id:"spiral-matrix-iii"},"Spiral Matrix III"),(0,n.kt)("p",null,"Tags: Array, Matrix, Simulation"),(0,n.kt)("h2",{id:"possible-bipartition"},"Possible Bipartition"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Union Find, Graph"),(0,n.kt)("h2",{id:"construct-binary-tree-from-preorder-and-postorder-traversal"},"Construct Binary Tree from Preorder and Postorder Traversal"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Divide and Conquer, Tree, Binary Tree"),(0,n.kt)("h2",{id:"find-and-replace-pattern"},"Find and Replace Pattern"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String"),(0,n.kt)("h2",{id:"groups-of-special-equivalent-strings"},"Groups of Special-Equivalent Strings"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String"),(0,n.kt)("h2",{id:"all-possible-full-binary-trees"},"All Possible Full Binary Trees"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Tree, Recursion, Memoization, Binary Tree"),(0,n.kt)("h2",{id:"bitwise-ors-of-subarrays"},"Bitwise ORs of Subarrays"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Bit Manipulation"),(0,n.kt)("h2",{id:"rle-iterator"},"RLE Iterator"),(0,n.kt)("p",null,"Tags: Array, Design, Counting, Iterator"),(0,n.kt)("h2",{id:"online-stock-span"},"Online Stock Span"),(0,n.kt)("p",null,"Tags: Stack, Design, Monotonic Stack, Data Stream"),(0,n.kt)("h2",{id:"fruit-into-baskets"},"Fruit Into Baskets"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Sliding Window"),(0,n.kt)("h2",{id:"sum-of-subarray-minimums"},"Sum of Subarray Minimums"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"snakes-and-ladders"},"Snakes and Ladders"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"smallest-range-ii"},"Smallest Range II"),(0,n.kt)("p",null,"Tags: Array, Math, Greedy, Sorting"),(0,n.kt)("h2",{id:"online-election"},"Online Election"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Binary Search, Design"),(0,n.kt)("h2",{id:"sort-an-array"},"Sort an Array"),(0,n.kt)("p",null,"Tags: Array, Divide and Conquer, Sorting, Heap (Priority Queue), Merge Sort, Bucket Sort, Radix Sort, Counting Sort"),(0,n.kt)("h2",{id:"partition-array-into-disjoint-intervals"},"Partition Array into Disjoint Intervals"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"word-subsets"},"Word Subsets"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String"),(0,n.kt)("h2",{id:"maximum-sum-circular-subarray"},"Maximum Sum Circular Subarray"),(0,n.kt)("p",null,"Tags: Array, Divide and Conquer, Dynamic Programming, Queue, Monotonic Queue"),(0,n.kt)("h2",{id:"complete-binary-tree-inserter"},"Complete Binary Tree Inserter"),(0,n.kt)("p",null,"Tags: Tree, Breadth-First Search, Design, Binary Tree"),(0,n.kt)("h2",{id:"minimum-add-to-make-parentheses-valid"},"Minimum Add to Make Parentheses Valid"),(0,n.kt)("p",null,"Tags: String, Stack, Greedy"),(0,n.kt)("h2",{id:"3sum-with-multiplicity"},"3Sum With Multiplicity"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Two Pointers, Sorting, Counting"),(0,n.kt)("h2",{id:"flip-string-to-monotone-increasing"},"Flip String to Monotone Increasing"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"binary-subarrays-with-sum"},"Binary Subarrays With Sum"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Sliding Window, Prefix Sum"),(0,n.kt)("h2",{id:"minimum-falling-path-sum"},"Minimum Falling Path Sum"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"beautiful-array"},"Beautiful Array"),(0,n.kt)("p",null,"Tags: Array, Math, Divide and Conquer"),(0,n.kt)("h2",{id:"shortest-bridge"},"Shortest Bridge"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"knight-dialer"},"Knight Dialer"),(0,n.kt)("p",null,"Tags: Dynamic Programming"),(0,n.kt)("h2",{id:"minimum-area-rectangle"},"Minimum Area Rectangle"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Geometry, Sorting"),(0,n.kt)("h2",{id:"minimum-increment-to-make-array-unique"},"Minimum Increment to Make Array Unique"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting, Counting"),(0,n.kt)("h2",{id:"validate-stack-sequences"},"Validate Stack Sequences"),(0,n.kt)("p",null,"Tags: Array, Stack, Simulation"),(0,n.kt)("h2",{id:"most-stones-removed-with-same-row-or-column"},"Most Stones Removed with Same Row or Column"),(0,n.kt)("p",null,"Tags: Depth-First Search, Union Find, Graph"),(0,n.kt)("h2",{id:"bag-of-tokens"},"Bag of Tokens"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Greedy, Sorting"),(0,n.kt)("h2",{id:"largest-time-for-given-digits"},"Largest Time for Given Digits"),(0,n.kt)("p",null,"Tags: String, Enumeration"),(0,n.kt)("h2",{id:"reveal-cards-in-increasing-order"},"Reveal Cards In Increasing Order"),(0,n.kt)("p",null,"Tags: Array, Queue, Sorting, Simulation"),(0,n.kt)("h2",{id:"flip-equivalent-binary-trees"},"Flip Equivalent Binary Trees"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"array-of-doubled-pairs"},"Array of Doubled Pairs"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Sorting"),(0,n.kt)("h2",{id:"delete-columns-to-make-sorted-ii"},"Delete Columns to Make Sorted II"),(0,n.kt)("p",null,"Tags: Array, String, Greedy"),(0,n.kt)("h2",{id:"prison-cells-after-n-days"},"Prison Cells After N Days"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Bit Manipulation"),(0,n.kt)("h2",{id:"check-completeness-of-a-binary-tree"},"Check Completeness of a Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"regions-cut-by-slashes"},"Regions Cut By Slashes"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Union Find, Graph"),(0,n.kt)("h2",{id:"maximum-width-ramp"},"Maximum Width Ramp"),(0,n.kt)("p",null,"Tags: Array, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"minimum-area-rectangle-ii"},"Minimum Area Rectangle II"),(0,n.kt)("p",null,"Tags: Array, Math, Geometry"),(0,n.kt)("h2",{id:"vowel-spellchecker"},"Vowel Spellchecker"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String"),(0,n.kt)("h2",{id:"numbers-with-same-consecutive-differences"},"Numbers With Same Consecutive Differences"),(0,n.kt)("p",null,"Tags: Backtracking, Breadth-First Search"),(0,n.kt)("h2",{id:"pancake-sorting"},"Pancake Sorting"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Greedy, Sorting"),(0,n.kt)("h2",{id:"powerful-integers"},"Powerful Integers"),(0,n.kt)("p",null,"Tags: Hash Table, Math"),(0,n.kt)("h2",{id:"flip-binary-tree-to-match-preorder-traversal"},"Flip Binary Tree To Match Preorder Traversal"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"k-closest-points-to-origin"},"K Closest Points to Origin"),(0,n.kt)("p",null,"Tags: Array, Math, Divide and Conquer, Geometry, Sorting, Heap (Priority Queue), Quickselect"),(0,n.kt)("h2",{id:"subarray-sums-divisible-by-k"},"Subarray Sums Divisible by K"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Prefix Sum"),(0,n.kt)("h2",{id:"longest-turbulent-subarray"},"Longest Turbulent Subarray"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Sliding Window"),(0,n.kt)("h2",{id:"distribute-coins-in-binary-tree"},"Distribute Coins in Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"time-based-key-value-store"},"Time Based Key-Value Store"),(0,n.kt)("p",null,"Tags: Hash Table, String, Binary Search, Design"),(0,n.kt)("h2",{id:"minimum-cost-for-tickets"},"Minimum Cost For Tickets"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"string-without-aaa-or-bbb"},"String Without AAA or BBB"),(0,n.kt)("p",null,"Tags: String, Greedy"),(0,n.kt)("h2",{id:"sum-of-even-numbers-after-queries"},"Sum of Even Numbers After Queries"),(0,n.kt)("p",null,"Tags: Array, Simulation"),(0,n.kt)("h2",{id:"interval-list-intersections"},"Interval List Intersections"),(0,n.kt)("p",null,"Tags: Array, Two Pointers"),(0,n.kt)("h2",{id:"smallest-string-starting-from-leaf"},"Smallest String Starting From Leaf"),(0,n.kt)("p",null,"Tags: String, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"satisfiability-of-equality-equations"},"Satisfiability of Equality Equations"),(0,n.kt)("p",null,"Tags: Array, String, Union Find, Graph"),(0,n.kt)("h2",{id:"broken-calculator"},"Broken Calculator"),(0,n.kt)("p",null,"Tags: Math, Greedy"),(0,n.kt)("h2",{id:"rotting-oranges"},"Rotting Oranges"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"maximum-binary-tree-ii"},"Maximum Binary Tree II"),(0,n.kt)("p",null,"Tags: Tree, Binary Tree"),(0,n.kt)("h2",{id:"check-if-word-is-valid-after-substitutions"},"Check If Word Is Valid After Substitutions"),(0,n.kt)("p",null,"Tags: String, Stack"),(0,n.kt)("h2",{id:"max-consecutive-ones-iii"},"Max Consecutive Ones III"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sliding Window, Prefix Sum"),(0,n.kt)("h2",{id:"clumsy-factorial"},"Clumsy Factorial"),(0,n.kt)("p",null,"Tags: Math, Stack, Simulation"),(0,n.kt)("h2",{id:"minimum-domino-rotations-for-equal-row"},"Minimum Domino Rotations For Equal Row"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"construct-binary-search-tree-from-preorder-traversal"},"Construct Binary Search Tree from Preorder Traversal"),(0,n.kt)("p",null,"Tags: Array, Stack, Tree, Binary Search Tree, Monotonic Stack, Binary Tree"),(0,n.kt)("h2",{id:"pairs-of-songs-with-total-durations-divisible-by-60"},"Pairs of Songs With Total Durations Divisible by 60"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Counting"),(0,n.kt)("h2",{id:"capacity-to-ship-packages-within-d-days"},"Capacity To Ship Packages Within D Days"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Greedy"),(0,n.kt)("h2",{id:"best-sightseeing-pair"},"Best Sightseeing Pair"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"smallest-integer-divisible-by-k"},"Smallest Integer Divisible by K"),(0,n.kt)("p",null,"Tags: Hash Table, Math"),(0,n.kt)("h2",{id:"binary-string-with-substrings-representing-1-to-n"},"Binary String With Substrings Representing 1 To N"),(0,n.kt)("p",null,"Tags: String"),(0,n.kt)("h2",{id:"convert-to-base--2"},"Convert to Base -2"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"next-greater-node-in-linked-list"},"Next Greater Node In Linked List"),(0,n.kt)("p",null,"Tags: Array, Linked List, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"number-of-enclaves"},"Number of Enclaves"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Matrix"),(0,n.kt)("h2",{id:"camelcase-matching"},"Camelcase Matching"),(0,n.kt)("p",null,"Tags: Two Pointers, String, Trie, String Matching"),(0,n.kt)("h2",{id:"video-stitching"},"Video Stitching"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"maximum-difference-between-node-and-ancestor"},"Maximum Difference Between Node and Ancestor"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"longest-arithmetic-subsequence"},"Longest Arithmetic Subsequence"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Binary Search, Dynamic Programming"),(0,n.kt)("h2",{id:"two-city-scheduling"},"Two City Scheduling"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"maximum-sum-of-two-non-overlapping-subarrays"},"Maximum Sum of Two Non-Overlapping Subarrays"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Sliding Window"),(0,n.kt)("h2",{id:"moving-stones-until-consecutive"},"Moving Stones Until Consecutive"),(0,n.kt)("p",null,"Tags: Math, Brainteaser"),(0,n.kt)("h2",{id:"coloring-a-border"},"Coloring A Border"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"uncrossed-lines"},"Uncrossed Lines"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"binary-search-tree-to-greater-sum-tree"},"Binary Search Tree to Greater Sum Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"minimum-score-triangulation-of-polygon"},"Minimum Score Triangulation of Polygon"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"moving-stones-until-consecutive-ii"},"Moving Stones Until Consecutive II"),(0,n.kt)("p",null,"Tags: Array, Math, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"robot-bounded-in-circle"},"Robot Bounded In Circle"),(0,n.kt)("p",null,"Tags: Math, String, Simulation"),(0,n.kt)("h2",{id:"flower-planting-with-no-adjacent"},"Flower Planting With No Adjacent"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph"),(0,n.kt)("h2",{id:"partition-array-for-maximum-sum"},"Partition Array for Maximum Sum"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"customers-who-bought-all-products"},"Customers Who Bought All Products"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"longest-string-chain"},"Longest String Chain"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Two Pointers, String, Dynamic Programming"),(0,n.kt)("h2",{id:"last-stone-weight-ii"},"Last Stone Weight II"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"grumpy-bookstore-owner"},"Grumpy Bookstore Owner"),(0,n.kt)("p",null,"Tags: Array, Sliding Window"),(0,n.kt)("h2",{id:"previous-permutation-with-one-swap"},"Previous Permutation With One Swap"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"distant-barcodes"},"Distant Barcodes"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Sorting, Heap (Priority Queue), Counting"),(0,n.kt)("h2",{id:"shortest-way-to-form-string"},"Shortest Way to Form String"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"campus-bikes"},"Campus Bikes"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"minimize-rounding-error-to-meet-target"},"Minimize Rounding Error to Meet Target"),(0,n.kt)("p",null,"Tags: Array, Math, String, Greedy"),(0,n.kt)("h2",{id:"all-paths-from-source-lead-to-destination"},"All Paths from Source Lead to Destination"),(0,n.kt)("p",null,"Tags: Depth-First Search, Graph"),(0,n.kt)("h2",{id:"missing-element-in-sorted-array"},"Missing Element in Sorted Array"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"lexicographically-smallest-equivalent-string"},"Lexicographically Smallest Equivalent String"),(0,n.kt)("p",null,"Tags: String, Union Find"),(0,n.kt)("h2",{id:"longest-repeating-substring"},"Longest Repeating Substring"),(0,n.kt)("p",null,"Tags: String, Binary Search, Dynamic Programming, Rolling Hash, Suffix Array, Hash Function"),(0,n.kt)("h2",{id:"campus-bikes-ii"},"Campus Bikes II"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Backtracking, Bit Manipulation, Bitmask"),(0,n.kt)("h2",{id:"product-sales-analysis-iii"},"Product Sales Analysis III"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"flip-columns-for-maximum-number-of-equal-rows"},"Flip Columns For Maximum Number of Equal Rows"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Matrix"),(0,n.kt)("h2",{id:"adding-two-negabinary-numbers"},"Adding Two Negabinary Numbers"),(0,n.kt)("p",null,"Tags: Array, Math"),(0,n.kt)("h2",{id:"project-employees-iii"},"Project Employees III"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"letter-tile-possibilities"},"Letter Tile Possibilities"),(0,n.kt)("p",null,"Tags: String, Backtracking"),(0,n.kt)("h2",{id:"insufficient-nodes-in-root-to-leaf-paths"},"Insufficient Nodes in Root to Leaf Paths"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"smallest-subsequence-of-distinct-characters"},"Smallest Subsequence of Distinct Characters"),(0,n.kt)("p",null,"Tags: String, Stack, Greedy, Monotonic Stack"),(0,n.kt)("h2",{id:"brace-expansion"},"Brace Expansion"),(0,n.kt)("p",null,"Tags: String, Backtracking, Breadth-First Search"),(0,n.kt)("h2",{id:"largest-values-from-labels"},"Largest Values From Labels"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Sorting, Counting"),(0,n.kt)("h2",{id:"shortest-path-in-binary-matrix"},"Shortest Path in Binary Matrix"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"statistics-from-a-large-sample"},"Statistics from a Large Sample"),(0,n.kt)("p",null,"Tags: Math, Two Pointers, Probability and Statistics"),(0,n.kt)("h2",{id:"car-pooling"},"Car Pooling"),(0,n.kt)("p",null,"Tags: Array, Sorting, Heap (Priority Queue), Simulation, Prefix Sum"),(0,n.kt)("h2",{id:"unpopular-books"},"Unpopular Books"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"find-k-length-substrings-with-no-repeated-characters"},"Find K-Length Substrings With No Repeated Characters"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sliding Window"),(0,n.kt)("h2",{id:"the-earliest-moment-when-everyone-become-friends"},"The Earliest Moment When Everyone Become Friends"),(0,n.kt)("p",null,"Tags: Array, Union Find"),(0,n.kt)("h2",{id:"path-with-maximum-minimum-value"},"Path With Maximum Minimum Value"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Heap (Priority Queue), Matrix"),(0,n.kt)("h2",{id:"path-in-zigzag-labelled-binary-tree"},"Path In Zigzag Labelled Binary Tree"),(0,n.kt)("p",null,"Tags: Math, Tree, Binary Tree"),(0,n.kt)("h2",{id:"filling-bookcase-shelves"},"Filling Bookcase Shelves"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"new-users-daily-count"},"New Users Daily Count"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"corporate-flight-bookings"},"Corporate Flight Bookings"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"delete-nodes-and-return-forest"},"Delete Nodes And Return Forest"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"maximum-nesting-depth-of-two-valid-parentheses-strings"},"Maximum Nesting Depth of Two Valid Parentheses Strings"),(0,n.kt)("p",null,"Tags: String, Stack"),(0,n.kt)("h2",{id:"highest-grade-for-each-student"},"Highest Grade For Each Student"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"print-foobar-alternately"},"Print FooBar Alternately"),(0,n.kt)("p",null,"Tags: Concurrency"),(0,n.kt)("h2",{id:"print-zero-even-odd"},"Print Zero Even Odd"),(0,n.kt)("p",null,"Tags: Concurrency"),(0,n.kt)("h2",{id:"building-h2o"},"Building H2O"),(0,n.kt)("p",null,"Tags: Concurrency"),(0,n.kt)("h2",{id:"maximum-average-subtree"},"Maximum Average Subtree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"lowest-common-ancestor-of-deepest-leaves"},"Lowest Common Ancestor of Deepest Leaves"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"longest-well-performing-interval"},"Longest Well-Performing Interval"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Stack, Monotonic Stack, Prefix Sum"),(0,n.kt)("h2",{id:"active-businesses"},"Active Businesses"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"shortest-path-with-alternating-colors"},"Shortest Path with Alternating Colors"),(0,n.kt)("p",null,"Tags: Breadth-First Search, Graph"),(0,n.kt)("h2",{id:"minimum-cost-tree-from-leaf-values"},"Minimum Cost Tree From Leaf Values"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Stack, Greedy, Monotonic Stack"),(0,n.kt)("h2",{id:"maximum-of-absolute-value-expression"},"Maximum of Absolute Value Expression"),(0,n.kt)("p",null,"Tags: Array, Math"),(0,n.kt)("h2",{id:"reported-posts-ii"},"Reported Posts II"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"connecting-cities-with-minimum-cost"},"Connecting Cities With Minimum Cost"),(0,n.kt)("p",null,"Tags: Union Find, Graph, Heap (Priority Queue), Minimum Spanning Tree"),(0,n.kt)("h2",{id:"parallel-courses"},"Parallel Courses"),(0,n.kt)("p",null,"Tags: Graph, Topological Sort"),(0,n.kt)("h2",{id:"alphabet-board-path"},"Alphabet Board Path"),(0,n.kt)("p",null,"Tags: Hash Table, String"),(0,n.kt)("h2",{id:"largest-1-bordered-square"},"Largest 1-Bordered Square"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"stone-game-ii"},"Stone Game II"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming, Game Theory"),(0,n.kt)("h2",{id:"longest-common-subsequence"},"Longest Common Subsequence"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"decrease-elements-to-make-array-zigzag"},"Decrease Elements To Make Array Zigzag"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"binary-tree-coloring-game"},"Binary Tree Coloring Game"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"snapshot-array"},"Snapshot Array"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Binary Search, Design"),(0,n.kt)("h2",{id:"article-views-ii"},"Article Views II"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"minimum-swaps-to-group-all-1s-together"},"Minimum Swaps to Group All 1's Together"),(0,n.kt)("p",null,"Tags: Array, Sliding Window"),(0,n.kt)("h2",{id:"analyze-user-website-visit-pattern"},"Analyze User Website Visit Pattern"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Sorting"),(0,n.kt)("h2",{id:"number-of-dice-rolls-with-target-sum"},"Number of Dice Rolls With Target Sum"),(0,n.kt)("p",null,"Tags: Dynamic Programming"),(0,n.kt)("h2",{id:"swap-for-longest-repeated-character-substring"},"Swap For Longest Repeated Character Substring"),(0,n.kt)("p",null,"Tags: String, Sliding Window"),(0,n.kt)("h2",{id:"market-analysis-i"},"Market Analysis I"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximum-level-sum-of-a-binary-tree"},"Maximum Level Sum of a Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"as-far-from-land-as-possible"},"As Far from Land as Possible"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"product-price-at-a-given-date"},"Product Price at a Given Date"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"design-file-system"},"Design File System"),(0,n.kt)("p",null,"Tags: Hash Table, String, Design, Trie"),(0,n.kt)("h2",{id:"minimum-cost-to-connect-sticks"},"Minimum Cost to Connect Sticks"),(0,n.kt)("p",null,"Tags: Array, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"invalid-transactions"},"Invalid Transactions"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Sorting"),(0,n.kt)("h2",{id:"compare-strings-by-frequency-of-the-smallest-character"},"Compare Strings by Frequency of the Smallest Character"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Binary Search, Sorting"),(0,n.kt)("h2",{id:"remove-zero-sum-consecutive-nodes-from-linked-list"},"Remove Zero Sum Consecutive Nodes from Linked List"),(0,n.kt)("p",null,"Tags: Hash Table, Linked List"),(0,n.kt)("h2",{id:"immediate-food-delivery-ii"},"Immediate Food Delivery II"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"can-make-palindrome-from-substring"},"Can Make Palindrome from Substring"),(0,n.kt)("p",null,"Tags: Hash Table, String, Bit Manipulation, Prefix Sum"),(0,n.kt)("h2",{id:"before-and-after-puzzle"},"Before and After Puzzle"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Sorting"),(0,n.kt)("h2",{id:"shortest-distance-to-target-color"},"Shortest Distance to Target Color"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Dynamic Programming"),(0,n.kt)("h2",{id:"maximum-subarray-sum-with-one-deletion"},"Maximum Subarray Sum with One Deletion"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"design-bounded-blocking-queue"},"Design Bounded Blocking Queue"),(0,n.kt)("p",null,"Tags: Concurrency"),(0,n.kt)("h2",{id:"reverse-substrings-between-each-pair-of-parentheses"},"Reverse Substrings Between Each Pair of Parentheses"),(0,n.kt)("p",null,"Tags: String, Stack"),(0,n.kt)("h2",{id:"k-concatenation-maximum-sum"},"K-Concatenation Maximum Sum"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"monthly-transactions-i"},"Monthly Transactions I"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"fizz-buzz-multithreaded"},"Fizz Buzz Multithreaded"),(0,n.kt)("p",null,"Tags: Concurrency"),(0,n.kt)("h2",{id:"minimum-knight-moves"},"Minimum Knight Moves"),(0,n.kt)("p",null,"Tags: Breadth-First Search"),(0,n.kt)("h2",{id:"find-smallest-common-element-in-all-rows"},"Find Smallest Common Element in All Rows"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Binary Search, Matrix, Counting"),(0,n.kt)("h2",{id:"ugly-number-iii"},"Ugly Number III"),(0,n.kt)("p",null,"Tags: Math, Binary Search, Number Theory"),(0,n.kt)("h2",{id:"smallest-string-with-swaps"},"Smallest String With Swaps"),(0,n.kt)("p",null,"Tags: Hash Table, String, Depth-First Search, Breadth-First Search, Union Find"),(0,n.kt)("h2",{id:"last-person-to-fit-in-the-bus"},"Last Person to Fit in the Bus"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"monthly-transactions-ii"},"Monthly Transactions II"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"get-equal-substrings-within-budget"},"Get Equal Substrings Within Budget"),(0,n.kt)("p",null,"Tags: String, Binary Search, Sliding Window, Prefix Sum"),(0,n.kt)("h2",{id:"remove-all-adjacent-duplicates-in-string-ii"},"Remove All Adjacent Duplicates in String II"),(0,n.kt)("p",null,"Tags: String, Stack"),(0,n.kt)("h2",{id:"team-scores-in-football-tournament"},"Team Scores in Football Tournament"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"two-sum-bsts"},"Two Sum BSTs"),(0,n.kt)("p",null,"Tags: Two Pointers, Binary Search, Stack, Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"stepping-numbers"},"Stepping Numbers"),(0,n.kt)("p",null,"Tags: Backtracking, Breadth-First Search"),(0,n.kt)("h2",{id:"longest-arithmetic-subsequence-of-given-difference"},"Longest Arithmetic Subsequence of Given Difference"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Dynamic Programming"),(0,n.kt)("h2",{id:"path-with-maximum-gold"},"Path with Maximum Gold"),(0,n.kt)("p",null,"Tags: Array, Backtracking, Matrix"),(0,n.kt)("h2",{id:"queens-that-can-attack-the-king"},"Queens That Can Attack the King"),(0,n.kt)("p",null,"Tags: Array, Matrix, Simulation"),(0,n.kt)("h2",{id:"the-dining-philosophers"},"The Dining Philosophers"),(0,n.kt)("p",null,"Tags: Concurrency"),(0,n.kt)("h2",{id:"airplane-seat-assignment-probability"},"Airplane Seat Assignment Probability"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Brainteaser, Probability and Statistics"),(0,n.kt)("h2",{id:"meeting-scheduler"},"Meeting Scheduler"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"toss-strange-coins"},"Toss Strange Coins"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Probability and Statistics"),(0,n.kt)("h2",{id:"remove-sub-folders-from-the-filesystem"},"Remove Sub-Folders from the Filesystem"),(0,n.kt)("p",null,"Tags: Array, String, Trie"),(0,n.kt)("h2",{id:"replace-the-substring-for-balanced-string"},"Replace the Substring for Balanced String"),(0,n.kt)("p",null,"Tags: String, Sliding Window"),(0,n.kt)("h2",{id:"web-crawler"},"Web Crawler"),(0,n.kt)("p",null,"Tags: String, Depth-First Search, Breadth-First Search, Interactive"),(0,n.kt)("h2",{id:"find-positive-integer-solution-for-a-given-equation"},"Find Positive Integer Solution for a Given Equation"),(0,n.kt)("p",null,"Tags: Math, Two Pointers, Binary Search, Interactive"),(0,n.kt)("h2",{id:"circular-permutation-in-binary-representation"},"Circular Permutation in Binary Representation"),(0,n.kt)("p",null,"Tags: Math, Backtracking, Bit Manipulation"),(0,n.kt)("h2",{id:"maximum-length-of-a-concatenated-string-with-unique-characters"},"Maximum Length of a Concatenated String with Unique Characters"),(0,n.kt)("p",null,"Tags: Array, String, Backtracking, Bit Manipulation"),(0,n.kt)("h2",{id:"web-crawler-multithreaded"},"Web Crawler Multithreaded"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Concurrency"),(0,n.kt)("h2",{id:"design-a-leaderboard"},"Design A Leaderboard"),(0,n.kt)("p",null,"Tags: Hash Table, Design, Sorting"),(0,n.kt)("h2",{id:"tree-diameter"},"Tree Diameter"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Graph, Topological Sort"),(0,n.kt)("h2",{id:"minimum-swaps-to-make-strings-equal"},"Minimum Swaps to Make Strings Equal"),(0,n.kt)("p",null,"Tags: Math, String, Greedy"),(0,n.kt)("h2",{id:"count-number-of-nice-subarrays"},"Count Number of Nice Subarrays"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Sliding Window"),(0,n.kt)("h2",{id:"minimum-remove-to-make-valid-parentheses"},"Minimum Remove to Make Valid Parentheses"),(0,n.kt)("p",null,"Tags: String, Stack"),(0,n.kt)("h2",{id:"reconstruct-a-2-row-binary-matrix"},"Reconstruct a 2-Row Binary Matrix"),(0,n.kt)("p",null,"Tags: Array, Greedy, Matrix"),(0,n.kt)("h2",{id:"number-of-closed-islands"},"Number of Closed Islands"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Matrix"),(0,n.kt)("h2",{id:"encode-number"},"Encode Number"),(0,n.kt)("p",null,"Tags: Math, String, Bit Manipulation"),(0,n.kt)("h2",{id:"smallest-common-region"},"Smallest Common Region"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Tree, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"synonymous-sentences"},"Synonymous Sentences"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Backtracking, Union Find"),(0,n.kt)("h2",{id:"find-elements-in-a-contaminated-binary-tree"},"Find Elements in a Contaminated Binary Tree"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search, Design, Binary Tree"),(0,n.kt)("h2",{id:"greatest-sum-divisible-by-three"},"Greatest Sum Divisible by Three"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"page-recommendations"},"Page Recommendations"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"print-immutable-linked-list-in-reverse"},"Print Immutable Linked List in Reverse"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers, Stack, Recursion"),(0,n.kt)("h2",{id:"count-servers-that-communicate"},"Count Servers that Communicate"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Matrix, Counting"),(0,n.kt)("h2",{id:"search-suggestions-system"},"Search Suggestions System"),(0,n.kt)("p",null,"Tags: Array, String, Trie"),(0,n.kt)("h2",{id:"all-people-report-to-the-given-manager"},"All People Report to the Given Manager"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"remove-interval"},"Remove Interval"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"delete-tree-nodes"},"Delete Tree Nodes"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"number-of-burgers-with-no-waste-of-ingredients"},"Number of Burgers with No Waste of Ingredients"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"count-square-submatrices-with-all-ones"},"Count Square Submatrices with All Ones"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"group-the-people-given-the-group-size-they-belong-to"},"Group the People Given the Group Size They Belong To"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"find-the-smallest-divisor-given-a-threshold"},"Find the Smallest Divisor Given a Threshold"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"find-the-start-and-end-number-of-continuous-ranges"},"Find the Start and End Number of Continuous Ranges"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"iterator-for-combination"},"Iterator for Combination"),(0,n.kt)("p",null,"Tags: String, Backtracking, Design, Iterator"),(0,n.kt)("h2",{id:"remove-covered-intervals"},"Remove Covered Intervals"),(0,n.kt)("p",null,"Tags: Array, Sorting"),(0,n.kt)("h2",{id:"sequential-digits"},"Sequential Digits"),(0,n.kt)("p",null,"Tags: Enumeration"),(0,n.kt)("h2",{id:"maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold"},"Maximum Side Length of a Square with Sum Less than or Equal to Threshold"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Matrix, Prefix Sum"),(0,n.kt)("h2",{id:"divide-array-in-sets-of-k-consecutive-numbers"},"Divide Array in Sets of K Consecutive Numbers"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Sorting"),(0,n.kt)("h2",{id:"maximum-number-of-occurrences-of-a-substring"},"Maximum Number of Occurrences of a Substring"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sliding Window"),(0,n.kt)("h2",{id:"sum-of-mutated-array-closest-to-target"},"Sum of Mutated Array Closest to Target"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sorting"),(0,n.kt)("h2",{id:"deepest-leaves-sum"},"Deepest Leaves Sum"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"all-elements-in-two-binary-search-trees"},"All Elements in Two Binary Search Trees"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Search Tree, Sorting, Binary Tree"),(0,n.kt)("h2",{id:"jump-game-iii"},"Jump Game III"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"running-total-for-different-genders"},"Running Total for Different Genders"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"xor-queries-of-a-subarray"},"XOR Queries of a Subarray"),(0,n.kt)("p",null,"Tags: Array, Bit Manipulation, Prefix Sum"),(0,n.kt)("h2",{id:"get-watched-videos-by-your-friends"},"Get Watched Videos by Your Friends"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Breadth-First Search, Sorting"),(0,n.kt)("h2",{id:"matrix-block-sum"},"Matrix Block Sum"),(0,n.kt)("p",null,"Tags: Array, Matrix, Prefix Sum"),(0,n.kt)("h2",{id:"sum-of-nodes-with-even-valued-grandparent"},"Sum of Nodes with Even-Valued Grandparent"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"minimum-flips-to-make-a-or-b-equal-to-c"},"Minimum Flips to Make a OR b Equal to c"),(0,n.kt)("p",null,"Tags: Bit Manipulation"),(0,n.kt)("h2",{id:"number-of-operations-to-make-network-connected"},"Number of Operations to Make Network Connected"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Union Find, Graph"),(0,n.kt)("h2",{id:"restaurant-growth"},"Restaurant Growth"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"print-words-vertically"},"Print Words Vertically"),(0,n.kt)("p",null,"Tags: Array, String, Simulation"),(0,n.kt)("h2",{id:"delete-leaves-with-a-given-value"},"Delete Leaves With a Given Value"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"break-a-palindrome"},"Break a Palindrome"),(0,n.kt)("p",null,"Tags: String, Greedy"),(0,n.kt)("h2",{id:"sort-the-matrix-diagonally"},"Sort the Matrix Diagonally"),(0,n.kt)("p",null,"Tags: Array, Sorting, Matrix"),(0,n.kt)("h2",{id:"filter-restaurants-by-vegan-friendly-price-and-distance"},"Filter Restaurants by Vegan-Friendly, Price and Distance"),(0,n.kt)("p",null,"Tags: Array, Sorting"),(0,n.kt)("h2",{id:"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance"},"Find the City With the Smallest Number of Neighbors at a Threshold Distance"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Graph, Shortest Path"),(0,n.kt)("h2",{id:"reduce-array-size-to-the-half"},"Reduce Array Size to The Half"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Sorting, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"maximum-product-of-splitted-binary-tree"},"Maximum Product of Splitted Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"movie-rating"},"Movie Rating"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold"},"Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold"),(0,n.kt)("p",null,"Tags: Array, Sliding Window"),(0,n.kt)("h2",{id:"angle-between-hands-of-a-clock"},"Angle Between Hands of a Clock"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"minimum-number-of-steps-to-make-two-strings-anagram"},"Minimum Number of Steps to Make Two Strings Anagram"),(0,n.kt)("p",null,"Tags: Hash Table, String, Counting"),(0,n.kt)("h2",{id:"tweet-counts-per-frequency"},"Tweet Counts Per Frequency"),(0,n.kt)("p",null,"Tags: Hash Table, Binary Search, Design, Sorting, Ordered Set"),(0,n.kt)("h2",{id:"product-of-the-last-k-numbers"},"Product of the Last K Numbers"),(0,n.kt)("p",null,"Tags: Array, Math, Design, Queue, Data Stream"),(0,n.kt)("h2",{id:"maximum-number-of-events-that-can-be-attended"},"Maximum Number of Events That Can Be Attended"),(0,n.kt)("p",null,"Tags: Array, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"activity-participants"},"Activity Participants"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"apply-discount-every-n-orders"},"Apply Discount Every n Orders"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Design"),(0,n.kt)("h2",{id:"number-of-substrings-containing-all-three-characters"},"Number of Substrings Containing All Three Characters"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sliding Window"),(0,n.kt)("h2",{id:"validate-binary-tree-nodes"},"Validate Binary Tree Nodes"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Union Find, Graph, Binary Tree"),(0,n.kt)("h2",{id:"closest-divisors"},"Closest Divisors"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"number-of-trusted-contacts-of-a-customer"},"Number of Trusted Contacts of a Customer"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"rank-teams-by-votes"},"Rank Teams by Votes"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Sorting, Counting"),(0,n.kt)("h2",{id:"linked-list-in-binary-tree"},"Linked List in Binary Tree"),(0,n.kt)("p",null,"Tags: Linked List, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"find-the-longest-substring-containing-vowels-in-even-counts"},"Find the Longest Substring Containing Vowels in Even Counts"),(0,n.kt)("p",null,"Tags: Hash Table, String, Bit Manipulation, Prefix Sum"),(0,n.kt)("h2",{id:"longest-zigzag-path-in-a-binary-tree"},"Longest ZigZag Path in a Binary Tree"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"number-of-times-binary-string-is-prefix-aligned"},"Number of Times Binary String Is Prefix-Aligned"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"time-needed-to-inform-all-employees"},"Time Needed to Inform All Employees"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"design-a-stack-with-increment-operation"},"Design a Stack With Increment Operation"),(0,n.kt)("p",null,"Tags: Array, Stack, Design"),(0,n.kt)("h2",{id:"balance-a-binary-search-tree"},"Balance a Binary Search Tree"),(0,n.kt)("p",null,"Tags: Divide and Conquer, Greedy, Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"cinema-seat-allocation"},"Cinema Seat Allocation"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Bit Manipulation"),(0,n.kt)("h2",{id:"sort-integers-by-the-power-value"},"Sort Integers by The Power Value"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Memoization, Sorting"),(0,n.kt)("h2",{id:"four-divisors"},"Four Divisors"),(0,n.kt)("p",null,"Tags: Array, Math"),(0,n.kt)("h2",{id:"check-if-there-is-a-valid-path-in-a-grid"},"Check if There is a Valid Path in a Grid"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Matrix"),(0,n.kt)("h2",{id:"capital-gainloss"},"Capital Gain/Loss"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"count-number-of-teams"},"Count Number of Teams"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Binary Indexed Tree"),(0,n.kt)("h2",{id:"design-underground-system"},"Design Underground System"),(0,n.kt)("p",null,"Tags: Hash Table, String, Design"),(0,n.kt)("h2",{id:"customers-who-bought-products-a-and-b-but-not-c"},"Customers Who Bought Products A and B but Not C"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"construct-k-palindrome-strings"},"Construct K Palindrome Strings"),(0,n.kt)("p",null,"Tags: Hash Table, String, Greedy, Counting"),(0,n.kt)("h2",{id:"circle-and-rectangle-overlapping"},"Circle and Rectangle Overlapping"),(0,n.kt)("p",null,"Tags: Math, Geometry"),(0,n.kt)("h2",{id:"number-of-steps-to-reduce-a-number-in-binary-representation-to-one"},"Number of Steps to Reduce a Number in Binary Representation to One"),(0,n.kt)("p",null,"Tags: String, Bit Manipulation"),(0,n.kt)("h2",{id:"longest-happy-string"},"Longest Happy String"),(0,n.kt)("p",null,"Tags: String, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"queries-on-a-permutation-with-key"},"Queries on a Permutation With Key"),(0,n.kt)("p",null,"Tags: Array, Binary Indexed Tree, Simulation"),(0,n.kt)("h2",{id:"html-entity-parser"},"HTML Entity Parser"),(0,n.kt)("p",null,"Tags: Hash Table, String"),(0,n.kt)("h2",{id:"find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k"},"Find the Minimum Number of Fibonacci Numbers Whose Sum Is K"),(0,n.kt)("p",null,"Tags: Greedy"),(0,n.kt)("h2",{id:"the-k-th-lexicographical-string-of-all-happy-strings-of-length-n"},"The k-th Lexicographical String of All Happy Strings of Length n"),(0,n.kt)("p",null,"Tags: String, Backtracking"),(0,n.kt)("h2",{id:"display-table-of-food-orders-in-a-restaurant"},"Display Table of Food Orders in a Restaurant"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Sorting, Ordered Set"),(0,n.kt)("h2",{id:"minimum-number-of-frogs-croaking"},"Minimum Number of Frogs Croaking"),(0,n.kt)("p",null,"Tags: String, Counting"),(0,n.kt)("h2",{id:"maximum-points-you-can-obtain-from-cards"},"Maximum Points You Can Obtain from Cards"),(0,n.kt)("p",null,"Tags: Array, Sliding Window, Prefix Sum"),(0,n.kt)("h2",{id:"diagonal-traverse-ii"},"Diagonal Traverse II"),(0,n.kt)("p",null,"Tags: Array, Sorting, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"leftmost-column-with-at-least-a-one"},"Leftmost Column with at Least a One"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Matrix, Interactive"),(0,n.kt)("h2",{id:"first-unique-number"},"First Unique Number"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Design, Queue, Data Stream"),(0,n.kt)("h2",{id:"check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree"},"Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"max-difference-you-can-get-from-changing-an-integer"},"Max Difference You Can Get From Changing an Integer"),(0,n.kt)("p",null,"Tags: Math, Greedy"),(0,n.kt)("h2",{id:"check-if-a-string-can-break-another-string"},"Check If a String Can Break Another String"),(0,n.kt)("p",null,"Tags: String, Greedy, Sorting"),(0,n.kt)("h2",{id:"longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit"},"Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit"),(0,n.kt)("p",null,"Tags: Array, Queue, Sliding Window, Heap (Priority Queue), Ordered Set, Monotonic Queue"),(0,n.kt)("h2",{id:"evaluate-boolean-expression"},"Evaluate Boolean Expression"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"count-triplets-that-can-form-two-arrays-of-equal-xor"},"Count Triplets That Can Form Two Arrays of Equal XOR"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Bit Manipulation, Prefix Sum"),(0,n.kt)("h2",{id:"minimum-time-to-collect-all-apples-in-a-tree"},"Minimum Time to Collect All Apples in a Tree"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"apples--oranges"},"Apples & Oranges"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"simplified-fractions"},"Simplified Fractions"),(0,n.kt)("p",null,"Tags: Math, String, Number Theory"),(0,n.kt)("h2",{id:"count-good-nodes-in-binary-tree"},"Count Good Nodes in Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"rearrange-words-in-a-sentence"},"Rearrange Words in a Sentence"),(0,n.kt)("p",null,"Tags: String, Sorting"),(0,n.kt)("h2",{id:"people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list"},"People Whose List of Favorite Companies Is Not a Subset of Another List"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String"),(0,n.kt)("h2",{id:"active-users"},"Active Users"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximum-number-of-vowels-in-a-substring-of-given-length"},"Maximum Number of Vowels in a Substring of Given Length"),(0,n.kt)("p",null,"Tags: String, Sliding Window"),(0,n.kt)("h2",{id:"pseudo-palindromic-paths-in-a-binary-tree"},"Pseudo-Palindromic Paths in a Binary Tree"),(0,n.kt)("p",null,"Tags: Bit Manipulation, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"rectangles-area"},"Rectangles Area"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"check-if-a-string-contains-all-binary-codes-of-size-k"},"Check If a String Contains All Binary Codes of Size K"),(0,n.kt)("p",null,"Tags: Hash Table, String, Bit Manipulation, Rolling Hash, Hash Function"),(0,n.kt)("h2",{id:"course-schedule-iv"},"Course Schedule IV"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Topological Sort"),(0,n.kt)("h2",{id:"maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts"},"Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"reorder-routes-to-make-all-paths-lead-to-the-city-zero"},"Reorder Routes to Make All Paths Lead to the City Zero"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph"),(0,n.kt)("h2",{id:"calculate-salaries"},"Calculate Salaries"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"the-k-strongest-values-in-an-array"},"The k Strongest Values in an Array"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"design-browser-history"},"Design Browser History"),(0,n.kt)("p",null,"Tags: Array, Linked List, Stack, Design, Doubly-Linked List, Data Stream"),(0,n.kt)("h2",{id:"subrectangle-queries"},"Subrectangle Queries"),(0,n.kt)("p",null,"Tags: Array, Design, Matrix"),(0,n.kt)("h2",{id:"find-two-non-overlapping-sub-arrays-each-with-target-sum"},"Find Two Non-overlapping Sub-arrays Each With Target Sum"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Binary Search, Dynamic Programming, Sliding Window"),(0,n.kt)("h2",{id:"least-number-of-unique-integers-after-k-removals"},"Least Number of Unique Integers after K Removals"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Sorting, Counting"),(0,n.kt)("h2",{id:"minimum-number-of-days-to-make-m-bouquets"},"Minimum Number of Days to Make m Bouquets"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"clone-binary-tree-with-random-pointer"},"Clone Binary Tree With Random Pointer"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"making-file-names-unique"},"Making File Names Unique"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String"),(0,n.kt)("h2",{id:"avoid-flood-in-the-city"},"Avoid Flood in The City"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Binary Search, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"clone-n-ary-tree"},"Clone N-ary Tree"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search"),(0,n.kt)("h2",{id:"the-kth-factor-of-n"},"The kth Factor of n"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"longest-subarray-of-1s-after-deleting-one-element"},"Longest Subarray of 1's After Deleting One Element"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming, Sliding Window"),(0,n.kt)("h2",{id:"check-if-array-pairs-are-divisible-by-k"},"Check If Array Pairs Are Divisible by k"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Counting"),(0,n.kt)("h2",{id:"number-of-subsequences-that-satisfy-the-given-sum-condition"},"Number of Subsequences That Satisfy the Given Sum Condition"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Sorting"),(0,n.kt)("h2",{id:"design-a-file-sharing-system"},"Design a File Sharing System"),(0,n.kt)("p",null,"Tags: Hash Table, Design, Heap (Priority Queue), Data Stream"),(0,n.kt)("h2",{id:"countries-you-can-safely-invest-in"},"Countries You Can Safely Invest In"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"last-moment-before-all-ants-fall-out-of-a-plank"},"Last Moment Before All Ants Fall Out of a Plank"),(0,n.kt)("p",null,"Tags: Array, Brainteaser, Simulation"),(0,n.kt)("h2",{id:"count-submatrices-with-all-ones"},"Count Submatrices With All Ones"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Stack, Matrix, Monotonic Stack"),(0,n.kt)("h2",{id:"find-root-of-n-ary-tree"},"Find Root of N-Ary Tree"),(0,n.kt)("p",null,"Tags: Hash Table, Bit Manipulation, Tree, Depth-First Search"),(0,n.kt)("h2",{id:"range-sum-of-sorted-subarray-sums"},"Range Sum of Sorted Subarray Sums"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Sorting"),(0,n.kt)("h2",{id:"minimum-difference-between-largest-and-smallest-value-in-three-moves"},"Minimum Difference Between Largest and Smallest Value in Three Moves"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"number-of-substrings-with-only-1s"},"Number of Substrings With Only 1s"),(0,n.kt)("p",null,"Tags: Math, String"),(0,n.kt)("h2",{id:"path-with-maximum-probability"},"Path with Maximum Probability"),(0,n.kt)("p",null,"Tags: Graph, Heap (Priority Queue), Shortest Path"),(0,n.kt)("h2",{id:"number-of-nodes-in-the-sub-tree-with-the-same-label"},"Number of Nodes in the Sub-Tree With the Same Label"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search, Counting"),(0,n.kt)("h2",{id:"diameter-of-n-ary-tree"},"Diameter of N-Ary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search"),(0,n.kt)("h2",{id:"number-of-sub-arrays-with-odd-sum"},"Number of Sub-arrays With Odd Sum"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming, Prefix Sum"),(0,n.kt)("h2",{id:"number-of-good-ways-to-split-a-string"},"Number of Good Ways to Split a String"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Bit Manipulation"),(0,n.kt)("h2",{id:"minimum-suffix-flips"},"Minimum Suffix Flips"),(0,n.kt)("p",null,"Tags: String, Greedy"),(0,n.kt)("h2",{id:"number-of-good-leaf-nodes-pairs"},"Number of Good Leaf Nodes Pairs"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"the-most-recent-three-orders"},"The Most Recent Three Orders"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"find-the-index-of-the-large-integer"},"Find the Index of the Large Integer"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Interactive"),(0,n.kt)("h2",{id:"find-the-winner-of-an-array-game"},"Find the Winner of an Array Game"),(0,n.kt)("p",null,"Tags: Array, Simulation"),(0,n.kt)("h2",{id:"minimum-swaps-to-arrange-a-binary-grid"},"Minimum Swaps to Arrange a Binary Grid"),(0,n.kt)("p",null,"Tags: Array, Greedy, Matrix"),(0,n.kt)("h2",{id:"guess-the-majority-in-a-hidden-array"},"Guess the Majority in a Hidden Array"),(0,n.kt)("p",null,"Tags: Array, Math, Interactive"),(0,n.kt)("h2",{id:"can-convert-string-in-k-moves"},"Can Convert String in K Moves"),(0,n.kt)("p",null,"Tags: Hash Table, String"),(0,n.kt)("h2",{id:"minimum-insertions-to-balance-a-parentheses-string"},"Minimum Insertions to Balance a Parentheses String"),(0,n.kt)("p",null,"Tags: String, Stack, Greedy"),(0,n.kt)("h2",{id:"find-kth-bit-in-nth-binary-string"},"Find Kth Bit in Nth Binary String"),(0,n.kt)("p",null,"Tags: String, Recursion"),(0,n.kt)("h2",{id:"maximum-number-of-non-overlapping-subarrays-with-sum-equals-target"},"Maximum Number of Non-Overlapping Subarrays With Sum Equals Target"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Prefix Sum"),(0,n.kt)("h2",{id:"the-most-recent-orders-for-each-product"},"The Most Recent Orders for Each Product"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"minimum-operations-to-make-array-equal"},"Minimum Operations to Make Array Equal"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"magnetic-force-between-two-balls"},"Magnetic Force Between Two Balls"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sorting"),(0,n.kt)("h2",{id:"strings-differ-by-one-character"},"Strings Differ by One Character"),(0,n.kt)("p",null,"Tags: Hash Table, String, Rolling Hash, Hash Function"),(0,n.kt)("h2",{id:"bank-account-summary"},"Bank Account Summary"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"minimum-number-of-vertices-to-reach-all-nodes"},"Minimum Number of Vertices to Reach All Nodes"),(0,n.kt)("p",null,"Tags: Graph"),(0,n.kt)("h2",{id:"minimum-numbers-of-function-calls-to-make-target-array"},"Minimum Numbers of Function Calls to Make Target Array"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"detect-cycles-in-2d-grid"},"Detect Cycles in 2D Grid"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Matrix"),(0,n.kt)("h2",{id:"maximum-number-of-coins-you-can-get"},"Maximum Number of Coins You Can Get"),(0,n.kt)("p",null,"Tags: Array, Math, Greedy, Sorting, Game Theory"),(0,n.kt)("h2",{id:"find-latest-group-of-size-m"},"Find Latest Group of Size M"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Simulation"),(0,n.kt)("h2",{id:"put-boxes-into-the-warehouse-i"},"Put Boxes Into the Warehouse I"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"maximum-length-of-subarray-with-positive-product"},"Maximum Length of Subarray With Positive Product"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"dot-product-of-two-sparse-vectors"},"Dot Product of Two Sparse Vectors"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Two Pointers, Design"),(0,n.kt)("h2",{id:"number-of-ways-to-split-a-string"},"Number of Ways to Split a String"),(0,n.kt)("p",null,"Tags: Math, String"),(0,n.kt)("h2",{id:"shortest-subarray-to-be-removed-to-make-array-sorted"},"Shortest Subarray to be Removed to Make Array Sorted"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers"},"Number of Ways Where Square of Number Is Equal to Product of Two Numbers"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Two Pointers"),(0,n.kt)("h2",{id:"minimum-time-to-make-rope-colorful"},"Minimum Time to Make Rope Colorful"),(0,n.kt)("p",null,"Tags: Array, String, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"put-boxes-into-the-warehouse-ii"},"Put Boxes Into the Warehouse II"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"count-unhappy-friends"},"Count Unhappy Friends"),(0,n.kt)("p",null,"Tags: Array, Simulation"),(0,n.kt)("h2",{id:"min-cost-to-connect-all-points"},"Min Cost to Connect All Points"),(0,n.kt)("p",null,"Tags: Array, Union Find, Minimum Spanning Tree"),(0,n.kt)("h2",{id:"binary-search-tree-iterator-ii"},"Binary Search Tree Iterator II"),(0,n.kt)("p",null,"Tags: Stack, Tree, Design, Binary Search Tree, Binary Tree, Iterator"),(0,n.kt)("h2",{id:"maximum-sum-obtained-of-any-permutation"},"Maximum Sum Obtained of Any Permutation"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting, Prefix Sum"),(0,n.kt)("h2",{id:"make-sum-divisible-by-p"},"Make Sum Divisible by P"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Prefix Sum"),(0,n.kt)("h2",{id:"split-a-string-into-the-max-number-of-unique-substrings"},"Split a String Into the Max Number of Unique Substrings"),(0,n.kt)("p",null,"Tags: Hash Table, String, Backtracking"),(0,n.kt)("h2",{id:"maximum-non-negative-product-in-a-matrix"},"Maximum Non Negative Product in a Matrix"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"the-most-frequently-ordered-products-for-each-customer"},"The Most Frequently Ordered Products for Each Customer"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximum-profit-of-operating-a-centennial-wheel"},"Maximum Profit of Operating a Centennial Wheel"),(0,n.kt)("p",null,"Tags: Array, Simulation"),(0,n.kt)("h2",{id:"throne-inheritance"},"Throne Inheritance"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Design"),(0,n.kt)("h2",{id:"find-nearest-right-node-in-binary-tree"},"Find Nearest Right Node in Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"alert-using-same-key-card-three-or-more-times-in-a-one-hour-period"},"Alert Using Same Key-Card Three or More Times in a One Hour Period"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Sorting"),(0,n.kt)("h2",{id:"find-valid-matrix-given-row-and-column-sums"},"Find Valid Matrix Given Row and Column Sums"),(0,n.kt)("p",null,"Tags: Array, Greedy, Matrix"),(0,n.kt)("h2",{id:"even-odd-tree"},"Even Odd Tree"),(0,n.kt)("p",null,"Tags: Tree, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"check-if-two-expression-trees-are-equivalent"},"Check If Two Expression Trees are Equivalent"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"find-the-missing-ids"},"Find the Missing IDs"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximal-network-rank"},"Maximal Network Rank"),(0,n.kt)("p",null,"Tags: Graph"),(0,n.kt)("h2",{id:"split-two-strings-to-make-palindrome"},"Split Two Strings to Make Palindrome"),(0,n.kt)("p",null,"Tags: Two Pointers, String, Greedy"),(0,n.kt)("h2",{id:"maximum-font-to-fit-a-sentence-in-a-screen"},"Maximum Font to Fit a Sentence in a Screen"),(0,n.kt)("p",null,"Tags: Array, String, Binary Search, Interactive"),(0,n.kt)("h2",{id:"coordinate-with-maximum-network-quality"},"Coordinate With Maximum Network Quality"),(0,n.kt)("p",null,"Tags: Array, Enumeration"),(0,n.kt)("h2",{id:"number-of-sets-of-k-non-overlapping-line-segments"},"Number of Sets of K Non-Overlapping Line Segments"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming"),(0,n.kt)("h2",{id:"lexicographically-smallest-string-after-applying-operations"},"Lexicographically Smallest String After Applying Operations"),(0,n.kt)("p",null,"Tags: String, Breadth-First Search"),(0,n.kt)("h2",{id:"best-team-with-no-conflicts"},"Best Team With No Conflicts"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Sorting"),(0,n.kt)("h2",{id:"design-an-expression-tree-with-evaluate-function"},"Design an Expression Tree With Evaluate Function"),(0,n.kt)("p",null,"Tags: Math, Stack, Tree, Design, Binary Tree"),(0,n.kt)("h2",{id:"arithmetic-subarrays"},"Arithmetic Subarrays"),(0,n.kt)("p",null,"Tags: Array, Sorting"),(0,n.kt)("h2",{id:"path-with-minimum-effort"},"Path With Minimum Effort"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Depth-First Search, Breadth-First Search, Union Find, Heap (Priority Queue), Matrix"),(0,n.kt)("h2",{id:"add-two-polynomials-represented-as-linked-lists"},"Add Two Polynomials Represented as Linked Lists"),(0,n.kt)("p",null,"Tags: Linked List, Math, Two Pointers"),(0,n.kt)("h2",{id:"widest-vertical-area-between-two-points-containing-no-points"},"Widest Vertical Area Between Two Points Containing No Points"),(0,n.kt)("p",null,"Tags: Array, Sorting"),(0,n.kt)("h2",{id:"count-substrings-that-differ-by-one-character"},"Count Substrings That Differ by One Character"),(0,n.kt)("p",null,"Tags: Hash Table, String, Dynamic Programming"),(0,n.kt)("h2",{id:"count-sorted-vowel-strings"},"Count Sorted Vowel Strings"),(0,n.kt)("p",null,"Tags: Dynamic Programming"),(0,n.kt)("h2",{id:"furthest-building-you-can-reach"},"Furthest Building You Can Reach"),(0,n.kt)("p",null,"Tags: Array, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"lowest-common-ancestor-of-a-binary-tree-ii"},"Lowest Common Ancestor of a Binary Tree II"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"minimum-deletions-to-make-character-frequencies-unique"},"Minimum Deletions to Make Character Frequencies Unique"),(0,n.kt)("p",null,"Tags: String, Greedy, Sorting"),(0,n.kt)("h2",{id:"sell-diminishing-valued-colored-balls"},"Sell Diminishing-Valued Colored Balls"),(0,n.kt)("p",null,"Tags: Array, Math, Binary Search, Greedy, Sorting, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"lowest-common-ancestor-of-a-binary-tree-iii"},"Lowest Common Ancestor of a Binary Tree III"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Binary Tree"),(0,n.kt)("h2",{id:"minimum-deletions-to-make-string-balanced"},"Minimum Deletions to Make String Balanced"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Stack"),(0,n.kt)("h2",{id:"minimum-jumps-to-reach-home"},"Minimum Jumps to Reach Home"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Breadth-First Search"),(0,n.kt)("h2",{id:"determine-if-two-strings-are-close"},"Determine if Two Strings Are Close"),(0,n.kt)("p",null,"Tags: Hash Table, String, Sorting"),(0,n.kt)("h2",{id:"minimum-operations-to-reduce-x-to-zero"},"Minimum Operations to Reduce X to Zero"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Binary Search, Sliding Window, Prefix Sum"),(0,n.kt)("h2",{id:"correct-a-binary-tree"},"Correct a Binary Tree"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"smallest-string-with-a-given-numeric-value"},"Smallest String With A Given Numeric Value"),(0,n.kt)("p",null,"Tags: String, Greedy"),(0,n.kt)("h2",{id:"ways-to-make-a-fair-array"},"Ways to Make a Fair Array"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"change-the-root-of-a-binary-tree"},"Change the Root of a Binary Tree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"merge-in-between-linked-lists"},"Merge In Between Linked Lists"),(0,n.kt)("p",null,"Tags: Linked List"),(0,n.kt)("h2",{id:"design-front-middle-back-queue"},"Design Front Middle Back Queue"),(0,n.kt)("p",null,"Tags: Array, Linked List, Design, Queue, Data Stream"),(0,n.kt)("h2",{id:"find-the-most-competitive-subsequence"},"Find the Most Competitive Subsequence"),(0,n.kt)("p",null,"Tags: Array, Stack, Greedy, Monotonic Stack"),(0,n.kt)("h2",{id:"minimum-moves-to-make-array-complementary"},"Minimum Moves to Make Array Complementary"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Prefix Sum"),(0,n.kt)("h2",{id:"lowest-common-ancestor-of-a-binary-tree-iv"},"Lowest Common Ancestor of a Binary Tree IV"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"max-number-of-k-sum-pairs"},"Max Number of K-Sum Pairs"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"concatenation-of-consecutive-binary-numbers"},"Concatenation of Consecutive Binary Numbers"),(0,n.kt)("p",null,"Tags: Math, Bit Manipulation, Simulation"),(0,n.kt)("h2",{id:"longest-palindromic-subsequence-ii"},"Longest Palindromic Subsequence II"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming"),(0,n.kt)("h2",{id:"sum-of-absolute-differences-in-a-sorted-array"},"Sum of Absolute Differences in a Sorted Array"),(0,n.kt)("p",null,"Tags: Array, Math, Prefix Sum"),(0,n.kt)("h2",{id:"stone-game-vi"},"Stone Game VI"),(0,n.kt)("p",null,"Tags: Array, Math, Greedy, Sorting, Heap (Priority Queue), Game Theory"),(0,n.kt)("h2",{id:"partitioning-into-minimum-number-of-deci-binary-numbers"},"Partitioning Into Minimum Number Of Deci-Binary Numbers"),(0,n.kt)("p",null,"Tags: String, Greedy"),(0,n.kt)("h2",{id:"stone-game-vii"},"Stone Game VII"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming, Game Theory"),(0,n.kt)("h2",{id:"maximum-erasure-value"},"Maximum Erasure Value"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Sliding Window"),(0,n.kt)("h2",{id:"jump-game-vi"},"Jump Game VI"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Queue, Sliding Window, Heap (Priority Queue), Monotonic Queue"),(0,n.kt)("h2",{id:"number-of-distinct-substrings-in-a-string"},"Number of Distinct Substrings in a String"),(0,n.kt)("p",null,"Tags: String, Trie, Rolling Hash, Suffix Array, Hash Function"),(0,n.kt)("h2",{id:"number-of-calls-between-two-persons"},"Number of Calls Between Two Persons"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"average-waiting-time"},"Average Waiting Time"),(0,n.kt)("p",null,"Tags: Array, Simulation"),(0,n.kt)("h2",{id:"maximum-binary-string-after-change"},"Maximum Binary String After Change"),(0,n.kt)("p",null,"Tags: String, Greedy"),(0,n.kt)("h2",{id:"maximum-number-of-eaten-apples"},"Maximum Number of Eaten Apples"),(0,n.kt)("p",null,"Tags: Array, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"where-will-the-ball-fall"},"Where Will the Ball Fall"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Depth-First Search, Matrix, Simulation"),(0,n.kt)("h2",{id:"biggest-window-between-visits"},"Biggest Window Between Visits"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"count-good-meals"},"Count Good Meals"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"ways-to-split-array-into-three-subarrays"},"Ways to Split Array Into Three Subarrays"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Prefix Sum"),(0,n.kt)("h2",{id:"count-apples-and-oranges"},"Count Apples and Oranges"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximum-score-from-removing-substrings"},"Maximum Score From Removing Substrings"),(0,n.kt)("p",null,"Tags: String, Stack, Greedy"),(0,n.kt)("h2",{id:"construct-the-lexicographically-largest-valid-sequence"},"Construct the Lexicographically Largest Valid Sequence"),(0,n.kt)("p",null,"Tags: Array, Backtracking"),(0,n.kt)("h2",{id:"swapping-nodes-in-a-linked-list"},"Swapping Nodes in a Linked List"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers"),(0,n.kt)("h2",{id:"minimize-hamming-distance-after-swap-operations"},"Minimize Hamming Distance After Swap Operations"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Union Find"),(0,n.kt)("h2",{id:"tuple-with-same-product"},"Tuple with Same Product"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"largest-submatrix-with-rearrangements"},"Largest Submatrix With Rearrangements"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting, Matrix"),(0,n.kt)("h2",{id:"shortest-path-to-get-food"},"Shortest Path to Get Food"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"minimum-number-of-people-to-teach"},"Minimum Number of People to Teach"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"decode-xored-permutation"},"Decode XORed Permutation"),(0,n.kt)("p",null,"Tags: Array, Bit Manipulation"),(0,n.kt)("h2",{id:"change-minimum-characters-to-satisfy-one-of-three-conditions"},"Change Minimum Characters to Satisfy One of Three Conditions"),(0,n.kt)("p",null,"Tags: Hash Table, String, Counting, Prefix Sum"),(0,n.kt)("h2",{id:"find-kth-largest-xor-coordinate-value"},"Find Kth Largest XOR Coordinate Value"),(0,n.kt)("p",null,"Tags: Array, Divide and Conquer, Bit Manipulation, Heap (Priority Queue), Matrix, Prefix Sum, Quickselect"),(0,n.kt)("h2",{id:"find-distance-in-a-binary-tree"},"Find Distance in a Binary Tree"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"restore-the-array-from-adjacent-pairs"},"Restore the Array From Adjacent Pairs"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"can-you-eat-your-favorite-candy-on-your-favorite-day"},"Can You Eat Your Favorite Candy on Your Favorite Day?"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"maximum-subarray-sum-after-one-operation"},"Maximum Subarray Sum After One Operation"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"leetflex-banned-accounts"},"Leetflex Banned Accounts"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximum-absolute-sum-of-any-subarray"},"Maximum Absolute Sum of Any Subarray"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"minimum-length-of-string-after-deleting-similar-ends"},"Minimum Length of String After Deleting Similar Ends"),(0,n.kt)("p",null,"Tags: Two Pointers, String"),(0,n.kt)("h2",{id:"maximum-score-from-removing-stones"},"Maximum Score From Removing Stones"),(0,n.kt)("p",null,"Tags: Math, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"largest-merge-of-two-strings"},"Largest Merge Of Two Strings"),(0,n.kt)("p",null,"Tags: Two Pointers, String, Greedy"),(0,n.kt)("h2",{id:"design-most-recently-used-queue"},"Design Most Recently Used Queue"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Stack, Design, Binary Indexed Tree, Ordered Set"),(0,n.kt)("h2",{id:"count-number-of-homogenous-substrings"},"Count Number of Homogenous Substrings"),(0,n.kt)("p",null,"Tags: Math, String"),(0,n.kt)("h2",{id:"minimum-limit-of-balls-in-a-bag"},"Minimum Limit of Balls in a Bag"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"buildings-with-an-ocean-view"},"Buildings With an Ocean View"),(0,n.kt)("p",null,"Tags: Array, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"form-array-by-concatenating-subarrays-of-another-array"},"Form Array by Concatenating Subarrays of Another Array"),(0,n.kt)("p",null,"Tags: Array, Greedy, String Matching"),(0,n.kt)("h2",{id:"map-of-highest-peak"},"Map of Highest Peak"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"minimum-number-of-operations-to-move-all-balls-to-each-box"},"Minimum Number of Operations to Move All Balls to Each Box"),(0,n.kt)("p",null,"Tags: Array, String"),(0,n.kt)("h2",{id:"maximum-score-from-performing-multiplication-operations"},"Maximum Score from Performing Multiplication Operations"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"sort-features-by-popularity"},"Sort Features by Popularity"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Sorting"),(0,n.kt)("h2",{id:"closest-dessert-cost"},"Closest Dessert Cost"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Backtracking"),(0,n.kt)("h2",{id:"equal-sum-arrays-with-minimum-number-of-operations"},"Equal Sum Arrays With Minimum Number of Operations"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Counting"),(0,n.kt)("h2",{id:"shortest-path-in-a-hidden-grid"},"Shortest Path in a Hidden Grid"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Interactive"),(0,n.kt)("h2",{id:"check-if-number-is-a-sum-of-powers-of-three"},"Check if Number is a Sum of Powers of Three"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"sum-of-beauty-of-all-substrings"},"Sum of Beauty of All Substrings"),(0,n.kt)("p",null,"Tags: Hash Table, String, Counting"),(0,n.kt)("h2",{id:"grand-slam-titles"},"Grand Slam Titles"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"minimum-elements-to-add-to-form-a-given-sum"},"Minimum Elements to Add to Form a Given Sum"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"number-of-restricted-paths-from-first-to-last-node"},"Number of Restricted Paths From First to Last Node"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Graph, Topological Sort, Heap (Priority Queue), Shortest Path"),(0,n.kt)("h2",{id:"maximum-average-pass-ratio"},"Maximum Average Pass Ratio"),(0,n.kt)("p",null,"Tags: Array, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"count-pairs-of-equal-substrings-with-minimum-difference"},"Count Pairs of Equal Substrings With Minimum Difference"),(0,n.kt)("p",null,"Tags: Hash Table, String, Greedy"),(0,n.kt)("h2",{id:"design-authentication-manager"},"Design Authentication Manager"),(0,n.kt)("p",null,"Tags: Hash Table, Design"),(0,n.kt)("h2",{id:"maximum-number-of-consecutive-values-you-can-make"},"Maximum Number of Consecutive Values You Can Make"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"number-of-orders-in-the-backlog"},"Number of Orders in the Backlog"),(0,n.kt)("p",null,"Tags: Array, Heap (Priority Queue), Simulation"),(0,n.kt)("h2",{id:"maximum-value-at-a-given-index-in-a-bounded-array"},"Maximum Value at a Given Index in a Bounded Array"),(0,n.kt)("p",null,"Tags: Binary Search, Greedy"),(0,n.kt)("h2",{id:"implement-trie-ii-prefix-tree"},"Implement Trie II (Prefix Tree)"),(0,n.kt)("p",null,"Tags: Hash Table, String, Design, Trie"),(0,n.kt)("h2",{id:"minimum-number-of-operations-to-reinitialize-a-permutation"},"Minimum Number of Operations to Reinitialize a Permutation"),(0,n.kt)("p",null,"Tags: Array, Math, Simulation"),(0,n.kt)("h2",{id:"evaluate-the-bracket-pairs-of-a-string"},"Evaluate the Bracket Pairs of a String"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String"),(0,n.kt)("h2",{id:"minimum-path-cost-in-a-hidden-grid"},"Minimum Path Cost in a Hidden Grid"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Heap (Priority Queue), Interactive"),(0,n.kt)("h2",{id:"find-interview-candidates"},"Find Interview Candidates"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"sentence-similarity-iii"},"Sentence Similarity III"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, String"),(0,n.kt)("h2",{id:"count-nice-pairs-in-an-array"},"Count Nice Pairs in an Array"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Counting"),(0,n.kt)("h2",{id:"finding-the-users-active-minutes"},"Finding the Users Active Minutes"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"minimum-absolute-sum-difference"},"Minimum Absolute Sum Difference"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sorting, Ordered Set"),(0,n.kt)("h2",{id:"maximum-number-of-accepted-invitations"},"Maximum Number of Accepted Invitations"),(0,n.kt)("p",null,"Tags: Array, Backtracking, Matrix"),(0,n.kt)("h2",{id:"find-the-winner-of-the-circular-game"},"Find the Winner of the Circular Game"),(0,n.kt)("p",null,"Tags: Array, Math, Recursion, Queue, Simulation"),(0,n.kt)("h2",{id:"minimum-sideway-jumps"},"Minimum Sideway Jumps"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"queries-on-number-of-points-inside-a-circle"},"Queries on Number of Points Inside a Circle"),(0,n.kt)("p",null,"Tags: Array, Math, Geometry"),(0,n.kt)("h2",{id:"maximum-xor-for-each-query"},"Maximum XOR for Each Query"),(0,n.kt)("p",null,"Tags: Array, Bit Manipulation, Prefix Sum"),(0,n.kt)("h2",{id:"maximum-transaction-each-day"},"Maximum Transaction Each Day"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximum-ice-cream-bars"},"Maximum Ice Cream Bars"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"single-threaded-cpu"},"Single-Threaded CPU"),(0,n.kt)("p",null,"Tags: Array, Sorting, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"remove-duplicates-from-an-unsorted-linked-list"},"Remove Duplicates From an Unsorted Linked List"),(0,n.kt)("p",null,"Tags: Hash Table, Linked List"),(0,n.kt)("h2",{id:"frequency-of-the-most-frequent-element"},"Frequency of the Most Frequent Element"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Greedy, Sliding Window, Sorting, Prefix Sum"),(0,n.kt)("h2",{id:"longest-substring-of-all-vowels-in-order"},"Longest Substring Of All Vowels in Order"),(0,n.kt)("p",null,"Tags: String, Sliding Window"),(0,n.kt)("h2",{id:"league-statistics"},"League Statistics"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"suspicious-bank-accounts"},"Suspicious Bank Accounts"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"seat-reservation-manager"},"Seat Reservation Manager"),(0,n.kt)("p",null,"Tags: Design, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"maximum-element-after-decreasing-and-rearranging"},"Maximum Element After Decreasing and Rearranging"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"splitting-a-string-into-descending-consecutive-values"},"Splitting a String Into Descending Consecutive Values"),(0,n.kt)("p",null,"Tags: String, Backtracking"),(0,n.kt)("h2",{id:"minimum-adjacent-swaps-to-reach-the-kth-smallest-number"},"Minimum Adjacent Swaps to Reach the Kth Smallest Number"),(0,n.kt)("p",null,"Tags: Two Pointers, String, Greedy"),(0,n.kt)("h2",{id:"distinct-numbers-in-each-subarray"},"Distinct Numbers in Each Subarray"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Sliding Window"),(0,n.kt)("h2",{id:"maximum-distance-between-a-pair-of-values"},"Maximum Distance Between a Pair of Values"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Binary Search, Greedy"),(0,n.kt)("h2",{id:"maximum-subarray-min-product"},"Maximum Subarray Min-Product"),(0,n.kt)("p",null,"Tags: Array, Stack, Monotonic Stack, Prefix Sum"),(0,n.kt)("h2",{id:"longest-word-with-all-prefixes"},"Longest Word With All Prefixes"),(0,n.kt)("p",null,"Tags: Depth-First Search, Trie"),(0,n.kt)("h2",{id:"incremental-memory-leak"},"Incremental Memory Leak"),(0,n.kt)("p",null,"Tags: Simulation"),(0,n.kt)("h2",{id:"rotating-the-box"},"Rotating the Box"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Matrix"),(0,n.kt)("h2",{id:"minimum-number-of-swaps-to-make-the-binary-string-alternating"},"Minimum Number of Swaps to Make the Binary String Alternating"),(0,n.kt)("p",null,"Tags: String, Greedy"),(0,n.kt)("h2",{id:"finding-pairs-with-a-certain-sum"},"Finding Pairs With a Certain Sum"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Design"),(0,n.kt)("h2",{id:"orders-with-maximum-quantity-above-average"},"Orders With Maximum Quantity Above Average"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"product-of-two-run-length-encoded-arrays"},"Product of Two Run-Length Encoded Arrays"),(0,n.kt)("p",null,"Tags: Array, Two Pointers"),(0,n.kt)("h2",{id:"minimum-speed-to-arrive-on-time"},"Minimum Speed to Arrive on Time"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"jump-game-vii"},"Jump Game VII"),(0,n.kt)("p",null,"Tags: Two Pointers, String, Prefix Sum"),(0,n.kt)("h2",{id:"minimize-product-sum-of-two-arrays"},"Minimize Product Sum of Two Arrays"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"group-employees-of-the-same-salary"},"Group Employees of the Same Salary"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"minimize-maximum-pair-sum-in-array"},"Minimize Maximum Pair Sum in Array"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Greedy, Sorting"),(0,n.kt)("h2",{id:"get-biggest-three-rhombus-sums-in-a-grid"},"Get Biggest Three Rhombus Sums in a Grid"),(0,n.kt)("p",null,"Tags: Array, Math, Sorting, Heap (Priority Queue), Matrix, Prefix Sum"),(0,n.kt)("h2",{id:"maximum-value-after-insertion"},"Maximum Value after Insertion"),(0,n.kt)("p",null,"Tags: String, Greedy"),(0,n.kt)("h2",{id:"process-tasks-using-servers"},"Process Tasks Using Servers"),(0,n.kt)("p",null,"Tags: Array, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"egg-drop-with-2-eggs-and-n-floors"},"Egg Drop With 2 Eggs and N Floors"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming"),(0,n.kt)("h2",{id:"count-pairs-in-two-arrays"},"Count Pairs in Two Arrays"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sorting"),(0,n.kt)("h2",{id:"reduction-operations-to-make-the-array-elements-equal"},"Reduction Operations to Make the Array Elements Equal"),(0,n.kt)("p",null,"Tags: Array, Sorting"),(0,n.kt)("h2",{id:"minimum-number-of-flips-to-make-the-binary-string-alternating"},"Minimum Number of Flips to Make the Binary String Alternating"),(0,n.kt)("p",null,"Tags: String, Greedy"),(0,n.kt)("h2",{id:"cutting-ribbons"},"Cutting Ribbons"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"find-the-student-that-will-replace-the-chalk"},"Find the Student that Will Replace the Chalk"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Simulation, Prefix Sum"),(0,n.kt)("h2",{id:"largest-magic-square"},"Largest Magic Square"),(0,n.kt)("p",null,"Tags: Array, Matrix, Prefix Sum"),(0,n.kt)("h2",{id:"maximum-number-of-removable-characters"},"Maximum Number of Removable Characters"),(0,n.kt)("p",null,"Tags: Array, String, Binary Search"),(0,n.kt)("h2",{id:"merge-triplets-to-form-target-triplet"},"Merge Triplets to Form Target Triplet"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"find-a-peak-element-ii"},"Find a Peak Element II"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Divide and Conquer, Matrix"),(0,n.kt)("h2",{id:"depth-of-bst-given-insertion-order"},"Depth of BST Given Insertion Order"),(0,n.kt)("p",null,"Tags: Tree, Binary Search Tree, Binary Tree, Ordered Set"),(0,n.kt)("h2",{id:"the-number-of-full-rounds-you-have-played"},"The Number of Full Rounds You Have Played"),(0,n.kt)("p",null,"Tags: Math, String"),(0,n.kt)("h2",{id:"count-sub-islands"},"Count Sub Islands"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Union Find, Matrix"),(0,n.kt)("h2",{id:"minimum-absolute-difference-queries"},"Minimum Absolute Difference Queries"),(0,n.kt)("p",null,"Tags: Array, Hash Table"),(0,n.kt)("h2",{id:"count-salary-categories"},"Count Salary Categories"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"game-of-nim"},"Game of Nim"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming, Bit Manipulation, Brainteaser, Game Theory"),(0,n.kt)("h2",{id:"remove-all-occurrences-of-a-substring"},"Remove All Occurrences of a Substring"),(0,n.kt)("p",null,"Tags: String"),(0,n.kt)("h2",{id:"maximum-alternating-subsequence-sum"},"Maximum Alternating Subsequence Sum"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"cyclically-rotating-a-grid"},"Cyclically Rotating a Grid"),(0,n.kt)("p",null,"Tags: Array, Matrix, Simulation"),(0,n.kt)("h2",{id:"number-of-wonderful-substrings"},"Number of Wonderful Substrings"),(0,n.kt)("p",null,"Tags: Hash Table, String, Bit Manipulation, Prefix Sum"),(0,n.kt)("h2",{id:"kth-smallest-subarray-sum"},"Kth Smallest Subarray Sum"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sliding Window"),(0,n.kt)("h2",{id:"eliminate-maximum-number-of-monsters"},"Eliminate Maximum Number of Monsters"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"count-good-numbers"},"Count Good Numbers"),(0,n.kt)("p",null,"Tags: Math, Recursion"),(0,n.kt)("h2",{id:"nearest-exit-from-entrance-in-maze"},"Nearest Exit from Entrance in Maze"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"sum-game"},"Sum Game"),(0,n.kt)("p",null,"Tags: Math, Greedy, Game Theory"),(0,n.kt)("h2",{id:"unique-length-3-palindromic-subsequences"},"Unique Length-3 Palindromic Subsequences"),(0,n.kt)("p",null,"Tags: Hash Table, String, Prefix Sum"),(0,n.kt)("h2",{id:"confirmation-rate"},"Confirmation Rate"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"add-minimum-number-of-rungs"},"Add Minimum Number of Rungs"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"maximum-number-of-points-with-cost"},"Maximum Number of Points with Cost"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"longest-common-subsequence-between-sorted-arrays"},"Longest Common Subsequence Between Sorted Arrays"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Counting"),(0,n.kt)("h2",{id:"the-number-of-the-smallest-unoccupied-chair"},"The Number of the Smallest Unoccupied Chair"),(0,n.kt)("p",null,"Tags: Array, Heap (Priority Queue), Ordered Set"),(0,n.kt)("h2",{id:"describe-the-painting"},"Describe the Painting"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"largest-number-after-mutating-substring"},"Largest Number After Mutating Substring"),(0,n.kt)("p",null,"Tags: Array, String, Greedy"),(0,n.kt)("h2",{id:"maximum-compatibility-score-sum"},"Maximum Compatibility Score Sum"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Backtracking, Bit Manipulation, Bitmask"),(0,n.kt)("h2",{id:"strong-friendship"},"Strong Friendship"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximum-of-minimum-values-in-all-subarrays"},"Maximum of Minimum Values in All Subarrays"),(0,n.kt)("p",null,"Tags: Array, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"all-the-pairs-with-the-maximum-number-of-common-followers"},"All the Pairs With the Maximum Number of Common Followers"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximum-number-of-weeks-for-which-you-can-work"},"Maximum Number of Weeks for Which You Can Work"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"minimum-garden-perimeter-to-collect-enough-apples"},"Minimum Garden Perimeter to Collect Enough Apples"),(0,n.kt)("p",null,"Tags: Math, Binary Search"),(0,n.kt)("h2",{id:"check-if-move-is-legal"},"Check if Move is Legal"),(0,n.kt)("p",null,"Tags: Array, Matrix, Enumeration"),(0,n.kt)("h2",{id:"minimum-total-space-wasted-with-k-resizing-operations"},"Minimum Total Space Wasted With K Resizing Operations"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"remove-stones-to-minimize-the-total"},"Remove Stones to Minimize the Total"),(0,n.kt)("p",null,"Tags: Array, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"minimum-number-of-swaps-to-make-the-string-balanced"},"Minimum Number of Swaps to Make the String Balanced"),(0,n.kt)("p",null,"Tags: Two Pointers, String, Stack, Greedy"),(0,n.kt)("h2",{id:"binary-searchable-numbers-in-an-unsorted-array"},"Binary Searchable Numbers in an Unsorted Array"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"array-with-elements-not-equal-to-average-of-neighbors"},"Array With Elements Not Equal to Average of Neighbors"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"minimum-non-zero-product-of-the-array-elements"},"Minimum Non-Zero Product of the Array Elements"),(0,n.kt)("p",null,"Tags: Math, Greedy, Recursion"),(0,n.kt)("h2",{id:"count-nodes-equal-to-sum-of-descendants"},"Count Nodes Equal to Sum of Descendants"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Search Tree, Binary Tree"),(0,n.kt)("h2",{id:"maximum-matrix-sum"},"Maximum Matrix Sum"),(0,n.kt)("p",null,"Tags: Array, Greedy, Matrix"),(0,n.kt)("h2",{id:"number-of-ways-to-arrive-at-destination"},"Number of Ways to Arrive at Destination"),(0,n.kt)("p",null,"Tags: Dynamic Programming, Graph, Topological Sort, Shortest Path"),(0,n.kt)("h2",{id:"find-unique-binary-string"},"Find Unique Binary String"),(0,n.kt)("p",null,"Tags: Array, String, Backtracking"),(0,n.kt)("h2",{id:"minimize-the-difference-between-target-and-chosen-elements"},"Minimize the Difference Between Target and Chosen Elements"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Matrix"),(0,n.kt)("h2",{id:"widest-pair-of-indices-with-equal-range-sum"},"Widest Pair of Indices With Equal Range Sum"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Prefix Sum"),(0,n.kt)("h2",{id:"find-the-kth-largest-integer-in-the-array"},"Find the Kth Largest Integer in the Array"),(0,n.kt)("p",null,"Tags: Array, String, Divide and Conquer, Sorting, Heap (Priority Queue), Quickselect"),(0,n.kt)("h2",{id:"minimum-number-of-work-sessions-to-finish-the-tasks"},"Minimum Number of Work Sessions to Finish the Tasks"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Backtracking, Bit Manipulation, Bitmask"),(0,n.kt)("h2",{id:"find-cutoff-score-for-each-school"},"Find Cutoff Score for Each School"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"maximum-number-of-people-that-can-be-caught-in-tag"},"Maximum Number of People That Can Be Caught in Tag"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"count-the-number-of-experiments"},"Count the Number of Experiments"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"find-all-groups-of-farmland"},"Find All Groups of Farmland"),(0,n.kt)("p",null,"Tags: Array, Depth-First Search, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"operations-on-tree"},"Operations on Tree"),(0,n.kt)("p",null,"Tags: Hash Table, Tree, Breadth-First Search, Design"),(0,n.kt)("h2",{id:"the-number-of-weak-characters-in-the-game"},"The Number of Weak Characters in the Game"),(0,n.kt)("p",null,"Tags: Array, Stack, Greedy, Sorting, Monotonic Stack"),(0,n.kt)("h2",{id:"first-day-where-you-have-been-in-all-the-rooms"},"First Day Where You Have Been in All the Rooms"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"smallest-greater-multiple-made-of-two-digits"},"Smallest Greater Multiple Made of Two Digits"),(0,n.kt)("p",null,"Tags: Math, Enumeration"),(0,n.kt)("h2",{id:"number-of-pairs-of-interchangeable-rectangles"},"Number of Pairs of Interchangeable Rectangles"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Counting, Number Theory"),(0,n.kt)("h2",{id:"maximum-product-of-the-length-of-two-palindromic-subsequences"},"Maximum Product of the Length of Two Palindromic Subsequences"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Backtracking, Bit Manipulation, Bitmask"),(0,n.kt)("h2",{id:"find-original-array-from-doubled-array"},"Find Original Array From Doubled Array"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Sorting"),(0,n.kt)("h2",{id:"maximum-earnings-from-taxi"},"Maximum Earnings From Taxi"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Dynamic Programming, Sorting"),(0,n.kt)("h2",{id:"sum-of-beauty-in-the-array"},"Sum of Beauty in the Array"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"detect-squares"},"Detect Squares"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Design, Counting"),(0,n.kt)("h2",{id:"average-height-of-buildings-in-each-segment"},"Average Height of Buildings in Each Segment"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"grid-game"},"Grid Game"),(0,n.kt)("p",null,"Tags: Array, Matrix, Prefix Sum"),(0,n.kt)("h2",{id:"check-if-word-can-be-placed-in-crossword"},"Check if Word Can Be Placed In Crossword"),(0,n.kt)("p",null,"Tags: Array, Matrix, Enumeration"),(0,n.kt)("h2",{id:"number-of-accounts-that-did-not-stream"},"Number of Accounts That Did Not Stream"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"brightest-position-on-street"},"Brightest Position on Street"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum, Ordered Set"),(0,n.kt)("h2",{id:"number-of-pairs-of-strings-with-concatenation-equal-to-target"},"Number of Pairs of Strings With Concatenation Equal to Target"),(0,n.kt)("p",null,"Tags: Array, String"),(0,n.kt)("h2",{id:"maximize-the-confusion-of-an-exam"},"Maximize the Confusion of an Exam"),(0,n.kt)("p",null,"Tags: String, Binary Search, Sliding Window, Prefix Sum"),(0,n.kt)("h2",{id:"find-missing-observations"},"Find Missing Observations"),(0,n.kt)("p",null,"Tags: Array, Math, Simulation"),(0,n.kt)("h2",{id:"stone-game-ix"},"Stone Game IX"),(0,n.kt)("p",null,"Tags: Array, Math, Greedy, Counting, Game Theory"),(0,n.kt)("h2",{id:"count-subarrays-with-more-ones-than-zeros"},"Count Subarrays With More Ones Than Zeros"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Divide and Conquer, Binary Indexed Tree, Segment Tree, Merge Sort, Ordered Set"),(0,n.kt)("h2",{id:"minimum-operations-to-make-a-uni-value-grid"},"Minimum Operations to Make a Uni-Value Grid"),(0,n.kt)("p",null,"Tags: Array, Math, Sorting, Matrix"),(0,n.kt)("h2",{id:"stock-price-fluctuation"},"Stock Price Fluctuation"),(0,n.kt)("p",null,"Tags: Hash Table, Design, Heap (Priority Queue), Data Stream, Ordered Set"),(0,n.kt)("h2",{id:"maximum-alternating-subarray-sum"},"Maximum Alternating Subarray Sum"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"remove-colored-pieces-if-both-neighbors-are-the-same-color"},"Remove Colored Pieces if Both Neighbors are the Same Color"),(0,n.kt)("p",null,"Tags: Math, String, Greedy, Game Theory"),(0,n.kt)("h2",{id:"the-time-when-the-network-becomes-idle"},"The Time When the Network Becomes Idle"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search, Graph"),(0,n.kt)("h2",{id:"accepted-candidates-from-the-interviews"},"Accepted Candidates From the Interviews"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"simple-bank-system"},"Simple Bank System"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Design, Simulation"),(0,n.kt)("h2",{id:"count-number-of-maximum-bitwise-or-subsets"},"Count Number of Maximum Bitwise-OR Subsets"),(0,n.kt)("p",null,"Tags: Array, Backtracking, Bit Manipulation"),(0,n.kt)("h2",{id:"sort-linked-list-already-sorted-using-absolute-values"},"Sort Linked List Already Sorted Using Absolute Values"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers, Sorting"),(0,n.kt)("h2",{id:"next-greater-numerically-balanced-number"},"Next Greater Numerically Balanced Number"),(0,n.kt)("p",null,"Tags: Math, Backtracking, Enumeration"),(0,n.kt)("h2",{id:"count-nodes-with-the-highest-score"},"Count Nodes With the Highest Score"),(0,n.kt)("p",null,"Tags: Array, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"the-category-of-each-member-in-the-store"},"The Category of Each Member in the Store"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"minimum-cost-to-separate-sentence-into-rows"},"Minimum Cost to Separate Sentence Into Rows"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"two-best-non-overlapping-events"},"Two Best Non-Overlapping Events"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Dynamic Programming, Sorting, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"plates-between-candles"},"Plates Between Candles"),(0,n.kt)("p",null,"Tags: Array, String, Binary Search, Prefix Sum"),(0,n.kt)("h2",{id:"find-the-minimum-and-maximum-number-of-nodes-between-critical-points"},"Find the Minimum and Maximum Number of Nodes Between Critical Points"),(0,n.kt)("p",null,"Tags: Linked List"),(0,n.kt)("h2",{id:"minimum-operations-to-convert-number"},"Minimum Operations to Convert Number"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search"),(0,n.kt)("h2",{id:"number-of-spaces-cleaning-robot-cleaned"},"Number of Spaces Cleaning Robot Cleaned"),(0,n.kt)("p",null,"Tags: Array, Matrix, Simulation"),(0,n.kt)("h2",{id:"vowels-of-all-substrings"},"Vowels of All Substrings"),(0,n.kt)("p",null,"Tags: Math, String, Dynamic Programming, Combinatorics"),(0,n.kt)("h2",{id:"minimized-maximum-of-products-distributed-to-any-store"},"Minimized Maximum of Products Distributed to Any Store"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"account-balance"},"Account Balance"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"number-of-equal-count-substrings"},"Number of Equal Count Substrings"),(0,n.kt)("p",null,"Tags: String, Counting, Prefix Sum"),(0,n.kt)("h2",{id:"walking-robot-simulation-ii"},"Walking Robot Simulation II"),(0,n.kt)("p",null,"Tags: Design, Simulation"),(0,n.kt)("h2",{id:"most-beautiful-item-for-each-query"},"Most Beautiful Item for Each Query"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Sorting"),(0,n.kt)("h2",{id:"reverse-nodes-in-even-length-groups"},"Reverse Nodes in Even Length Groups"),(0,n.kt)("p",null,"Tags: Linked List"),(0,n.kt)("h2",{id:"decode-the-slanted-ciphertext"},"Decode the Slanted Ciphertext"),(0,n.kt)("p",null,"Tags: String, Simulation"),(0,n.kt)("h2",{id:"paths-in-maze-that-lead-to-same-room"},"Paths in Maze That Lead to Same Room"),(0,n.kt)("p",null,"Tags: Graph"),(0,n.kt)("h2",{id:"watering-plants"},"Watering Plants"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"range-frequency-queries"},"Range Frequency Queries"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Binary Search, Design, Segment Tree"),(0,n.kt)("h2",{id:"substrings-that-begin-and-end-with-the-same-letter"},"Substrings That Begin and End With the Same Letter"),(0,n.kt)("p",null,"Tags: Hash Table, Math, String, Counting, Prefix Sum"),(0,n.kt)("h2",{id:"drop-type-1-orders-for-customers-with-type-0-orders"},"Drop Type 1 Orders for Customers With Type 0 Orders"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"minimum-number-of-buckets-required-to-collect-rainwater-from-houses"},"Minimum Number of Buckets Required to Collect Rainwater from Houses"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Greedy"),(0,n.kt)("h2",{id:"minimum-cost-homecoming-of-a-robot-in-a-grid"},"Minimum Cost Homecoming of a Robot in a Grid"),(0,n.kt)("p",null,"Tags: Array, Greedy, Matrix"),(0,n.kt)("h2",{id:"k-radius-subarray-averages"},"K Radius Subarray Averages"),(0,n.kt)("p",null,"Tags: Array, Sliding Window"),(0,n.kt)("h2",{id:"removing-minimum-and-maximum-from-array"},"Removing Minimum and Maximum From Array"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"minimum-cost-to-reach-city-with-discounts"},"Minimum Cost to Reach City With Discounts"),(0,n.kt)("p",null,"Tags: Graph, Shortest Path"),(0,n.kt)("h2",{id:"delete-the-middle-node-of-a-linked-list"},"Delete the Middle Node of a Linked List"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers"),(0,n.kt)("h2",{id:"step-by-step-directions-from-a-binary-tree-node-to-another"},"Step-By-Step Directions From a Binary Tree Node to Another"),(0,n.kt)("p",null,"Tags: String, Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"subsequence-of-size-k-with-the-largest-even-sum"},"Subsequence of Size K With the Largest Even Sum"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"find-good-days-to-rob-the-bank"},"Find Good Days to Rob the Bank"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Prefix Sum"),(0,n.kt)("h2",{id:"detonate-the-maximum-bombs"},"Detonate the Maximum Bombs"),(0,n.kt)("p",null,"Tags: Array, Math, Depth-First Search, Breadth-First Search, Graph, Geometry"),(0,n.kt)("h2",{id:"sum-of-subarray-ranges"},"Sum of Subarray Ranges"),(0,n.kt)("p",null,"Tags: Array, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"watering-plants-ii"},"Watering Plants II"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Simulation"),(0,n.kt)("h2",{id:"number-of-unique-flavors-after-sharing-k-candies"},"Number of Unique Flavors After Sharing K Candies"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Sliding Window"),(0,n.kt)("h2",{id:"adding-spaces-to-a-string"},"Adding Spaces to a String"),(0,n.kt)("p",null,"Tags: Array, String, Simulation"),(0,n.kt)("h2",{id:"number-of-smooth-descent-periods-of-a-stock"},"Number of Smooth Descent Periods of a Stock"),(0,n.kt)("p",null,"Tags: Array, Math, Dynamic Programming"),(0,n.kt)("h2",{id:"the-airport-with-the-most-traffic"},"The Airport With the Most Traffic"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"elements-in-array-after-removing-and-replacing-elements"},"Elements in Array After Removing and Replacing Elements"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"find-all-possible-recipes-from-given-supplies"},"Find All Possible Recipes from Given Supplies"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Graph, Topological Sort"),(0,n.kt)("h2",{id:"check-if-a-parentheses-string-can-be-valid"},"Check if a Parentheses String Can Be Valid"),(0,n.kt)("p",null,"Tags: String, Stack, Greedy"),(0,n.kt)("h2",{id:"execution-of-all-suffix-instructions-staying-in-a-grid"},"Execution of All Suffix Instructions Staying in a Grid"),(0,n.kt)("p",null,"Tags: String, Simulation"),(0,n.kt)("h2",{id:"intervals-between-identical-elements"},"Intervals Between Identical Elements"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Prefix Sum"),(0,n.kt)("h2",{id:"number-of-laser-beams-in-a-bank"},"Number of Laser Beams in a Bank"),(0,n.kt)("p",null,"Tags: Array, Math, String, Matrix"),(0,n.kt)("h2",{id:"destroying-asteroids"},"Destroying Asteroids"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"remove-all-ones-with-row-and-column-flips"},"Remove All Ones With Row and Column Flips"),(0,n.kt)("p",null,"Tags: Array, Math, Bit Manipulation, Matrix"),(0,n.kt)("h2",{id:"maximum-twin-sum-of-a-linked-list"},"Maximum Twin Sum of a Linked List"),(0,n.kt)("p",null,"Tags: Linked List, Two Pointers, Stack"),(0,n.kt)("h2",{id:"longest-palindrome-by-concatenating-two-letter-words"},"Longest Palindrome by Concatenating Two Letter Words"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Greedy, Counting"),(0,n.kt)("h2",{id:"minimum-swaps-to-group-all-1s-together-ii"},"Minimum Swaps to Group All 1's Together II"),(0,n.kt)("p",null,"Tags: Array, Sliding Window"),(0,n.kt)("h2",{id:"count-words-obtained-after-adding-a-letter"},"Count Words Obtained After Adding a Letter"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Bit Manipulation, Sorting"),(0,n.kt)("h2",{id:"pour-water-between-buckets-to-make-water-levels-equal"},"Pour Water Between Buckets to Make Water Levels Equal"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"minimum-moves-to-reach-target-score"},"Minimum Moves to Reach Target Score"),(0,n.kt)("p",null,"Tags: Math, Greedy"),(0,n.kt)("h2",{id:"solving-questions-with-brainpower"},"Solving Questions With Brainpower"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"the-number-of-passengers-in-each-bus-i"},"The Number of Passengers in Each Bus I"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"count-the-hidden-sequences"},"Count the Hidden Sequences"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"k-highest-ranked-items-within-a-price-range"},"K Highest Ranked Items Within a Price Range"),(0,n.kt)("p",null,"Tags: Array, Breadth-First Search, Sorting, Heap (Priority Queue), Matrix"),(0,n.kt)("h2",{id:"rearrange-array-elements-by-sign"},"Rearrange Array Elements by Sign"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Simulation"),(0,n.kt)("h2",{id:"find-all-lonely-numbers-in-the-array"},"Find All Lonely Numbers in the Array"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Counting"),(0,n.kt)("h2",{id:"minimum-number-of-lines-to-cover-points"},"Minimum Number of Lines to Cover Points"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Dynamic Programming, Backtracking, Bit Manipulation, Geometry, Bitmask"),(0,n.kt)("h2",{id:"all-divisions-with-the-highest-score-of-a-binary-array"},"All Divisions With the Highest Score of a Binary Array"),(0,n.kt)("p",null,"Tags: Array"),(0,n.kt)("h2",{id:"order-two-columns-independently"},"Order Two Columns Independently"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"partition-array-according-to-given-pivot"},"Partition Array According to Given Pivot"),(0,n.kt)("p",null,"Tags: Array, Two Pointers, Simulation"),(0,n.kt)("h2",{id:"minimum-cost-to-set-cooking-time"},"Minimum Cost to Set Cooking Time"),(0,n.kt)("p",null,"Tags: Math, Enumeration"),(0,n.kt)("h2",{id:"smallest-value-of-the-rearranged-number"},"Smallest Value of the Rearranged Number"),(0,n.kt)("p",null,"Tags: Math, Sorting"),(0,n.kt)("h2",{id:"design-bitset"},"Design Bitset"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Design"),(0,n.kt)("h2",{id:"unique-substrings-with-equal-digit-frequency"},"Unique Substrings With Equal Digit Frequency"),(0,n.kt)("p",null,"Tags: Hash Table, String, Rolling Hash, Counting, Hash Function"),(0,n.kt)("h2",{id:"minimum-operations-to-make-the-array-alternating"},"Minimum Operations to Make the Array Alternating"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Counting"),(0,n.kt)("h2",{id:"removing-minimum-number-of-magic-beans"},"Removing Minimum Number of Magic Beans"),(0,n.kt)("p",null,"Tags: Array, Sorting, Prefix Sum"),(0,n.kt)("h2",{id:"remove-all-ones-with-row-and-column-flips-ii"},"Remove All Ones With Row and Column Flips II"),(0,n.kt)("p",null,"Tags: Array, Bit Manipulation, Breadth-First Search, Matrix"),(0,n.kt)("h2",{id:"the-change-in-global-rankings"},"The Change in Global Rankings"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"find-three-consecutive-integers-that-sum-to-a-given-number"},"Find Three Consecutive Integers That Sum to a Given Number"),(0,n.kt)("p",null,"Tags: Math, Simulation"),(0,n.kt)("h2",{id:"maximum-split-of-positive-even-integers"},"Maximum Split of Positive Even Integers"),(0,n.kt)("p",null,"Tags: Math, Greedy"),(0,n.kt)("h2",{id:"merge-nodes-in-between-zeros"},"Merge Nodes in Between Zeros"),(0,n.kt)("p",null,"Tags: Linked List, Simulation"),(0,n.kt)("h2",{id:"construct-string-with-repeat-limit"},"Construct String With Repeat Limit"),(0,n.kt)("p",null,"Tags: String, Greedy, Heap (Priority Queue), Counting"),(0,n.kt)("h2",{id:"number-of-ways-to-build-sturdy-brick-wall"},"Number of Ways to Build Sturdy Brick Wall"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming, Bit Manipulation, Bitmask"),(0,n.kt)("h2",{id:"minimum-number-of-steps-to-make-two-strings-anagram-ii"},"Minimum Number of Steps to Make Two Strings Anagram II"),(0,n.kt)("p",null,"Tags: Hash Table, String, Counting"),(0,n.kt)("h2",{id:"minimum-time-to-complete-trips"},"Minimum Time to Complete Trips"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"number-of-ways-to-build-house-of-cards"},"Number of Ways to Build House of Cards"),(0,n.kt)("p",null,"Tags: Math, Dynamic Programming"),(0,n.kt)("h2",{id:"sort-the-jumbled-numbers"},"Sort the Jumbled Numbers"),(0,n.kt)("p",null,"Tags: Array, Sorting"),(0,n.kt)("h2",{id:"all-ancestors-of-a-node-in-a-directed-acyclic-graph"},"All Ancestors of a Node in a Directed Acyclic Graph"),(0,n.kt)("p",null,"Tags: Depth-First Search, Breadth-First Search, Graph, Topological Sort"),(0,n.kt)("h2",{id:"append-k-integers-with-minimal-sum"},"Append K Integers With Minimal Sum"),(0,n.kt)("p",null,"Tags: Array, Math, Greedy, Sorting"),(0,n.kt)("h2",{id:"create-binary-tree-from-descriptions"},"Create Binary Tree From Descriptions"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Tree, Depth-First Search, Breadth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"number-of-single-divisor-triplets"},"Number of Single Divisor Triplets"),(0,n.kt)("p",null,"Tags: Math"),(0,n.kt)("h2",{id:"count-artifacts-that-can-be-extracted"},"Count Artifacts That Can Be Extracted"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Simulation"),(0,n.kt)("h2",{id:"maximize-the-topmost-element-after-k-moves"},"Maximize the Topmost Element After K Moves"),(0,n.kt)("p",null,"Tags: Array, Greedy"),(0,n.kt)("h2",{id:"maximize-number-of-subsequences-in-a-string"},"Maximize Number of Subsequences in a String"),(0,n.kt)("p",null,"Tags: String, Greedy, Prefix Sum"),(0,n.kt)("h2",{id:"minimum-operations-to-halve-array-sum"},"Minimum Operations to Halve Array Sum"),(0,n.kt)("p",null,"Tags: Array, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"count-collisions-on-a-road"},"Count Collisions on a Road"),(0,n.kt)("p",null,"Tags: String, Stack"),(0,n.kt)("h2",{id:"maximum-points-in-an-archery-competition"},"Maximum Points in an Archery Competition"),(0,n.kt)("p",null,"Tags: Array, Bit Manipulation, Recursion, Enumeration"),(0,n.kt)("h2",{id:"minimum-health-to-beat-game"},"Minimum Health to Beat Game"),(0,n.kt)("p",null,"Tags: Array, Greedy, Prefix Sum"),(0,n.kt)("h2",{id:"minimum-deletions-to-make-array-beautiful"},"Minimum Deletions to Make Array Beautiful"),(0,n.kt)("p",null,"Tags: Array, Stack, Greedy"),(0,n.kt)("h2",{id:"find-palindrome-with-fixed-length"},"Find Palindrome With Fixed Length"),(0,n.kt)("p",null,"Tags: Array, Math"),(0,n.kt)("h2",{id:"maximum-sum-score-of-array"},"Maximum Sum Score of Array"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"find-triangular-sum-of-an-array"},"Find Triangular Sum of an Array"),(0,n.kt)("p",null,"Tags: Array, Math, Simulation, Combinatorics"),(0,n.kt)("h2",{id:"number-of-ways-to-select-buildings"},"Number of Ways to Select Buildings"),(0,n.kt)("p",null,"Tags: String, Dynamic Programming, Prefix Sum"),(0,n.kt)("h2",{id:"find-players-with-zero-or-one-losses"},"Find Players With Zero or One Losses"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Sorting, Counting"),(0,n.kt)("h2",{id:"maximum-candies-allocated-to-k-children"},"Maximum Candies Allocated to K Children"),(0,n.kt)("p",null,"Tags: Array, Binary Search"),(0,n.kt)("h2",{id:"users-with-two-purchases-within-seven-days"},"Users With Two Purchases Within Seven Days"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"minimize-result-by-adding-parentheses-to-expression"},"Minimize Result by Adding Parentheses to Expression"),(0,n.kt)("p",null,"Tags: String, Enumeration"),(0,n.kt)("h2",{id:"maximum-product-after-k-increments"},"Maximum Product After K Increments"),(0,n.kt)("p",null,"Tags: Array, Greedy, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"count-positions-on-street-with-required-brightness"},"Count Positions on Street With Required Brightness"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"number-of-times-a-driver-was-a-passenger"},"Number of Times a Driver Was a Passenger"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"number-of-ways-to-buy-pens-and-pencils"},"Number of Ways to Buy Pens and Pencils"),(0,n.kt)("p",null,"Tags: Math, Enumeration"),(0,n.kt)("h2",{id:"design-an-atm-machine"},"Design an ATM Machine"),(0,n.kt)("p",null,"Tags: Array, Greedy, Design"),(0,n.kt)("h2",{id:"minimum-rounds-to-complete-all-tasks"},"Minimum Rounds to Complete All Tasks"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Greedy, Counting"),(0,n.kt)("h2",{id:"maximum-trailing-zeros-in-a-cornered-path"},"Maximum Trailing Zeros in a Cornered Path"),(0,n.kt)("p",null,"Tags: Array, Matrix, Prefix Sum"),(0,n.kt)("h2",{id:"count-lattice-points-inside-a-circle"},"Count Lattice Points Inside a Circle"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Math, Geometry, Enumeration"),(0,n.kt)("h2",{id:"count-number-of-rectangles-containing-each-point"},"Count Number of Rectangles Containing Each Point"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Binary Indexed Tree, Sorting"),(0,n.kt)("h2",{id:"minimum-average-difference"},"Minimum Average Difference"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"count-unguarded-cells-in-the-grid"},"Count Unguarded Cells in the Grid"),(0,n.kt)("p",null,"Tags: Array, Matrix, Simulation"),(0,n.kt)("h2",{id:"minimum-consecutive-cards-to-pick-up"},"Minimum Consecutive Cards to Pick Up"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Sliding Window"),(0,n.kt)("h2",{id:"k-divisible-elements-subarrays"},"K Divisible Elements Subarrays"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Trie, Rolling Hash, Hash Function, Enumeration"),(0,n.kt)("h2",{id:"count-nodes-equal-to-average-of-subtree"},"Count Nodes Equal to Average of Subtree"),(0,n.kt)("p",null,"Tags: Tree, Depth-First Search, Binary Tree"),(0,n.kt)("h2",{id:"count-number-of-texts"},"Count Number of Texts"),(0,n.kt)("p",null,"Tags: Hash Table, Math, String, Dynamic Programming"),(0,n.kt)("h2",{id:"minimum-number-of-keypresses"},"Minimum Number of Keypresses"),(0,n.kt)("p",null,"Tags: Array, String, Greedy, Sorting, Counting"),(0,n.kt)("h2",{id:"number-of-ways-to-split-array"},"Number of Ways to Split Array"),(0,n.kt)("p",null,"Tags: Array, Prefix Sum"),(0,n.kt)("h2",{id:"maximum-white-tiles-covered-by-a-carpet"},"Maximum White Tiles Covered by a Carpet"),(0,n.kt)("p",null,"Tags: Array, Binary Search, Greedy, Sorting, Prefix Sum"),(0,n.kt)("h2",{id:"maximum-consecutive-floors-without-special-floors"},"Maximum Consecutive Floors Without Special Floors"),(0,n.kt)("p",null,"Tags: Array, Sorting"),(0,n.kt)("h2",{id:"largest-combination-with-bitwise-and-greater-than-zero"},"Largest Combination With Bitwise AND Greater Than Zero"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Bit Manipulation, Counting"),(0,n.kt)("h2",{id:"maximum-bags-with-full-capacity-of-rocks"},"Maximum Bags With Full Capacity of Rocks"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"minimum-lines-to-represent-a-line-chart"},"Minimum Lines to Represent a Line Chart"),(0,n.kt)("p",null,"Tags: Array, Math, Geometry, Sorting, Number Theory"),(0,n.kt)("h2",{id:"number-of-people-that-can-be-seen-in-a-grid"},"Number of People That Can Be Seen in a Grid"),(0,n.kt)("p",null,"Tags: Array, Stack, Matrix, Monotonic Stack"),(0,n.kt)("h2",{id:"sender-with-largest-word-count"},"Sender With Largest Word Count"),(0,n.kt)("p",null,"Tags: Array, Hash Table, String, Counting"),(0,n.kt)("h2",{id:"maximum-total-importance-of-roads"},"Maximum Total Importance of Roads"),(0,n.kt)("p",null,"Tags: Greedy, Graph, Sorting, Heap (Priority Queue)"),(0,n.kt)("h2",{id:"apply-discount-to-prices"},"Apply Discount to Prices"),(0,n.kt)("p",null,"Tags: String"),(0,n.kt)("h2",{id:"steps-to-make-array-non-decreasing"},"Steps to Make Array Non-decreasing"),(0,n.kt)("p",null,"Tags: Array, Linked List, Stack, Monotonic Stack"),(0,n.kt)("h2",{id:"maximum-profit-from-trading-stocks"},"Maximum Profit From Trading Stocks"),(0,n.kt)("p",null,"Tags: Array, Dynamic Programming"),(0,n.kt)("h2",{id:"products-with-three-or-more-orders-in-two-consecutive-years"},"Products With Three or More Orders in Two Consecutive Years"),(0,n.kt)("p",null,"Tags: Database"),(0,n.kt)("h2",{id:"partition-array-such-that-maximum-difference-is-k"},"Partition Array Such That Maximum Difference Is K"),(0,n.kt)("p",null,"Tags: Array, Greedy, Sorting"),(0,n.kt)("h2",{id:"replace-elements-in-an-array"},"Replace Elements in an Array"),(0,n.kt)("p",null,"Tags: Array, Hash Table, Simulation"),(0,n.kt)("h2",{id:"jump-game-ix"},"Jump Game IX"),(0,n.kt)("p",null,"Tags: "),(0,n.kt)("h2",{id:"resources"},"Resources"))}h.isMDXComponent=!0}}]);