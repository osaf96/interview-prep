"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[8187],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},939:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],u={title:"Medium",description:"This will cover up all the medium questions that are available on Leetcode.",last_modified:new Date("2022-06-10T00:17:44.174Z"),sidebar_label:"Medium"},l=void 0,s={unversionedId:"leetcode-questions/medium",id:"leetcode-questions/medium",title:"Medium",description:"This will cover up all the medium questions that are available on Leetcode.",source:"@site/docs/leetcode-questions/medium.md",sourceDirName:"leetcode-questions",slug:"/leetcode-questions/medium",permalink:"/interview-prep/leetcode-questions/medium",draft:!1,tags:[],version:"current",frontMatter:{title:"Medium",description:"This will cover up all the medium questions that are available on Leetcode.",last_modified:"2022-06-10T00:17:44.174Z",sidebar_label:"Medium"},sidebar:"docs",previous:{title:"Type guards",permalink:"/interview-prep/javascript/typescript/type-guards"},next:{title:"Ask the dumb questions",permalink:"/interview-prep/mindset/ask-dumb-questions"}},p={},c=[{value:"Creating a Min-Heap(Default) and Max-Heap.",id:"creating-a-min-heapdefault-and-max-heap",level:2},{value:"Min Heap (Default)",id:"min-heap-default",level:3},{value:"Max Heap",id:"max-heap",level:3},{value:"Operations and Complexities",id:"operations-and-complexities",level:2},{value:"Complexities",id:"complexities",level:3},{value:"Operations",id:"operations",level:3},{value:"Different Constructors of Priority Queue.",id:"different-constructors-of-priority-queue",level:2},{value:"Priority Queue with Comparator.",id:"priority-queue-with-comparator",level:2},{value:"Use of Comparator Class",id:"use-of-comparator-class",level:3},{value:"Anonymous Comparator Class",id:"anonymous-comparator-class",level:3},{value:"Resources",id:"resources",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This will cover up all the medium questions that are available on Leetcode."),(0,i.kt)("h2",{id:"creating-a-min-heapdefault-and-max-heap"},"Creating a Min-Heap(Default) and Max-Heap."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Basically, every element in a page has a box drawn around it. "),(0,i.kt)("li",{parentName:"ul"},"This box influences the space the element takes and how it interacts with other elements.")),(0,i.kt)("h3",{id:"min-heap-default"},"Min Heap (Default)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    PriorityQueue<Integer> queue = new PriorityQueue<>();\n}\n")),(0,i.kt)("h3",{id:"max-heap"},"Max Heap"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    PriorityQueue<Integer> queue = new PriorityQueue<>(Collections.reverseOrder());\n}\n")),(0,i.kt)("h2",{id:"operations-and-complexities"},"Operations and Complexities"),(0,i.kt)("h3",{id:"complexities"},"Complexities"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operations"),(0,i.kt)("th",{parentName:"tr",align:null},"Complexity"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"offer, poll, remove, add"),(0,i.kt)("td",{parentName:"tr",align:null},"O(log n)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"peek"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"remove(Object)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"peek, element, size, isEmpty"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)")))),(0,i.kt)("h3",{id:"operations"},"Operations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n// Adding items to the pq using add()\npq.add(10);\n\n// Adding items to the pq using offer()\npq.offer(20);\n\n// Peek item at the top of the Queue using peek()\npq.peek();\n\n// Remove the top element from the Queue using poll()\npq.poll();\n\n//Retrieves and remove the head of the Queue\npq.remove()\n\npq.remove(20);\n// Removes a single instance of the specified element \n// from this queue, if it is present.\n// Return type is boolean.\n\npq.element();\n// Retrieves, but does not remove, the head of this queue.\n\npq.size();\n// Returns the number of elements in this collection.\n\npq.isEmpty();\n// Returns true if this collection contains no elements.\n")),(0,i.kt)("h2",{id:"different-constructors-of-priority-queue"},"Different Constructors of Priority Queue."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"PriorityQueue<E> pq = new PriorityQueue<E>(); \n// Creates a PriorityQueue with the default initial capacity (11) \n// that orders its elements according to their natural ordering.\n\nPriorityQueue<E> pq = new PriorityQueue<E>(Collection<E> c); \n// Creates a PriorityQueue containing the elements \n// in the specified collection.\n\nPriorityQueue<E> pq = new PriorityQueue<E>(int initialCapacity); \n// Creates a PriorityQueue with the specified initial capacity \n// that orders its elements according to their natural ordering.\n\nPriorityQueue<E> pq = new PriorityQueue(int initialCapacity, Comparator<E> comparator);\n// Creates a PriorityQueue with the specified initial capacity that orders its elements \n// according to the specified comparator.\n\nPriorityQueue<E> pq = new PriorityQueue(PriorityQueue<E> c);\n// Creates a PriorityQueue containing the elements in the specified \n// priority queue.\n\nPriorityQueue<E> pq = new PriorityQueue<E>(SortedSet<E> c);\n// Creates a PriorityQueue containing the elements in the specified sorted set.\n")),(0,i.kt)("h2",{id:"priority-queue-with-comparator"},"Priority Queue with Comparator."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"-1 : o1 < o2\n0 : o1 == o2\n+1 : o1 > o2\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you always return the same value (o, 1, -1) for the comparator, regardless of it's inputs, then you're not using it correctly. You need to base the value returned on the values passed in. The idea is that the data structure (or sorter) calls the comparison function any time it needs to order two elements, to find out what order to put them in."),(0,i.kt)("li",{parentName:"ul"},"Its worth noting that the positive/negative integer values (-1, +1) don't need to be 1, they can be any positive/negative numbers. It's just common practice to return -1/+1.")),(0,i.kt)("h3",{id:"use-of-comparator-class"},"Use of Comparator Class"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    PriorityQueue<Student> pq = new PriorityQueue<Student>(5, new StudentComparator());\n    // Here 5 represents the initial capacity, one of many kind of different constructor for PQ.\n    // When you add elements into the pq, they will be sorted as per the CGPA DESC Order.\n}\nclass StudentComparator implements Comparator<Student>{\n    // Overriding compare() method of Comparator // for descending order of CGPA\n    public int compare(Student s1, Student s2) {\n        if (s1.cgpa < s2.cgpa) return 1;\n        else if (s1.cgpa > s2.cgpa) return -1;\n        else return 0;\n    }\n}\n")),(0,i.kt)("h3",{id:"anonymous-comparator-class"},"Anonymous Comparator Class"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    PriorityQueue<Student> pq = new PriorityQueue<>(10, new Comparator<Student>() {\n        public int compare(Student n1, Student n2) {\n            //Method 1\n            // return Integer.compare(n1.getCGPA(), n2.getCGPA());\n            //Method 2\n            return new Integer(n1.cgpa).compareTo(new Integer(n2.cgpa)); \n            // You can make Integer object and then compare.\n            // For Strings you can directly use int com = "bsd".compareTo("asd");\n            // For other types, we can deduce in similar fashion.\n        }\n    });\n}\n')),(0,i.kt)("h2",{id:"resources"},"Resources"))}m.isMDXComponent=!0}}]);