"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[772],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,g=m["".concat(p,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1649:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),l=["components"],i={title:"Optional type (Java)",description:"How and when to use the Java Optional type",last_modified:new Date("2020-05-30T13:54:15.000Z"),sidebar_label:"Optional type"},p=void 0,s={unversionedId:"java/optional",id:"java/optional",title:"Optional type (Java)",description:"How and when to use the Java Optional type",source:"@site/docs/java/optional.md",sourceDirName:"java",slug:"/java/optional",permalink:"/interview-prep/java/optional",draft:!1,tags:[],version:"current",frontMatter:{title:"Optional type (Java)",description:"How and when to use the Java Optional type",last_modified:"2020-05-30T13:54:15.000Z",sidebar_label:"Optional type"},sidebar:"docs",previous:{title:"Lambda expressions",permalink:"/interview-prep/java/lambda-expressions"},next:{title:"Overloading, overriding and method hiding",permalink:"/interview-prep/java/overloading-overriding-method-hiding"}},u={},c=[{value:"Basic idea",id:"basic-idea",level:2},{value:"How to use Optional values",id:"how-to-use-optional-values",level:2},{value:"How not to use Optional values",id:"how-not-to-use-optional-values",level:2},{value:"Creating Optional values",id:"creating-optional-values",level:2},{value:"Turning an Optional into a Stream",id:"turning-an-optional-into-a-stream",level:2},{value:"Resources",id:"resources",level:2}],m={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"How and when to use the Java Optional type"),(0,r.kt)("h2",{id:"basic-idea"},"Basic idea"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Optional<T>"),": a wrapper for either an object of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," or no object"),(0,r.kt)("p",null,"Goal: provide safer alternative to returning either an object of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")),(0,r.kt)("p",null,"Main use case: return type for methods that do not necessarily produce a value"),(0,r.kt)("p",null,"Note: Method parameters of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional")," are not recommended because this makes it awkward to call the method. For implementing methods with optional parameters, method overloading is generally considered a better option. See also ",(0,r.kt)("a",{href:"https://stackoverflow.com/a/39005452",target:"_blank",rel:"nofollow noopener noreferrer"},"Why should Java 8's Optional not be used in arguments ",(0,r.kt)("svg",{class:"embedded-fa-icon"},(0,r.kt)("use",{href:"#external-link-alt"})))),(0,r.kt)("h2",{id:"how-to-use-optional-values"},"How to use Optional values"),(0,r.kt)("p",null,"Basically, two sensible options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"use a method that produces an alternative value if the Optional is empty"),(0,r.kt)("li",{parentName:"ul"},"use a method that only consumes the value if the Optional is not empty")),(0,r.kt)("p",null,"Examples first option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String result = optionalString.orElse("");\nString result = optionalString.orElseGet(functionReturningString);\nString result = optionalString.orElseThrow(IllegalStateException::new);\n')),(0,r.kt)("p",null,"Examples second option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'optionalString.ifPresent(processString); // returns nothing\n\noptionalString.ifPresentOrElse(\n        System.out::println, \n        () -> System.out.println("Empty!")); // returns nothing\n\n// Optional containing the length of the value (if it was present) and empty otherwise\noptionalString.map(String::length)\n    \noptionalString.flatMap(functionReturningOptionalInteger) // Optional<Integer>\n')),(0,r.kt)("h2",{id:"how-not-to-use-optional-values"},"How not to use Optional values"),(0,r.kt)("p",null,"When used in the wrong way, using ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional")," is not safer or easier than using null"),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"nullableString.length() // length throws NullPointerException\noptionalString.get().length() // get throws NoSuchElementException\n\nif (nullableString != null) {\n    length = nullableString.length()\n}\n\nif (optionalString.isPresent()) {\n    length = optionalString.get().length()\n}\n")),(0,r.kt)("h2",{id:"creating-optional-values"},"Creating Optional values"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Optional<String> optionalString = Optional.of("test"); // throws if argument null\nOptional<String> optionalString = Optional.ofNullable(nullableString);\nOptional<String> optionalString = Optional.empty();\n')),(0,r.kt)("h2",{id:"turning-an-optional-into-a-stream"},"Turning an Optional into a Stream"),(0,r.kt)("p",null,"Conceptually, you can compare an Optional to a stream with either zero or one elements. The ",(0,r.kt)("inlineCode",{parentName:"p"},".stream()")," method follows that principle, yielding a stream with zero elements if the Optional is empty and a stream with one element if the optional has a value"),(0,r.kt)("p",null,"Example use case:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"idsStream\n        .map(Users::lookup) // Users.lookUp returns an Optional<User>\n        .flatMap(Optional::stream)\n")),(0,r.kt)("p",null,"Note: if you call a method that returns either a value or null, you can apply the samle principle using ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream.ofNullable"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"idsStream\n        .map(Users::lookup) // Users.lookUp returns a User object or null\n        .flatMap(Stream::ofNullable)\n")),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Core Java SE 9 for the Impatient (book by Cay S. Horstmann)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{href:"https://stackoverflow.com/a/39005452",target:"_blank",rel:"nofollow noopener noreferrer"},"Why should Java 8's Optional not be used in arguments ",(0,r.kt)("svg",{class:"embedded-fa-icon"},(0,r.kt)("use",{href:"#external-link-alt"}))))))}d.isMDXComponent=!0}}]);