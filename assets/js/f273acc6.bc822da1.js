"use strict";(self.webpackChunkinterview_prep=self.webpackChunkinterview_prep||[]).push([[1443],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=l(r),d=i,h=f["".concat(s,".").concat(d)]||f[d]||p[d]||a;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7537:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),o=["components"],c={title:"Graph",description:"This will cover the most of the topics that will be part of the Graph.",last_modified:new Date("2022-06-08T15:36:32.363Z"),sidebar_label:"Graph"},s=void 0,l={unversionedId:"data-structures/graph",id:"data-structures/graph",title:"Graph",description:"This will cover the most of the topics that will be part of the Graph.",source:"@site/docs/data-structures/graph.md",sourceDirName:"data-structures",slug:"/data-structures/graph",permalink:"/interview-prep/data-structures/graph",draft:!1,tags:[],version:"current",frontMatter:{title:"Graph",description:"This will cover the most of the topics that will be part of the Graph.",last_modified:"2022-06-08T15:36:32.363Z",sidebar_label:"Graph"},sidebar:"docs",previous:{title:"Depth First Search",permalink:"/interview-prep/data-structures/dfs"},next:{title:"Linked List",permalink:"/interview-prep/data-structures/linked-list"}},u={},p=[{value:"Detect Cycle in a Directed Graph.",id:"detect-cycle-in-a-directed-graph",level:2}],f={toc:p};function d(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This will cover the most of the topics that will be part of the Graph."),(0,a.kt)("h2",{id:"detect-cycle-in-a-directed-graph"},"Detect Cycle in a Directed Graph."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    boolean isCyclicUtil(int i, boolean[] visited, boolean[] recursionStack) {\n            // Mark the current node as visited and\n            // part of recursion stack\n            if (recursionStack[i]) return true;\n            if (visited[i]) return false;\n        \n            visited[i] = true;\n            recursionStack[i] = true;\n        \n            List<Integer> children = adj.get(i);\n            for (Integer c : children){\n                    if (isCyclicUtil(c, visited, recursionStack)){\n                        return true;\n                }\n            recursionStack[i] = false;\n            return false;\n        }\n        boolean isCyclic() {\n            // Mark all the vertices as not visited and\n            // not part of recursion stack\n            boolean[] visited = new boolean[V];\n            boolean[] recursionStack= new boolean[V];\n        \n            // Call the recursive helper function to\n            // detect cycle in different DFS trees\n            for (int i = 0; i < V; i++) if (\n                isCyclicUtil(i, visited, recursionStack)\n            ) return true;\n        \n            return false;\n        }\n}\n")))}d.isMDXComponent=!0}}]);